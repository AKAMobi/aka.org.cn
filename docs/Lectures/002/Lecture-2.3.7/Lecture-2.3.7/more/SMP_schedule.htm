<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
<meta http-equiv="content-type" content="text/html; charset=x-gbk">
<title>The Linux/SMP Scheduler</title>
</head>

<body>

<h3 class="HeadB">The Linux/SMP Scheduler</h3>

<p class="Body">The Linux scheduler must be slightly modified in order to support the 
symmetricmultiprocessor (SMP) architecture. Actually, each processor runs the <code
class="Literal">schedule(&nbsp; )</code> function on its own, but processors must exchange 
informationin order to boost system performance.</p>

<p class="Body">When the scheduler computes the goodness of a runnable process, it 
shouldconsider whether that process was previously running on the same CPU or onanother 
one. A process that was running on the same CPU is always preferred,since the hardware 
cache of the CPU could still include useful data. Thisrule helps in reducing the number of 
cache misses.</p>

<p class="Body">Let us suppose, however, that CPU 1 is running a process when a second, 
higher-priorityprocess that was last running on CPU 2 becomes runnable. Now the kernel 
isfaced with an interesting dilemma: should it immediately execute the 
higher-priorityprocess on CPU 1, or should it defer that process's execution until CPU 
2becomes available? In the former case, hardware caches contents are discarded;in the 
latter case, parallelism of the SMP architecture may not be fullyexploited when CPU 2 is 
running the idle process (<em class="Emphasis"> swapper</em>).</p>

<p class="Body">In order to achieve good system performance, Linux/SMP adopts an 
empiricalrule to solve the dilemma. The adopted choice is always a compromise, andthe 
trade-off mainly depends on the size of the hardware caches integrated into each CPU: the 
larger the CPU cache is, the more convenient it is tokeep a process bound on that CPU.</p>

<h4 class="HeadC">Linux/SMP scheduler data structures</h4>

<p class="Body">An <code class="Literal">aligned_data</code> table includes one data 
structurefor each processor, which is used mainly to obtain the descriptors of 
currentprocesses quickly. Each element is filled by every invocation of the <code
class="Literal">schedule(&nbsp; )</code> function and has the following structure: </p>

<pre><code class="Code">struct schedule_data { </code>
<code class="Code">    struct task_struct * curr; </code>
<code
class="Code">    unsigned long last_schedule; </code>
<code class="Code">}; </code>
</pre>

<p class="Body">The <code class="Literal">curr</code> field points to the descriptor of 
theprocess running on the corresponding CPU, while <code class="Literal">last_schedule</code>&nbsp; 
specifies when <code class="Literal">schedule(&nbsp; )</code> selected <code
class="Literal">curr</code> as the running process.</p>

<p class="Body">Several SMP-related fields are included in the process descriptor. In 
particular,the <code class="Literal">avg_slice</code> field keeps track of the 
averagequantum duration of the process, and the <code class="Literal">processor</code>&nbsp; 
field stores the logical identifier of the last CPU that executed it.</p>

<p class="Body">The <code class="Literal">cacheflush_time</code> variable contains a 
roughestimate of the minimal number of CPU cycles it takes to entirely overwritethe 
hardware cache content. It is initialized by the <code class="Literal">smp_tune_scheduling(&nbsp; 
)</code> function to:</p>

<p class="Body">Intel Pentium processors have a hardware cache of 8 KB, so their <code
class="Literal">cacheflush_time</code> is initialized to a few hundred CPU cycles, that 
is,a few microseconds. Recent Intel processors have larger hardware caches,and therefore 
the minimal cache flush time could range from 50 to 100 microseconds.</p>

<p class="Body">As we shall see later, if <code class="Literal">cacheflush_time</code> 
isgreater than the average time slice of some currently running process, noprocess 
preemption is performed because it is convenient in this case to bind processes to the 
processors that last executed them.</p>

<h4 class="HeadC"><a name="67967"></a>The schedule(&nbsp; ) function</h4>

<p class="Body">When the <code class="Literal">schedule(&nbsp; )</code> function is 
executed onan SMP system, it carries out the following operations:

<ol>
  <li class="ListNumber">Performs the initial part of <code class="Literal">schedule(&nbsp; )</code> 
    asusual.</li>
  <li class="ListNumber">Stores the logical identifier of the executing processor in the <code
    class="Literal">this_cpu</code> local variable; such value is read from the <code
    class="Literal">processor</code> field of <code class="Literal">prev</code> (that is, 
    ofthe process to be replaced).</li>
  <li class="ListNumber">Initializes the <code class="Literal">sched_data</code> local 
    variable sothat it points to the <code class="Literal">schedule_data</code> structureof 
    the <code class="Literal">this_cpu</code> CPU.</li>
  <li class="ListNumber">Invokes <code class="Literal">goodness(&nbsp; )</code> repeatedly to 
    select thenew process to be executed; this function also examines the <code
    class="Literal">processor</code> field of the processes and gives a consistent bonus (<code
    class="Literal">PROC_CHANGE_PENALTY</code>, usually 15) to the process that was last 
    executedon the <code class="Literal">this_cpu</code> CPU.</li>
  <li class="ListNumber">If needed, recomputes process dynamic priorities as usual.</li>
  <li class="ListNumber">Sets <code class="Literal">sched_data-&gt;curr</code> to <code
    class="Literal">next</code>.</li>
  <li class="ListNumber">Sets <code class="Literal">next-&gt;has_cpu</code> to 1 and <code
    class="Literal">next-&gt;processor</code> to <code class="Literal">this_cpu</code>.</li>
  <li class="ListNumber">Stores the current Time Stamp Counter value in the <code
    class="Literal">t</code> local variable.</li>
  <li class="ListNumber">Stores the last time slice duration of <code class="Literal">prev</code>in 
    the <code class="Literal">this_slice</code> local variable; this valueis the difference 
    between <code class="Literal">t</code> and <code class="Literal">sched_data-&gt;last_schedule</code>.</li>
  <li class="ListNumber">Sets <code class="Literal">sched_data-&gt;last_schedule</code> to <code
    class="Literal">t</code>.</li>
  <li class="ListNumber">Sets the <code class="Literal">avg_slice</code> field of <code
    class="Literal">prev</code> to (<code class="Literal">prev-&gt;avg_slice+this_slice</code> 
    )/2; in other words, updates the average.</li>
  <li class="ListNumber">Performs the context switch.</li>
  <li class="ListNumber">When the kernel returns here, the original previous process has been 
    selectedagain by the scheduler; the <code class="Literal">prev</code> local variablenow 
    refers to the process that has just been replaced. If <code class="Literal">prev</code> is 
    still runnable and it is not the idle task of this CPU, invokesthe <code class="Literal">reschedule_idle(&nbsp; 
    )</code> function on it (seethe next section).</li>
  <li class="ListNumber">Sets the <code class="Literal">has_cpu</code> field of <code
    class="Literal">prev</code> to 0.</li>
</ol>

<h4 class="HeadC"><a name="67967"></a>The reschedule_idle(&nbsp; ) function</h4>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; The <code class="Literal">reschedule_idle(&nbsp; )</code> 
function is invoked when a process <code class="Literal">p</code> becomes runnable (see 
the earlier section &quot;<a href="ch10.html#57373" class="XRef"> The schedule(&nbsp; ) 
Function</a>&quot;). On an SMP system, the function determines whether the process should 
preempt the current process of some CPU. It performs the following operations:

<ol>
  <li class="ListNumber">If <code class="Literal">p</code> is a real-time process, always 
    attemptsto perform preemption: go to step 3.</li>
  <li class="ListNumber">Returns immediately (does not attempt to preempt) if there is a CPU 
    whosecurrent process satisfies both of the following conditions:<a href="#footnote-4"
    title="Footnote" class="footnote"> [4]</a></li>
  <ul>
    <li class="FM-ListBullet"><code class="Literal">cacheflush_time</code> is greater than the 
      average time slice of the currentprocess. If this is true, the process is not dirtying the 
      cache significantly.</li>
    <li class="FM-ListBullet">Both <code class="Literal">p</code> and the current process need 
      the globalkernel lock (see the section &quot;Global and Local Kernel Locks&quot; in 
      Chapter 11)in order to access some critical kernel data structure. This check is 
      performedbecause replacing a process holding the lock with another one that needsit is not 
      fruitful. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </li>
  </ul>
  <li class="ListNumber">If the <code class="Literal">p-&gt;processor</code> CPU (the one on 
    which&nbsp; <code class="Literal">p</code> was last running) is idle, selects it.</li>
  <li class="ListNumber">Otherwise, computes the difference:</li>
  <p class="EquationHolder"><code class="Literal">goodness(tsk, p) - goodness(tsk, tsk)</code></p>
  <p class="ListNumber-">for each task <code class="Literal">tsk</code> running on some CPU 
  and selectsthe CPU for which the difference is greatest, provided it is a positive value.&nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
  <li class="ListNumber">If CPU has been selected, sets the <code class="Literal">need_resched</code>&nbsp; 
    field of the corresponding running process and sends a &quot;reschedule&quot; messageto 
    that processor (see the section &quot;Interprocessor Interrupts&quot; in Chapter 11).</li>
  <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </p>
</ol>
</body>
</html>
