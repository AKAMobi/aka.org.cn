
<!--  Presentation generated by Internet Assistant for Microsoft PowerPoint 97 -->

<HTML>
<HEAD>

<meta name="GENERATOR" content="Microsoft Internet Assistant for Microsoft PowerPoint 97">
 <TITLE>GNOME程序设计</TITLE> 
</HEAD>

<BODY     >

<CENTER>
<TABLE WIDTH=100%> 
     <TR> <TD WIDTH=100% ALIGN=CENTER>
         <IMG SRC="img033.gif" usemap="#Objmap" WIDTH=512 HEIGHT=384 BORDER=0>
     </TD> </TR>
     <TR> <TD WIDTH=100% ALIGN=CENTER>
         <A HREF="sld001.htm">First</A>&nbsp;&nbsp;
         <A HREF="sld032.htm">Previous</A>&nbsp;&nbsp;
         <A HREF="sld034.htm">Next</A>&nbsp;&nbsp;
         <A HREF="sld044.htm">Last</A>&nbsp;&nbsp;
&nbsp;&nbsp;         <A HREF="index.htm">Index</A>&nbsp;&nbsp;
         <A HREF="http://www.lisoleg.org">Home</A>&nbsp;&nbsp;
         <A HREF="tsld033.htm">Text</A>&nbsp;&nbsp;
     </TD> </TR>
</TABLE>
<P>Slide 33 of 44</P>
</CENTER>
<!-- <UL>
<H2>GNOME程序设计</H2>
</UL></P>
<P><UL>
<LI><H2>CORBA
</H2>
</UL><UL>
<LI><H2>Gnorba
</H2>
</UL><UL>
<LI><H2>Gnome桌面应用
</H2>
<UL>
<LI>只使用GTK+，与CORBA无关；
<LI>除GTK+外，只使用无GUI的CORBA服务，类似于简单的库函数调用；
<LI>除GTK+外，还包含其它CORBA服务提供的GUI(Bonobo embeddable components)，这时它是一个container，而被包含的组件被成为containee；
<LI>只是一个containee；
<LI>既是一个container，同时还是一个containee。
</UL></UL><UL>
<LI><H2>对于一般的GNOME Desktop应用来说，好在问题没这么复杂。因为GNOME已经用C语言将大量的CORBA接口包裹了起来，你只需要简单象写GTK+程序一样方便地调用。 
</H2>
</UL><UL>
<LI><H2>举例</H2>
</UL></P>
<P>  -->
</Body>
</HTML>
