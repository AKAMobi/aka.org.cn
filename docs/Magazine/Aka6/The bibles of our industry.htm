<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0067)http://www.javaworld.com/javaworld/jw-09-2000/jw-0929-bibles_p.html -->
<HTML><HEAD><TITLE>The bibles of our industry - JavaWorld September 2000</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<META 
content="&#10;Thomas Davis recommends four books that will provide you with what it takes to excel in Java development. The books extend beyond the basic syntax and semantics of Java to provide you with a comprehensive understanding of object-oriented programming. (1,200 words)&#10;" 
name=description>
<META content=2001-02-21 name=date>
<META 
content="JavaWorld, Java, books, patterns, antipatterns, design, refactoring, extreme programming" 
name=keywords>
<META content="Thomas E. Davis" name=author>
<META content=2000-09-29 name=publicationDate>
<META content="MSHTML 5.50.4134.600" name=GENERATOR></HEAD>
<BODY text=#000000 vLink=#551a8b aLink=#ff0000 link=#0000ff bgColor=#ffffff 
topMargin=0 MARGINHEIGHT="0">
<NOLAYER><IFRAME 
border=0 marginWidth=0 marginHeight=0 
src="xp_industy.files/jwsurvey121900;sz=1x1;tile=16;ord=29000337.htm" 
frameBorder=no width=1 scrolling=no 
height=1> <A HREF="http://ad.doubleclick.net/jump/idg.us.jwsurvey/jwsurvey121900;abr=!ie;sz=1x1;tile=16;ord=29000337?"><IMG SRC="http://ad.doubleclick.net/ad/idg.us.jwsurvey/jwsurvey121900;abr=!ie;sz=1x1;tile=16;ord=29000337?" border=0 height="1" width="1"></A> 
</IFRAME></NOLAYER> <FONT 
face=Arial,Helvetica,Sans-serif color=#336699 size=+1><STRONG>Must Reads</STRONG> 
</FONT> 
<H1 align=center>The bibles of our industry </H1>
<H3 align=center>The four most important books in your library do not have Java 
in their titles </H3>
<BLOCKQUOTE><STRONG>Summary</STRONG><BR>Thomas Davis recommends four books 
  that will provide you with what it takes to excel in Java development. The 
  books extend beyond the basic syntax and semantics of Java to provide you with 
  a comprehensive understanding of object-oriented programming. <EM>(1,200 
  words)</EM> </BLOCKQUOTE><STRONG>By <A 
href="mailto:thomas.davis@javaworld.com">Thomas E. Davis</A></STRONG> 
<P><IMG height=2 alt="" src="xp_industy.files/blue.gif" width="100%" border=0> 
<P><!-- begin body text --><IMG height=29 alt=I src="xp_industy.files/I.gif" 
width=12 align=left>n this article, I present a treatise on the subjects that 
separate the rookies from the pros in Java development and a reference to the 
books that will help you cross that line. This is not a book review under the 
guise of an article. This is your ticket to the next step in your career 
development. 
<P>Java is a programming language. It is also a tool, and a tool in the wrong 
hands is useless, sometimes even dangerous. Knowing only the syntax and 
semantics of Java does not a programmer make. A programmer must also know and 
understand intimately the environmental paradigm, which in Java's case, is 
object-oriented design. It is not enough to understand what an object is, what 
an interface is, how objects implement interfaces, ad nauseam. A programmer 
needs to know the mystic ways in which those rules and relationships can be 
combined into flexible, reusable, and scalable systems. The books that I discuss 
here will give you those lessons and enhance your career as a Java developer. 
Ironically, none of them contain the word <EM>Java</EM> in their titles. 
<P><STRONG>Note: URLs for all books discussed in this article can be found in <A 
href="http://www.javaworld.com/javaworld/jw-09-2000/jw-0929-bibles_p.html#resources">Resources</A></STRONG>. 

<P><FONT size=+1><STRONG>Design patterns</STRONG></FONT><BR>To paraphrase the 
book <EM>Design Patterns</EM> by Erich Gamma, Richard Helm, Ralph Johnson, John 
Vlissides, and Grady Boocha (<EM>Addison-Wesley,</EM> 1995), a pattern describes 
a recurring problem and proposes a reusable solution. Patterns simplify your job 
by helping you avoid the pitfalls of memory limitations via object sharing -- 
with Flyweight, for example -- or create a swapable integration with third-party 
libraries such as Facade. <EM>Design Patterns</EM> details those two patterns, 
plus a score more, and provides code examples and easy-to-understand diagrams. 
Although the code samples are all in C++, the syntax sufficiently resembles 
Java; most programmers will thus have no problem grasping the concepts. There is 
an imitation of this book available that uses Java for the examples -- <EM>Java 
Design Patterns: A Tutorial</EM> by James William Cooper 
(<EM>Addison-Wesley,</EM> 2000) -- but you won't find the same clarity and depth 
that the Gang of Four (the authors' established nickname) conveys in <EM>Design 
Patterns.</EM> 
<P>Once you are familiar with the patterns cataloged in <EM>Design 
Patterns,</EM> learn how some of them evolved. In <EM>Pattern Hatching: Design 
Patterns Applied (Software Patterns Series)</EM> (<EM>Addison-Wesley,</EM> 
1998), John Vlissides -- one-fourth of The Gang -- recounts the debates and 
discussions over some of the more popular patterns and introduces some new 
patterns that didn't make the cut in <EM>Design Patterns.</EM> 
<P><FONT size=+1><STRONG>Refactoring</STRONG></FONT><BR>To err is human. If that 
is true, I've seen hundreds of programs that are more human than I. Projects go 
wrong. Mistakes are made. Schedules slip, and quality is sacrificed. Those make 
up the caveats of our profession. But where do you turn when things reach their 
worst? Too many of my colleagues belong to the "throw-away-and-start-over" camp: 
start over from scratch and hope that you've learned from your mistakes. That is 
the most extreme solution, one that is sure to infuriate your boss. But don't 
despair because there are alternatives. 
<P><EM>Refactoring: Improving the Design of Existing Code (Addison-Wesley Object 
Technology Series)</EM> by Martin Fowler, Kent Beck, John Brant, William Opdyke, 
and Don Roberts (<EM>Addison-Wesley,</EM> 1999) offers developers various 
options to starting over. Refactoring is the process of improving performance by 
reorganizing a program's internal structure without altering external behavior. 
Refactoring could make a method run faster or provide more accurate results 
without changing the method's signature. The changes are invisible to the 
programs that call the method, so no code requires modification. 
<P>The book teaches the reader how to identify problematic code by associating 
it with a particular <EM>smell</EM> and relates each to a catalog of procedures 
for repair. For example, a smell might be Inappropriate Intimacy, which 
describes two or more classes so tightly integrated that a change to one 
requires a change to another. One of the handful of possible solutions that the 
book suggests is Move Method, which constitutes the relocation of the 
<EM>smelly</EM> method into a more appropriate class. 
<P><FONT size=+1><STRONG>Antipatterns</STRONG></FONT><BR>Software design isn't 
the only area prone to missteps and oversights. Management is equally 
susceptible to the pitfalls of the chaotic development process and surreal 
schedules. Most Internet shops have an alarming rate of employee turnover in 
their development departments. As programmers come and go, the hierarchy of 
responsibility becomes as convoluted as the source code structure. That is where 
the book <EM>AntiPatterns: Refactoring Software, Architectures, and Projects in 
Crisis</EM> by William J. Brown, Raphael C. Malveau, William H. Brown, Hays W. 
McCormick III, and Thomas J. Mowbray (<EM>John Wiley &amp; Sons,</EM> 1998) fits 
into your overall career objectives. It catalogs common errors in planning and 
mismanagement and postulates ways to dig yourself out of the abyss. 
<P>Does your project suffer from the Design by Committee antipattern, meaning 
that too many chefs are spoiling the soup? Or perhaps your code base has fallen 
into the Vendor Lock-In antipattern, leaving you dangerously dependent on a 
third-party product. <EM>AntiPatterns</EM> classifies a dozen of those issues 
and about two dozen more mini antipatterns, and guides you in avoiding them and 
in breaking free from the traps you happen to fall into. 
<P><FONT size=+1><STRONG>Extreme programming</STRONG></FONT><BR>Extreme 
programming (XP) is a fresh and somewhat controversial new development process 
spearheaded by Kent Beck. XP strives to deliver good software on time without 
the bureaucracy and paper trails of traditional development. In the hectic 
environment of Internet startups, everybody focuses on time-to-market. In the 
real world, projects that run over budget and past their deadlines get 
cancelled, causing some companies to eventually fold. The reams of documentation 
and diagrams produced at the beginning of the project rarely reflect the final 
product. Thus, development teams need to be adaptive and responsive to frequent 
changes in the project's requirements. That is where XP shines. 
<P>"Communication, simplicity, feedback, and courage" is the mantra of the XP 
devotee. Achieve communication by, for example, programming in pairs. One person 
codes while the partner performs a realtime peer review. 
<P>Simplicity argues for building only what you need when you need it. Don't 
waste time engineering extravagant solutions for problems that <EM>might</EM> 
arise in the future. 
<P>Feedback relates to the "release early, release often" rule of which so many 
open source fanatics are fond. By putting the product in front of the customer's 
face early in development, you are more likely to avoid drastic change requests 
later in the cycle. 
<P>Finally, courage urges the XP disciple to take chances and learn from the 
results. On rare occasions, you just might have to resort to the 
"throw-away-and-start-over" technique. That mantra along with how XP can help 
you are described in <EM>Extreme Programming Explained: Embrace Change</EM> by 
Kent Beck (<EM>Addison-Wesley,</EM> 1999). 
<P><FONT size=+1><STRONG>Conclusion</STRONG></FONT><BR>I was recently awarded 
the opportunity to start a company from scratch. My development teams live and 
breathe by the teachings of those books, and the results have been phenomenal. 
We've built extremely robust and scalable systems, on schedule, with no 
overtime. Those books have changed my career for the better, and I believe they 
can change yours as well. <IMG height=8 src="xp_industy.files/dingbat.gif" 
width=8> <!-- end body text -->
<P><A name=bio></a>
<TABLE cellSpacing=3 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center></TD>
    <TD bgColor=#000000><IMG height=1 src="xp_industy.files/dot_clear.gif" 
      width=2 align=bottom border=0></TD>
    <TD vAlign=top><STRONG><FONT face=Arial,Helvetica,Sans-serif size=-1>About 
      the author </FONT></STRONG><BR><A href="mailto:thomas.davis">Thomas E. 
      Davis</A> is a Sun-certified Java developer and the chief technology 
      officer of his second successful Internet startup. Thomas currently 
      resides in sunny south Florida and regrettably spends most of his time 
      indoors in front of a computer. </TD></TR></TBODY></TABLE><!-- stopindex -->
<P>
<P>
<P align=center><A 
href="http://www.javaworld.com/javaworld/common/jw-copyright.html">(c) Copyright 
2000 ITworld.com, Inc., an IDG Communications company</A> </P>
<P><A name=resources><STRONG>Resources</STRONG></A> 
<UL>
  <LI><EM>Design Patterns,</EM> Erich Gamma, Richard Helm, Ralph Johnson, John 
  Vlissides, and Grady Boocha (<EM>Addison-Wesley,</EM> 1995): <BR><A 
  href="http://www.amazon.com/exec/obidos/ASIN/0201633612/articles">http://www.amazon.com/exec/obidos/ASIN/0201633612/articles</A> 

  <LI><EM>Pattern Hatching: Design Patterns Applied (Software Patterns 
  Series),</EM> John Vlissides (<EM>Addison-Wesley,</EM> 1998): <BR><A 
  href="http://www.amazon.com/exec/obidos/ASIN/0201432935/articles">http://www.amazon.com/exec/obidos/ASIN/0201432935/articles</A> 

  <LI><EM>Refactoring: Improving the Design of Existing Code (Addison-Wesley 
  Object Technology Series),</EM> Martin Fowler, Kent Beck, John Brant, William 
  Opdyke, and Don Roberts (<EM>Addison-Wesley,</EM> 1999): <BR><A 
  href="http://www.amazon.com/exec/obidos/ASIN/0201485672/articles">http://www.amazon.com/exec/obidos/ASIN/0201485672/articles</A> 

  <LI><EM>AntiPatterns: Refactoring Software, Architectures, and Projects in 
  Crisis,</EM> William J. Brown, Raphael C. Malveau, William H. Brown, Hays W. 
  McCormick III, and Thomas J. Mowbray (<EM>John Wiley &amp; Sons,</EM> 1998): 
  <BR><A 
  href="http://www.amazon.com/exec/obidos/ASIN/0471197130/articles">http://www.amazon.com/exec/obidos/ASIN/0471197130/articles</A> 

  <LI><EM>Extreme Programming Explained: Embrace Change,</EM> Kent Beck 
  (<EM>Addison-Wesley,</EM> 1999): <BR><A 
  href="http://www.amazon.com/exec/obidos/ASIN/0201616416/articles">http://www.amazon.com/exec/obidos/ASIN/0201616416/articles</A> 

  <LI><EM>Java Design Patterns: A Tutorial,</EM> James W. Cooper 
  (<EM>Addison-Wesley,</EM> 2000): <BR><A 
  href="http://www.amazon.com/exec/obidos/ASIN/0201485397/articles">http://www.amazon.com/exec/obidos/ASIN/0201485397/articles</A> 

  <LI>The Portland Pattern Repository is an interactive collaboration of pattern 
  definitions and discussions: <BR><A 
  href="http://www.c2.com/cgi/wiki?WelcomeVisitors">http://www.c2.com/cgi/wiki?WelcomeVisitors</A> 

  <LI>For more about extreme programming: <BR><A 
  href="http://www.extremeprogramming.org/">http://www.extremeprogramming.org/</A> 
  </LI></UL>Feedback: <A name=jweditors 
href="http://www.javaworld.com/javaworld/cgi-bin/jw-mailto.cgi?jweditors@javaworld.com+/javaworld/jw-09-2000/jw-0929-bibles.html+jweditors">http://www.javaworld.com/javaworld/cgi-bin/jw-mailto.cgi?jweditors@javaworld.com+/javaworld/jw-09-2000/jw-0929-bibles.html+jweditors</A><BR>Technical 
difficulties: <A name=webmaster 
href="http://www.javaworld.com/javaworld/cgi-bin/jw-mailto.cgi?webmaster@javaworld.com+/javaworld/jw-09-2000/jw-0929-bibles.html+webmaster">http://www.javaworld.com/javaworld/cgi-bin/jw-mailto.cgi?webmaster@javaworld.com+/javaworld/jw-09-2000/jw-0929-bibles.html+webmaster</A><BR>URL: 
http://www.javaworld.com/jw-09-2000/jw-0929-bibles.html <BR>Last modified: 
Wednesday, February 21, 2001 
<CENTER>
</CENTER>
<!--Begin-Survey-->
<LAYER 
height="1" width="1" visibility="hidden" 
onLoad="moveToAbsolute(layer16.pageX,layer16.pageY);clip.height=1;clip.width=1; visibility='show';" 
SRC="http://ad.doubleclick.net/adl/idg.us.jwsurvey/jwsurvey121900;sz=1x1;tile=16;ord=29000337?"></LAYER><!--End-Survey--></BODY></HTML>
