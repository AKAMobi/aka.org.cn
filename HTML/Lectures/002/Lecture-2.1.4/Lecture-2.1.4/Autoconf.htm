<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0058)http://www.gnu.org/manual/autoconf/html_mono/autoconf.html -->
<HTML><HEAD><TITLE>Autoconf</TITLE>
<META content="text/html; charset=gb2312" http-equiv=Content-Type><!-- This HTML file has been created by texi2html 1.52
     from ../texi/autoconf.texi on 20 June 1999 -->
<META content="MSHTML 5.00.2014.210" name=GENERATOR></HEAD>
<BODY>
<H1>Autoconf</H1>
<H2>Creating Automatic Configuration Scripts</H2>
<H2>Edition 2.13, for Autoconf version 2.13</H2>
<H2>December 1998</H2>
<ADDRESS>by David MacKenzie and Ben Elliston</ADDRESS>
<P>
<P>
<HR>

<P>
<H1>Table of Contents</H1>
<UL>
  <LI><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC1" 
  name=TOC1>Introduction</A> 
  <LI><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC2" 
  name=TOC2>Making <CODE>configure</CODE> Scripts</A> 
  <UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC3" 
    name=TOC3>Writing <TT>`configure.in'</TT></A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC4" 
    name=TOC4>Using <CODE>autoscan</CODE> to Create <TT>`configure.in'</TT></A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC5" 
    name=TOC5>Using <CODE>ifnames</CODE> to List Conditionals</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC6" 
    name=TOC6>Using <CODE>autoconf</CODE> to Create <CODE>configure</CODE></A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC7" 
    name=TOC7>Using <CODE>autoreconf</CODE> to Update <CODE>configure</CODE> 
    Scripts</A> </LI></UL>
  <LI><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC8" 
  name=TOC8>Initialization and Output Files</A> 
  <UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC9" 
    name=TOC9>Finding <CODE>configure</CODE> Input</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC10" 
    name=TOC10>Creating Output Files</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC11" 
    name=TOC11>Substitutions in Makefiles</A> 
    <UL>
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC12" 
      name=TOC12>Preset Output Variables</A> 
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC13" 
      name=TOC13>Build Directories</A> 
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC14" 
      name=TOC14>Automatic Remaking</A> </LI></UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC15" 
    name=TOC15>Configuration Header Files</A> 
    <UL>
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC16" 
      name=TOC16>Configuration Header Templates</A> 
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC17" 
      name=TOC17>Using <CODE>autoheader</CODE> to Create 
      <TT>`config.h.in'</TT></A> </LI></UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC18" 
    name=TOC18>Configuring Other Packages in Subdirectories</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC19" 
    name=TOC19>Default Prefix</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC20" 
    name=TOC20>Version Numbers in <CODE>configure</CODE></A> </LI></UL>
  <LI><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC21" 
  name=TOC21>Existing Tests</A> 
  <UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC22" 
    name=TOC22>Alternative Programs</A> 
    <UL>
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC23" 
      name=TOC23>Particular Program Checks</A> 
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC24" 
      name=TOC24>Generic Program and File Checks</A> </LI></UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC25" 
    name=TOC25>Library Files</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC26" 
    name=TOC26>Library Functions</A> 
    <UL>
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC27" 
      name=TOC27>Particular Function Checks</A> 
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC28" 
      name=TOC28>Generic Function Checks</A> </LI></UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC29" 
    name=TOC29>Header Files</A> 
    <UL>
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC30" 
      name=TOC30>Particular Header Checks</A> 
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC31" 
      name=TOC31>Generic Header Checks</A> </LI></UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC32" 
    name=TOC32>Structures</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC33" 
    name=TOC33>Typedefs</A> 
    <UL>
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC34" 
      name=TOC34>Particular Typedef Checks</A> 
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC35" 
      name=TOC35>Generic Typedef Checks</A> </LI></UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC36" 
    name=TOC36>C Compiler Characteristics</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC37" 
    name=TOC37>Fortran 77 Compiler Characteristics</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC38" 
    name=TOC38>System Services</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC39" 
    name=TOC39>UNIX Variants</A> </LI></UL>
  <LI><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC40" 
  name=TOC40>Writing Tests</A> 
  <UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC41" 
    name=TOC41>Examining Declarations</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC42" 
    name=TOC42>Examining Syntax</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC43" 
    name=TOC43>Examining Libraries</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC44" 
    name=TOC44>Checking Run Time Behavior</A> 
    <UL>
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC45" 
      name=TOC45>Running Test Programs</A> 
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC46" 
      name=TOC46>Guidelines for Test Programs</A> 
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC47" 
      name=TOC47>Test Functions</A> </LI></UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC48" 
    name=TOC48>Portable Shell Programming</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC49" 
    name=TOC49>Testing Values and Files</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC50" 
    name=TOC50>Multiple Cases</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC51" 
    name=TOC51>Language Choice</A> </LI></UL>
  <LI><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC52" 
  name=TOC52>Results of Tests</A> 
  <UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC53" 
    name=TOC53>Defining C Preprocessor Symbols</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC54" 
    name=TOC54>Setting Output Variables</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC55" 
    name=TOC55>Caching Results</A> 
    <UL>
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC56" 
      name=TOC56>Cache Variable Names</A> 
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC57" 
      name=TOC57>Cache Files</A> </LI></UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC58" 
    name=TOC58>Printing Messages</A> </LI></UL>
  <LI><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC59" 
  name=TOC59>Writing Macros</A> 
  <UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC60" 
    name=TOC60>Macro Definitions</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC61" 
    name=TOC61>Macro Names</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC62" 
    name=TOC62>Quoting</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC63" 
    name=TOC63>Dependencies Between Macros</A> 
    <UL>
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC64" 
      name=TOC64>Prerequisite Macros</A> 
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC65" 
      name=TOC65>Suggested Ordering</A> 
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC66" 
      name=TOC66>Obsolete Macros</A> </LI></UL></LI></UL>
  <LI><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC67" 
  name=TOC67>Manual Configuration</A> 
  <UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC68" 
    name=TOC68>Specifying the System Type</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC69" 
    name=TOC69>Getting the Canonical System Type</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC70" 
    name=TOC70>System Type Variables</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC71" 
    name=TOC71>Using the System Type</A> </LI></UL>
  <LI><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC72" 
  name=TOC72>Site Configuration</A> 
  <UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC73" 
    name=TOC73>Working With External Software</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC74" 
    name=TOC74>Choosing Package Options</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC75" 
    name=TOC75>Configuring Site Details</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC76" 
    name=TOC76>Transforming Program Names When Installing</A> 
    <UL>
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC77" 
      name=TOC77>Transformation Options</A> 
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC78" 
      name=TOC78>Transformation Examples</A> 
      <LI><A 
      href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC79" 
      name=TOC79>Transformation Rules</A> </LI></UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC80" 
    name=TOC80>Setting Site Defaults</A> </LI></UL>
  <LI><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC81" 
  name=TOC81>Running <CODE>configure</CODE> Scripts</A> 
  <LI><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC82" 
  name=TOC82>Recreating a Configuration</A> 
  <LI><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC83" 
  name=TOC83>Questions About Autoconf</A> 
  <UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC84" 
    name=TOC84>Distributing <CODE>configure</CODE> Scripts</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC85" 
    name=TOC85>Why Require GNU <CODE>m4</CODE>?</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC86" 
    name=TOC86>How Can I Bootstrap?</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC87" 
    name=TOC87>Why Not Imake?</A> </LI></UL>
  <LI><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC88" 
  name=TOC88>Upgrading From Version 1</A> 
  <UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC89" 
    name=TOC89>Changed File Names</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC90" 
    name=TOC90>Changed Makefiles</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC91" 
    name=TOC91>Changed Macros</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC92" 
    name=TOC92>Using <CODE>autoupdate</CODE> to Modernize 
    <CODE>configure</CODE></A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC93" 
    name=TOC93>Changed Results</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC94" 
    name=TOC94>Changed Macro Writing</A> </LI></UL>
  <LI><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC95" 
  name=TOC95>History of Autoconf</A> 
  <UL>
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC96" 
    name=TOC96>Genesis</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC97" 
    name=TOC97>Exodus</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC98" 
    name=TOC98>Leviticus</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC99" 
    name=TOC99>Numbers</A> 
    <LI><A 
    href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC100" 
    name=TOC100>Deuteronomy</A> </LI></UL>
  <LI><A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC101" 
  name=TOC101>Old Macro Names</A> 
  <LI><A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC102" 
  name=TOC102>Environment Variable Index</A> 
  <LI><A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC103" 
  name=TOC103>Output Variable Index</A> 
  <LI><A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC104" 
  name=TOC104>Preprocessor Symbol Index</A> 
  <LI><A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC105" 
  name=TOC105>Macro Index</A> </LI></UL>
<P>
<HR>

<P>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC1" 
name=SEC1>Introduction</A></H1><PRE>A physicist, an engineer, and a computer scientist were
discussing the nature of God.  Surely a Physicist, said the
physicist, because early in the Creation, God made Light; and you
know, Maxwell's equations, the dual nature of electro-magnetic
waves, the relativist consequences... An Engineer!, said the
engineer, because before making Light, God split the Chaos into
Land and Water; it takes a hell of an engineer to handle that big
amount of mud, and orderly separation of solids from
liquids... The computer scientist shouted: And the Chaos,
where do you think it was coming from, hmm?

---Anonymous
</PRE>
<P>Autoconf is a tool for producing shell scripts that automatically configure 
software source code packages to adapt to many kinds of UNIX-like systems. The 
configuration scripts produced by Autoconf are independent of Autoconf when they 
are run, so their users do not need to have Autoconf. </P>
<P>The configuration scripts produced by Autoconf require no manual user 
intervention when run; they do not normally even need an argument specifying the 
system type. Instead, they test for the presence of each feature that the 
software package they are for might need individually. (Before each check, they 
print a one-line message stating what they are checking for, so the user doesn't 
get too bored while waiting for the script to finish.) As a result, they deal 
well with systems that are hybrids or customized from the more common UNIX 
variants. There is no need to maintain files that list the features supported by 
each release of each variant of UNIX. </P>
<P>For each software package that Autoconf is used with, it creates a 
configuration script from a template file that lists the system features that 
the package needs or can use. After the shell code to recognize and respond to a 
system feature has been written, Autoconf allows it to be shared by many 
software packages that can use (or need) that feature. If it later turns out 
that the shell code needs adjustment for some reason, it needs to be changed in 
only one place; all of the configuration scripts can be regenerated 
automatically to take advantage of the updated code. </P>
<P>The Metaconfig package is similar in purpose to Autoconf, but the scripts it 
produces require manual user intervention, which is quite inconvenient when 
configuring large source trees. Unlike Metaconfig scripts, Autoconf scripts can 
support cross-compiling, if some care is taken in writing them. </P>
<P>There are several jobs related to making portable software packages that 
Autoconf currently does not do. Among these are automatically creating 
<TT>`Makefile'</TT> files with all of the standard targets, and supplying 
replacements for standard library functions and header files on systems that 
lack them. Work is in progress to add those features in the future. </P>
<P>Autoconf imposes some restrictions on the names of macros used with 
<CODE>#ifdef</CODE> in C programs (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC104">Preprocessor 
Symbol Index</A>). </P>
<P>Autoconf requires GNU <CODE>m4</CODE> in order to generate the scripts. It 
uses features that some UNIX versions of <CODE>m4</CODE> do not have. It also 
overflows internal limits of some versions of <CODE>m4</CODE>, including GNU 
<CODE>m4</CODE> 1.0. You must use version 1.1 or later of GNU <CODE>m4</CODE>. 
Using version 1.3 or later will be much faster than 1.1 or 1.2. </P>
<P>See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC88">Upgrading 
From Version 1</A>, for information about upgrading from version 1. See section 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC95">History 
of Autoconf</A>, for the story of Autoconf's development. See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC83">Questions 
About Autoconf</A>, for answers to some common questions about Autoconf. </P>
<P>Mail suggestions and bug reports for Autoconf to 
<CODE>bug-gnu-utils@prep.ai.mit.edu</CODE>. Please include the Autoconf version 
number, which you can get by running <SAMP>`autoconf --version'</SAMP>. </P>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC2" 
name=SEC2>Making <CODE>configure</CODE> Scripts</A></H1>
<P>The configuration scripts that Autoconf produces are by convention called 
<CODE>configure</CODE>. When run, <CODE>configure</CODE> creates several files, 
replacing configuration parameters in them with appropriate values. The files 
that <CODE>configure</CODE> creates are: </P>
<UL>
  <LI>one or more <TT>`Makefile'</TT> files, one in each subdirectory of the 
  package (see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC11">Substitutions 
  in Makefiles</A>); 
  <LI>optionally, a C header file, the name of which is configurable, containing 
  <CODE>#define</CODE> directives (see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC15">Configuration 
  Header Files</A>); 
  <LI>a shell script called <TT>`config.status'</TT> that, when run, will 
  recreate the files listed above (see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC82">Recreating 
  a Configuration</A>); 
  <LI>a shell script called <TT>`config.cache'</TT> that saves the results of 
  running many of the tests (see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC57">Cache 
  Files</A>); 
  <LI>a file called <TT>`config.log'</TT> containing any messages produced by 
  compilers, to help debugging if <CODE>configure</CODE> makes a mistake. 
</LI></UL>
<P>To create a <CODE>configure</CODE> script with Autoconf, you need to write an 
Autoconf input file <TT>`configure.in'</TT> and run <CODE>autoconf</CODE> on it. 
If you write your own feature tests to supplement those that come with Autoconf, 
you might also write files called <TT>`aclocal.m4'</TT> and 
<TT>`acsite.m4'</TT>. If you use a C header file to contain <CODE>#define</CODE> 
directives, you might also write <TT>`acconfig.h'</TT>, and you will distribute 
the Autoconf-generated file <TT>`config.h.in'</TT> with the package. </P>
<P>Here is a diagram showing how the files that can be used in configuration are 
produced. Programs that are executed are suffixed by <SAMP>`*'</SAMP>. Optional 
files are enclosed in square brackets (<SAMP>`[]'</SAMP>). <CODE>autoconf</CODE> 
and <CODE>autoheader</CODE> also read the installed Autoconf macro files (by 
reading <TT>`autoconf.m4'</TT>). </P>
<P>Files used in preparing a software package for distribution: <PRE>your source files --&gt; [autoscan*] --&gt; [configure.scan] --&gt; configure.in

configure.in --.   .------&gt; autoconf* -----&gt; configure
               +---+
[aclocal.m4] --+   `---.
[acsite.m4] ---'       |
                       +--&gt; [autoheader*] -&gt; [config.h.in]
[acconfig.h] ----.     |
                 +-----'
[config.h.top] --+
[config.h.bot] --'

Makefile.in -------------------------------&gt; Makefile.in
</PRE>
<P>Files used in configuring a software package: <PRE>                       .-------------&gt; config.cache
configure* ------------+-------------&gt; config.log
                       |
[config.h.in] -.       v            .-&gt; [config.h] -.
               +--&gt; config.status* -+               +--&gt; make*
Makefile.in ---'                    `-&gt; Makefile ---'
</PRE>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC3" 
name=SEC3>Writing <TT>`configure.in'</TT></A></H2>
<P>To produce a <CODE>configure</CODE> script for a software package, create a 
file called <TT>`configure.in'</TT> that contains invocations of the Autoconf 
macros that test the system features your package needs or can use. Autoconf 
macros already exist to check for many features; see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC21">Existing 
Tests</A>, for their descriptions. For most other features, you can use Autoconf 
template macros to produce custom checks; see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC40">Writing 
Tests</A>, for information about them. For especially tricky or specialized 
features, <TT>`configure.in'</TT> might need to contain some hand-crafted shell 
commands. The <CODE>autoscan</CODE> program can give you a good start in writing 
<TT>`configure.in'</TT> (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC4">Using 
<CODE>autoscan</CODE> to Create <TT>`configure.in'</TT></A>, for more 
information). </P>
<P>The order in which <TT>`configure.in'</TT> calls the Autoconf macros is not 
important, with a few exceptions. Every <TT>`configure.in'</TT> must contain a 
call to <CODE>AC_INIT</CODE> before the checks, and a call to 
<CODE>AC_OUTPUT</CODE> at the end (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC10">Creating 
Output Files</A>). Additionally, some macros rely on other macros having been 
called first, because they check previously set values of some variables to 
decide what to do. These macros are noted in the individual descriptions (see 
section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC21">Existing 
Tests</A>), and they also warn you when creating <CODE>configure</CODE> if they 
are called out of order. </P>
<P>To encourage consistency, here is a suggested order for calling the Autoconf 
macros. Generally speaking, the things near the end of this list could depend on 
things earlier in it. For example, library functions could be affected by 
typedefs and libraries. </P><PRE><CODE>AC_INIT(<VAR>file</VAR>)</CODE>
checks for programs
checks for libraries
checks for header files
checks for typedefs
checks for structures
checks for compiler characteristics
checks for library functions
checks for system services
<CODE>AC_OUTPUT([<VAR>file...</VAR>])</CODE>
</PRE>
<P>It is best to put each macro call on its own line in <TT>`configure.in'</TT>. 
Most of the macros don't add extra newlines; they rely on the newline after the 
macro call to terminate the commands. This approach makes the generated 
<CODE>configure</CODE> script a little easier to read by not inserting lots of 
blank lines. It is generally safe to set shell variables on the same line as a 
macro call, because the shell allows assignments without intervening newlines. 
</P>
<P>When calling macros that take arguments, there must not be any blank space 
between the macro name and the open parenthesis. Arguments can be more than one 
line long if they are enclosed within the <CODE>m4</CODE> quote characters 
<SAMP>`['</SAMP> and <SAMP>`]'</SAMP>. If you have a long line such as a list of 
file names, you can generally use a backslash at the end of a line to continue 
it logically on the next line (this is implemented by the shell, not by anything 
special that Autoconf does). </P>
<P>Some macros handle two cases: what to do if the given condition is met, and 
what to do if the condition is not met. In some places you might want to do 
something if a condition is true but do nothing if it's false, or vice versa. To 
omit the true case, pass an empty value for the <VAR>action-if-found</VAR> 
argument to the macro. To omit the false case, omit the 
<VAR>action-if-not-found</VAR> argument to the macro, including the comma before 
it. </P>
<P>You can include comments in <TT>`configure.in'</TT> files by starting them 
with the <CODE>m4</CODE> builtin macro <CODE>dnl</CODE>, which discards text up 
through the next newline. These comments do not appear in the generated 
<CODE>configure</CODE> scripts. For example, it is helpful to begin 
<TT>`configure.in'</TT> files with a line like this: </P><PRE>dnl Process this file with autoconf to produce a configure script.
</PRE>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC4" 
name=SEC4>Using <CODE>autoscan</CODE> to Create <TT>`configure.in'</TT></A></H2>
<P>The <CODE>autoscan</CODE> program can help you create a 
<TT>`configure.in'</TT> file for a software package. <CODE>autoscan</CODE> 
examines source files in the directory tree rooted at a directory given as a 
command line argument, or the current directory if none is given. It searches 
the source files for common portability problems and creates a file 
<TT>`configure.scan'</TT> which is a preliminary <TT>`configure.in'</TT> for 
that package. </P>
<P>You should manually examine <TT>`configure.scan'</TT> before renaming it to 
<TT>`configure.in'</TT>; it will probably need some adjustments. Occasionally 
<CODE>autoscan</CODE> outputs a macro in the wrong order relative to another 
macro, so that <CODE>autoconf</CODE> produces a warning; you need to move such 
macros manually. Also, if you want the package to use a configuration header 
file, you must add a call to <CODE>AC_CONFIG_HEADER</CODE> (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC15">Configuration 
Header Files</A>). You might also have to change or add some <CODE>#if</CODE> 
directives to your program in order to make it work with Autoconf (see section 
<A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC5">Using 
<CODE>ifnames</CODE> to List Conditionals</A>, for information about a program 
that can help with that job). </P>
<P><CODE>autoscan</CODE> uses several data files, which are installed along with 
the distributed Autoconf macro files, to determine which macros to output when 
it finds particular symbols in a package's source files. These files all have 
the same format. Each line consists of a symbol, whitespace, and the Autoconf 
macro to output if that symbol is encountered. Lines starting with 
<SAMP>`#'</SAMP> are comments. </P>
<P><CODE>autoscan</CODE> is only installed if you already have Perl installed. 
<CODE>autoscan</CODE> accepts the following options: </P>
<DL compact>
  <DT><CODE>--help</CODE> 
  <DD>Print a summary of the command line options and exit. 
  <DT><CODE>--macrodir=<VAR>dir</VAR></CODE> 
  <DD><A name=IDX1></A>Look for the data files in directory <VAR>dir</VAR> 
  instead of the default installation directory. You can also set the 
  <CODE>AC_MACRODIR</CODE> environment variable to a directory; this option 
  overrides the environment variable. 
  <DT><CODE>--verbose</CODE> 
  <DD>Print the names of the files it examines and the potentially interesting 
  symbols it finds in them. This output can be voluminous. 
  <DT><CODE>--version</CODE> 
  <DD>Print the version number of Autoconf and exit. </DD></DL>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC5" 
name=SEC5>Using <CODE>ifnames</CODE> to List Conditionals</A></H2>
<P><CODE>ifnames</CODE> can help when writing a <TT>`configure.in'</TT> for a 
software package. It prints the identifiers that the package already uses in C 
preprocessor conditionals. If a package has already been set up to have some 
portability, this program can help you figure out what its 
<CODE>configure</CODE> needs to check for. It may help fill in some gaps in a 
<TT>`configure.in'</TT> generated by <CODE>autoscan</CODE> (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC4">Using 
<CODE>autoscan</CODE> to Create <TT>`configure.in'</TT></A>). </P>
<P><CODE>ifnames</CODE> scans all of the C source files named on the command 
line (or the standard input, if none are given) and writes to the standard 
output a sorted list of all the identifiers that appear in those files in 
<CODE>#if</CODE>, <CODE>#elif</CODE>, <CODE>#ifdef</CODE>, or 
<CODE>#ifndef</CODE> directives. It prints each identifier on a line, followed 
by a space-separated list of the files in which that identifier occurs. </P>
<P><CODE>ifnames</CODE> accepts the following options: </P>
<DL compact>
  <DT><CODE>--help</CODE> 
  <DD>
  <DT><CODE>-h</CODE> 
  <DD>Print a summary of the command line options and exit. 
  <DT><CODE>--macrodir=<VAR>dir</VAR></CODE> 
  <DD>
  <DT><CODE>-m <VAR>dir</VAR></CODE> 
  <DD><A name=IDX2></A>Look for the Autoconf macro files in directory 
  <VAR>dir</VAR> instead of the default installation directory. Only used to get 
  the version number. You can also set the <CODE>AC_MACRODIR</CODE> environment 
  variable to a directory; this option overrides the environment variable. 
  <DT><CODE>--version</CODE> 
  <DD>Print the version number of Autoconf and exit. </DD></DL>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC6" 
name=SEC6>Using <CODE>autoconf</CODE> to Create <CODE>configure</CODE></A></H2>
<P>To create <CODE>configure</CODE> from <TT>`configure.in'</TT>, run the 
<CODE>autoconf</CODE> program with no arguments. <CODE>autoconf</CODE> processes 
<TT>`configure.in'</TT> with the <CODE>m4</CODE> macro processor, using the 
Autoconf macros. If you give <CODE>autoconf</CODE> an argument, it reads that 
file instead of <TT>`configure.in'</TT> and writes the configuration script to 
the standard output instead of to <CODE>configure</CODE>. If you give 
<CODE>autoconf</CODE> the argument <SAMP>`-'</SAMP>, it reads the standard input 
instead of <TT>`configure.in'</TT> and writes the configuration script on the 
standard output. </P>
<P>The Autoconf macros are defined in several files. Some of the files are 
distributed with Autoconf; <CODE>autoconf</CODE> reads them first. Then it looks 
for the optional file <TT>`acsite.m4'</TT> in the directory that contains the 
distributed Autoconf macro files, and for the optional file 
<TT>`aclocal.m4'</TT> in the current directory. Those files can contain your 
site's or the package's own Autoconf macro definitions (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC59">Writing 
Macros</A>, for more information). If a macro is defined in more than one of the 
files that <CODE>autoconf</CODE> reads, the last definition it reads overrides 
the earlier ones. </P>
<P><CODE>autoconf</CODE> accepts the following options: </P>
<DL compact>
  <DT><CODE>--help</CODE> 
  <DD>
  <DT><CODE>-h</CODE> 
  <DD>Print a summary of the command line options and exit. 
  <DT><CODE>--localdir=<VAR>dir</VAR></CODE> 
  <DD>
  <DT><CODE>-l <VAR>dir</VAR></CODE> 
  <DD>Look for the package file <TT>`aclocal.m4'</TT> in directory 
  <VAR>dir</VAR> instead of in the current directory. 
  <DT><CODE>--macrodir=<VAR>dir</VAR></CODE> 
  <DD>
  <DT><CODE>-m <VAR>dir</VAR></CODE> 
  <DD><A name=IDX3></A>Look for the installed macro files in directory 
  <VAR>dir</VAR>. You can also set the <CODE>AC_MACRODIR</CODE> environment 
  variable to a directory; this option overrides the environment variable. 
  <DT><CODE>--version</CODE> 
  <DD>Print the version number of Autoconf and exit. </DD></DL>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC7" 
name=SEC7>Using <CODE>autoreconf</CODE> to Update <CODE>configure</CODE> 
Scripts</A></H2>
<P>If you have a lot of Autoconf-generated <CODE>configure</CODE> scripts, the 
<CODE>autoreconf</CODE> program can save you some work. It runs 
<CODE>autoconf</CODE> (and <CODE>autoheader</CODE>, where appropriate) 
repeatedly to remake the Autoconf <CODE>configure</CODE> scripts and 
configuration header templates in the directory tree rooted at the current 
directory. By default, it only remakes those files that are older than their 
<TT>`configure.in'</TT> or (if present) <TT>`aclocal.m4'</TT>. Since 
<CODE>autoheader</CODE> does not change the timestamp of its output file if the 
file wouldn't be changing, this is not necessarily the minimum amount of work. 
If you install a new version of Autoconf, you can make <CODE>autoreconf</CODE> 
remake <EM>all</EM> of the files by giving it the <SAMP>`--force'</SAMP> option. 
</P>
<P>If you give <CODE>autoreconf</CODE> the 
<SAMP>`--macrodir=<VAR>dir</VAR>'</SAMP> or 
<SAMP>`--localdir=<VAR>dir</VAR>'</SAMP> options, it passes them down to 
<CODE>autoconf</CODE> and <CODE>autoheader</CODE> (with relative paths adjusted 
properly). </P>
<P><CODE>autoreconf</CODE> does not support having, in the same directory tree, 
both directories that are parts of a larger package (sharing 
<TT>`aclocal.m4'</TT> and <TT>`acconfig.h'</TT>), and directories that are 
independent packages (each with their own <TT>`aclocal.m4'</TT> and 
<TT>`acconfig.h'</TT>). It assumes that they are all part of the same package, 
if you use <SAMP>`--localdir'</SAMP>, or that each directory is a separate 
package, if you don't use it. This restriction may be removed in the future. 
</P>
<P>See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC14">Automatic 
Remaking</A>, for <TT>`Makefile'</TT> rules to automatically remake 
<CODE>configure</CODE> scripts when their source files change. That method 
handles the timestamps of configuration header templates properly, but does not 
pass <SAMP>`--macrodir=<VAR>dir</VAR>'</SAMP> or 
<SAMP>`--localdir=<VAR>dir</VAR>'</SAMP>. </P>
<P><CODE>autoreconf</CODE> accepts the following options: </P>
<DL compact>
  <DT><CODE>--help</CODE> 
  <DD>
  <DT><CODE>-h</CODE> 
  <DD>Print a summary of the command line options and exit. 
  <DT><CODE>--force</CODE> 
  <DD>
  <DT><CODE>-f</CODE> 
  <DD>Remake even <TT>`configure'</TT> scripts and configuration headers that 
  are newer than their input files (<TT>`configure.in'</TT> and, if present, 
  <TT>`aclocal.m4'</TT>). 
  <DT><CODE>--localdir=<VAR>dir</VAR></CODE> 
  <DD>
  <DT><CODE>-l <VAR>dir</VAR></CODE> 
  <DD>Have <CODE>autoconf</CODE> and <CODE>autoheader</CODE> look for the 
  package files <TT>`aclocal.m4'</TT> and (<CODE>autoheader</CODE> only) 
  <TT>`acconfig.h'</TT> (but not <TT>`<VAR>file</VAR>.top'</TT> and 
  <TT>`<VAR>file</VAR>.bot'</TT>) in directory <VAR>dir</VAR> instead of in the 
  directory containing each <TT>`configure.in'</TT>. 
  <DT><CODE>--macrodir=<VAR>dir</VAR></CODE> 
  <DD>
  <DT><CODE>-m <VAR>dir</VAR></CODE> 
  <DD><A name=IDX4></A>Look for the Autoconf macro files in directory 
  <VAR>dir</VAR> instead of the default installation directory. You can also set 
  the <CODE>AC_MACRODIR</CODE> environment variable to a directory; this option 
  overrides the environment variable. 
  <DT><CODE>--verbose</CODE> 
  <DD>Print the name of each directory where <CODE>autoreconf</CODE> runs 
  <CODE>autoconf</CODE> (and <CODE>autoheader</CODE>, if appropriate). 
  <DT><CODE>--version</CODE> 
  <DD>Print the version number of Autoconf and exit. </DD></DL>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC8" 
name=SEC8>Initialization and Output Files</A></H1>
<P>Autoconf-generated <CODE>configure</CODE> scripts need some information about 
how to initialize, such as how to find the package's source files; and about the 
output files to produce. The following sections describe initialization and 
creating output files. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC9" 
name=SEC9>Finding <CODE>configure</CODE> Input</A></H2>
<P>Every <CODE>configure</CODE> script must call <CODE>AC_INIT</CODE> before 
doing anything else. The only other required macro is <CODE>AC_OUTPUT</CODE> 
(see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC10">Creating 
Output Files</A>). </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_INIT</B> <I>(<VAR>unique-file-in-source-dir</VAR>)</I> 

  <DD><A name=IDX5></A><A name=IDX6></A>Process any command-line arguments and 
  find the source code directory. <VAR>unique-file-in-source-dir</VAR> is some 
  file that is in the package's source directory; <CODE>configure</CODE> checks 
  for this file's existence to make sure that the directory that it is told 
  contains the source code in fact does. Occasionally people accidentally 
  specify the wrong directory with <SAMP>`--srcdir'</SAMP>; this is a safety 
  check. See section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC81">Running 
  <CODE>configure</CODE> Scripts</A>, for more information. </DD></DL>
<P></P>
<P>Packages that do manual configuration or use the <CODE>install</CODE> program 
might need to tell <CODE>configure</CODE> where to find some other shell scripts 
by calling <CODE>AC_CONFIG_AUX_DIR</CODE>, though the default places it looks 
are correct for most cases. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CONFIG_AUX_DIR(<VAR>dir</VAR>)</B> 
  <DD><A name=IDX7></A><A name=IDX8></A>Use the <TT>`install-sh'</TT>, 
  <TT>`config.sub'</TT>, <TT>`config.guess'</TT>, and Cygnus 
  <CODE>configure</CODE> scripts that are in directory <VAR>dir</VAR>. These are 
  auxiliary files used in configuration. <VAR>dir</VAR> can be either absolute 
  or relative to <TT>`<VAR>srcdir</VAR>'</TT>. The default is 
  <TT>`<VAR>srcdir</VAR>'</TT> or <TT>`<VAR>srcdir</VAR>/..'</TT> or 
  <TT>`<VAR>srcdir</VAR>/../..'</TT>, whichever is the first that contains 
  <TT>`install-sh'</TT>. The other files are not checked for, so that using 
  <CODE>AC_PROG_INSTALL</CODE> does not automatically require distributing the 
  other auxiliary files. It checks for <TT>`install.sh'</TT> also, but that name 
  is obsolete because some <CODE>make</CODE> programs have a rule that creates 
  <TT>`install'</TT> from it if there is no <TT>`Makefile'</TT>. </DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC10" 
name=SEC10>Creating Output Files</A></H2>
<P>Every Autoconf-generated <CODE>configure</CODE> script must finish by calling 
<CODE>AC_OUTPUT</CODE>. It is the macro that creates the <TT>`Makefile'</TT>s 
and optional other files resulting from configuration. The only other required 
macro is <CODE>AC_INIT</CODE> (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC9">Finding 
<CODE>configure</CODE> Input</A>). </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_OUTPUT</B> <I>([<VAR>file</VAR>... [, 
  <VAR>extra-cmds</VAR> [, <VAR>init-cmds</VAR>]]])</I> 
  <DD><A name=IDX9></A><A name=IDX10></A>Create output files. Call this macro 
  once, at the end of <TT>`configure.in'</TT>. The <VAR>file</VAR>... argument 
  is a whitespace-separated list of output files; it may be empty. This macro 
  creates each file <TT>`<VAR>file</VAR>'</TT> by copying an input file (by 
  default named <TT>`<VAR>file</VAR>.in'</TT>), substituting the output variable 
  values. See section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC11">Substitutions 
  in Makefiles</A>, for more information on using output variables. See section 
  <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC54">Setting 
  Output Variables</A>, for more information on creating them. This macro 
  creates the directory that the file is in if it doesn't exist (but not the 
  parents of that directory). Usually, <TT>`Makefile'</TT>s are created this 
  way, but other files, such as <TT>`.gdbinit'</TT>, can be specified as well. 
  <P></P>
  <P>If <CODE>AC_CONFIG_HEADER</CODE>, <CODE>AC_LINK_FILES</CODE>, or 
  <CODE>AC_CONFIG_SUBDIRS</CODE> has been called, this macro also creates the 
  files named as their arguments. </P>
  <P>A typical call to <CODE>AC_OUTPUT</CODE> looks like this: <PRE>AC_OUTPUT(Makefile src/Makefile man/Makefile X/Imakefile)
</PRE>
  <P>You can override an input file name by appending to <VAR>file</VAR> a 
  colon-separated list of input files. Examples: <PRE>AC_OUTPUT(Makefile:templates/top.mk lib/Makefile:templates/lib.mk)
AC_OUTPUT(Makefile:templates/vars.mk:Makefile.in:templates/rules.mk)
</PRE>
  <P>Doing this allows you to keep your file names acceptable to MS-DOS, or to 
  prepend and/or append boilerplate to the file. </P>
  <P>If you pass <VAR>extra-cmds</VAR>, those commands will be inserted into 
  <TT>`config.status'</TT> to be run after all its other processing. If 
  <VAR>init-cmds</VAR> are given, they are inserted just before 
  <VAR>extra-cmds</VAR>, with shell variable, command, and backslash 
  substitutions performed on them in <CODE>configure</CODE>. You can use 
  <VAR>init-cmds</VAR> to pass variables from <CODE>configure</CODE> to the 
  <VAR>extra-cmds</VAR>. If <CODE>AC_OUTPUT_COMMANDS</CODE> has been called, the 
  commands given to it are run just before the commands passed to this macro. 
  </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_OUTPUT_COMMANDS</B> <I>(<VAR>extra-cmds</VAR> [, 
  <VAR>init-cmds</VAR>])</I> 
  <DD><A name=IDX11></A>Specify additional shell commands to run at the end of 
  <TT>`config.status'</TT>, and shell commands to initialize any variables from 
  <CODE>configure</CODE>. This macro may be called multiple times. Here is an 
  unrealistic example: 
  <P></P><PRE>fubar=27
AC_OUTPUT_COMMANDS([echo this is extra $fubar, and so on.], fubar=$fubar)
AC_OUTPUT_COMMANDS([echo this is another, extra, bit], [echo init bit])
</PRE></DD></DL>
<P>If you run <CODE>make</CODE> on subdirectories, you should run it using the 
<CODE>make</CODE> variable <CODE>MAKE</CODE>. Most versions of <CODE>make</CODE> 
set <CODE>MAKE</CODE> to the name of the <CODE>make</CODE> program plus any 
options it was given. (But many do not include in it the values of any variables 
set on the command line, so those are not passed on automatically.) Some old 
versions of <CODE>make</CODE> do not set this variable. The following macro 
allows you to use it even with those versions. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROG_MAKE_SET</B> 
  <DD><A name=IDX12></A><A name=IDX13></A><A name=IDX14></A>If <CODE>make</CODE> 
  predefines the variable <CODE>MAKE</CODE>, define output variable 
  <CODE>SET_MAKE</CODE> to be empty. Otherwise, define <CODE>SET_MAKE</CODE> to 
  contain <SAMP>`MAKE=make'</SAMP>. Calls <CODE>AC_SUBST</CODE> for 
  <CODE>SET_MAKE</CODE>. </DD></DL>
<P></P>
<P>To use this macro, place a line like this in each <TT>`Makefile.in'</TT> that 
runs <CODE>MAKE</CODE> on other directories: </P><PRE>@SET_MAKE@
</PRE>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC11" 
name=SEC11>Substitutions in Makefiles</A></H2>
<P>Each subdirectory in a distribution that contains something to be compiled or 
installed should come with a file <TT>`Makefile.in'</TT>, from which 
<CODE>configure</CODE> will create a <TT>`Makefile'</TT> in that directory. To 
create a <TT>`Makefile'</TT>, <CODE>configure</CODE> performs a simple variable 
substitution, replacing occurrences of <SAMP>`@<VAR>variable</VAR>@'</SAMP> in 
<TT>`Makefile.in'</TT> with the value that <CODE>configure</CODE> has determined 
for that variable. Variables that are substituted into output files in this way 
are called <EM>output variables</EM>. They are ordinary shell variables that are 
set in <CODE>configure</CODE>. To make <CODE>configure</CODE> substitute a 
particular variable into the output files, the macro <CODE>AC_SUBST</CODE> must 
be called with that variable name as an argument. Any occurrences of 
<SAMP>`@<VAR>variable</VAR>@'</SAMP> for other variables are left unchanged. See 
section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC54">Setting 
Output Variables</A>, for more information on creating output variables with 
<CODE>AC_SUBST</CODE>. </P>
<P>A software package that uses a <CODE>configure</CODE> script should be 
distributed with a file <TT>`Makefile.in'</TT>, but no <TT>`Makefile'</TT>; that 
way, the user has to properly configure the package for the local system before 
compiling it. </P>
<P>See section `Makefile Conventions' in <CITE>The GNU Coding Standards</CITE>, 
for more information on what to put in <TT>`Makefile'</TT>s. </P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC12" 
name=SEC12>Preset Output Variables</A></H3>
<P>Some output variables are preset by the Autoconf macros. Some of the Autoconf 
macros set additional output variables, which are mentioned in the descriptions 
for those macros. See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC103">Output 
Variable Index</A>, for a complete list of output variables. Here is what each 
of the preset ones contains. See section `Variables for Installation 
Directories' in <CITE>The GNU Coding Standards</CITE>, for more information 
about the variables with names that end in <SAMP>`dir'</SAMP>. </P>
<P>
<DL>
  <DT><U>Variable:</U> <B>bindir</B> 
  <DD><A name=IDX15></A><A name=IDX16></A>The directory for installing 
  executables that users run. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>configure_input</B> 
  <DD><A name=IDX17></A><A name=IDX18></A>A comment saying that the file was 
  generated automatically by <CODE>configure</CODE> and giving the name of the 
  input file. <CODE>AC_OUTPUT</CODE> adds a comment line containing this 
  variable to the top of every <TT>`Makefile'</TT> it creates. For other files, 
  you should reference this variable in a comment at the top of each input file. 
  For example, an input shell script should begin like this: 
  <P></P><PRE>#! /bin/sh
# @configure_input@
</PRE>
  <P>The presence of that line also reminds people editing the file that it 
  needs to be processed by <CODE>configure</CODE> in order to be used. 
</P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>datadir</B> 
  <DD><A name=IDX19></A><A name=IDX20></A>The directory for installing read-only 
  architecture-independent data. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>exec_prefix</B> 
  <DD><A name=IDX21></A><A name=IDX22></A>The installation prefix for 
  architecture-dependent files. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>includedir</B> 
  <DD><A name=IDX23></A><A name=IDX24></A>The directory for installing C header 
  files. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>infodir</B> 
  <DD><A name=IDX25></A><A name=IDX26></A>The directory for installing 
  documentation in Info format. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>libdir</B> 
  <DD><A name=IDX27></A><A name=IDX28></A>The directory for installing object 
  code libraries. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>libexecdir</B> 
  <DD><A name=IDX29></A><A name=IDX30></A>The directory for installing 
  executables that other programs run. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>localstatedir</B> 
  <DD><A name=IDX31></A><A name=IDX32></A>The directory for installing 
  modifiable single-machine data. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>mandir</B> 
  <DD><A name=IDX33></A><A name=IDX34></A>The top-level directory for installing 
  documentation in man format. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>oldincludedir</B> 
  <DD><A name=IDX35></A><A name=IDX36></A>The directory for installing C header 
  files for non-gcc compilers. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>prefix</B> 
  <DD><A name=IDX37></A><A name=IDX38></A>The installation prefix for 
  architecture-independent files. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>sbindir</B> 
  <DD><A name=IDX39></A><A name=IDX40></A>The directory for installing 
  executables that system administrators run. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>sharedstatedir</B> 
  <DD><A name=IDX41></A><A name=IDX42></A>The directory for installing 
  modifiable architecture-independent data. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>srcdir</B> 
  <DD><A name=IDX43></A><A name=IDX44></A>The directory that contains the source 
  code for that <TT>`Makefile'</TT>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>sysconfdir</B> 
  <DD><A name=IDX45></A><A name=IDX46></A>The directory for installing read-only 
  single-machine data. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>top_srcdir</B> 
  <DD><A name=IDX47></A><A name=IDX48></A>The top-level source code directory 
  for the package. In the top-level directory, this is the same as 
  <CODE>srcdir</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>CFLAGS</B> 
  <DD><A name=IDX49></A><A name=IDX50></A>Debugging and optimization options for 
  the C compiler. If it is not set in the environment when 
  <CODE>configure</CODE> runs, the default value is set when you call 
  <CODE>AC_PROG_CC</CODE> (or empty if you don't). <CODE>configure</CODE> uses 
  this variable when compiling programs to test for C features. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>CPPFLAGS</B> 
  <DD><A name=IDX51></A><A name=IDX52></A>Header file search directory 
  (<SAMP>`-I<VAR>dir</VAR>'</SAMP>) and any other miscellaneous options for the 
  C preprocessor and compiler. If it is not set in the environment when 
  <CODE>configure</CODE> runs, the default value is empty. 
  <CODE>configure</CODE> uses this variable when compiling or preprocessing 
  programs to test for C features. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>CXXFLAGS</B> 
  <DD><A name=IDX53></A><A name=IDX54></A>Debugging and optimization options for 
  the C++ compiler. If it is not set in the environment when 
  <CODE>configure</CODE> runs, the default value is set when you call 
  <CODE>AC_PROG_CXX</CODE> (or empty if you don't). <CODE>configure</CODE> uses 
  this variable when compiling programs to test for C++ features. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>FFLAGS</B> 
  <DD><A name=IDX55></A><A name=IDX56></A>Debugging and optimization options for 
  the Fortran 77 compiler. If it is not set in the environment when 
  <CODE>configure</CODE> runs, the default value is set when you call 
  <CODE>AC_PROG_F77</CODE> (or empty if you don't). <CODE>configure</CODE> uses 
  this variable when compiling programs to test for Fortran 77 features. 
</DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>DEFS</B> 
  <DD><A name=IDX57></A><A name=IDX58></A><SAMP>`-D'</SAMP> options to pass to 
  the C compiler. If <CODE>AC_CONFIG_HEADER</CODE> is called, 
  <CODE>configure</CODE> replaces <SAMP>`@DEFS@'</SAMP> with 
  <SAMP>`-DHAVE_CONFIG_H'</SAMP> instead (see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC15">Configuration 
  Header Files</A>). This variable is not defined while <CODE>configure</CODE> 
  is performing its tests, only when creating the output files. See section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC54">Setting 
  Output Variables</A>, for how to check the results of previous tests. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>LDFLAGS</B> 
  <DD><A name=IDX59></A><A name=IDX60></A>Stripping (<SAMP>`-s'</SAMP>) and any 
  other miscellaneous options for the linker. If it is not set in the 
  environment when <CODE>configure</CODE> runs, the default value is empty. 
  <CODE>configure</CODE> uses this variable when linking programs to test for C 
  features. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>LIBS</B> 
  <DD><A name=IDX61></A><A name=IDX62></A><SAMP>`-l'</SAMP> and 
  <SAMP>`-L'</SAMP> options to pass to the linker. </DD></DL>
<P></P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC13" 
name=SEC13>Build Directories</A></H3>
<P>You can support compiling a software package for several architectures 
simultaneously from the same copy of the source code. The object files for each 
architecture are kept in their own directory. </P>
<P>To support doing this, <CODE>make</CODE> uses the <CODE>VPATH</CODE> variable 
to find the files that are in the source directory. GNU <CODE>make</CODE> and 
most other recent <CODE>make</CODE> programs can do this. Older 
<CODE>make</CODE> programs do not support <CODE>VPATH</CODE>; when using them, 
the source code must be in the same directory as the object files. </P>
<P>To support <CODE>VPATH</CODE>, each <TT>`Makefile.in'</TT> should contain two 
lines that look like: </P><PRE>srcdir = @srcdir@
VPATH = @srcdir@
</PRE>
<P>Do not set <CODE>VPATH</CODE> to the value of another variable, for example 
<SAMP>`VPATH = $(srcdir)'</SAMP>, because some versions of <CODE>make</CODE> do 
not do variable substitutions on the value of <CODE>VPATH</CODE>. </P>
<P><CODE>configure</CODE> substitutes in the correct value for 
<CODE>srcdir</CODE> when it produces <TT>`Makefile'</TT>. </P>
<P>Do not use the <CODE>make</CODE> variable <CODE>$&lt;</CODE>, which expands 
to the pathname of the file in the source directory (found with 
<CODE>VPATH</CODE>), except in implicit rules. (An implicit rule is one such as 
<SAMP>`.c.o'</SAMP>, which tells how to create a <TT>`.o'</TT> file from a 
<TT>`.c'</TT> file.) Some versions of <CODE>make</CODE> do not set 
<CODE>$&lt;</CODE> in explicit rules; they expand it to an empty value. </P>
<P>Instead, <TT>`Makefile'</TT> command lines should always refer to source 
files by prefixing them with <SAMP>`$(srcdir)/'</SAMP>. For example: </P><PRE>time.info: time.texinfo
        $(MAKEINFO) $(srcdir)/time.texinfo
</PRE>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC14" 
name=SEC14>Automatic Remaking</A></H3>
<P>You can put rules like the following in the top-level <TT>`Makefile.in'</TT> 
for a package to automatically update the configuration information when you 
change the configuration files. This example includes all of the optional files, 
such as <TT>`aclocal.m4'</TT> and those related to configuration header files. 
Omit from the <TT>`Makefile.in'</TT> rules any of these files that your package 
does not use. </P>
<P>The <SAMP>`${srcdir}/'</SAMP> prefix is included because of limitations in 
the <CODE>VPATH</CODE> mechanism. </P>
<P>The <TT>`stamp-'</TT> files are necessary because the timestamps of 
<TT>`config.h.in'</TT> and <TT>`config.h'</TT> will not be changed if remaking 
them does not change their contents. This feature avoids unnecessary 
recompilation. You should include the file <TT>`stamp-h.in'</TT> your package's 
distribution, so <CODE>make</CODE> will consider <TT>`config.h.in'</TT> up to 
date. On some old BSD systems, <CODE>touch</CODE> or any command that results in 
an empty file does not update the timestamps, so use a command like 
<CODE>echo</CODE> as a workaround. </P><PRE>${srcdir}/configure: configure.in aclocal.m4
        cd ${srcdir} &amp;&amp; autoconf

# autoheader might not change config.h.in, so touch a stamp file.
${srcdir}/config.h.in: stamp-h.in
${srcdir}/stamp-h.in: configure.in aclocal.m4 acconfig.h \
    config.h.top config.h.bot
        cd ${srcdir} &amp;&amp; autoheader
        echo timestamp &gt; ${srcdir}/stamp-h.in

config.h: stamp-h
stamp-h: config.h.in config.status
        ./config.status

Makefile: Makefile.in config.status
        ./config.status

config.status: configure
        ./config.status --recheck
</PRE>
<P>In addition, you should pass <SAMP>`echo timestamp &gt; stamp-h'</SAMP> in 
the <VAR>extra-cmds</VAR> argument to <CODE>AC_OUTPUT</CODE>, so 
<TT>`config.status'</TT> will ensure that <TT>`config.h'</TT> is considered up 
to date. See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC10">Creating 
Output Files</A>, for more information about <CODE>AC_OUTPUT</CODE>. </P>
<P>See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC82">Recreating 
a Configuration</A>, for more examples of handling configuration-related 
dependencies. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC15" 
name=SEC15>Configuration Header Files</A></H2>
<P>When a package tests more than a few C preprocessor symbols, the command 
lines to pass <SAMP>`-D'</SAMP> options to the compiler can get quite long. This 
causes two problems. One is that the <CODE>make</CODE> output is hard to 
visually scan for errors. More seriously, the command lines can exceed the 
length limits of some operating systems. As an alternative to passing 
<SAMP>`-D'</SAMP> options to the compiler, <CODE>configure</CODE> scripts can 
create a C header file containing <SAMP>`#define'</SAMP> directives. The 
<CODE>AC_CONFIG_HEADER</CODE> macro selects this kind of output. It should be 
called right after <CODE>AC_INIT</CODE>. </P>
<P>The package should <SAMP>`#include'</SAMP> the configuration header file 
before any other header files, to prevent inconsistencies in declarations (for 
example, if it redefines <CODE>const</CODE>). Use <SAMP>`#include 
&lt;config.h&gt;'</SAMP> instead of <SAMP>`#include "config.h"'</SAMP>, and pass 
the C compiler a <SAMP>`-I.'</SAMP> option (or <SAMP>`-I..'</SAMP>; whichever 
directory contains <TT>`config.h'</TT>). That way, even if the source directory 
is configured itself (perhaps to make a distribution), other build directories 
can also be configured without finding the <TT>`config.h'</TT> from the source 
directory. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CONFIG_HEADER</B> <I>(<VAR>header-to-create</VAR> 
  ...)</I> 
  <DD><A name=IDX63></A><A name=IDX64></A><A name=IDX65></A>Make 
  <CODE>AC_OUTPUT</CODE> create the file(s) in the whitespace-separated list 
  <VAR>header-to-create</VAR> containing C preprocessor <CODE>#define</CODE> 
  statements, and replace <SAMP>`@DEFS@'</SAMP> in generated files with 
  <SAMP>`-DHAVE_CONFIG_H'</SAMP> instead of the value of <CODE>DEFS</CODE>. The 
  usual name for <VAR>header-to-create</VAR> is <TT>`config.h'</TT>. 
  <P></P>
  <P>If <VAR>header-to-create</VAR> already exists and its contents are 
  identical to what <CODE>AC_OUTPUT</CODE> would put in it, it is left alone. 
  Doing this allows some changes in configuration without needlessly causing 
  object files that depend on the header file to be recompiled. </P>
  <P>Usually the input file is named <TT>`<VAR>header-to-create</VAR>.in'</TT>; 
  however, you can override the input file name by appending to 
  <VAR>header-to-create</VAR>, a colon-separated list of input files. Examples: <PRE>AC_CONFIG_HEADER(defines.h:defines.hin)
AC_CONFIG_HEADER(defines.h:defs.pre:defines.h.in:defs.post)
</PRE>
  <P>Doing this allows you to keep your file names acceptable to MS-DOS, or to 
  prepend and/or append boilerplate to the file. </P></DD></DL>
<P></P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC16" 
name=SEC16>Configuration Header Templates</A></H3>
<P>Your distribution should contain a template file that looks as you want the 
final header file to look, including comments, with default values in the 
<CODE>#define</CODE> statements. For example, suppose your 
<TT>`configure.in'</TT> makes these calls: </P><PRE>AC_CONFIG_HEADER(conf.h)
AC_CHECK_HEADERS(unistd.h)
</PRE>
<P>Then you could have code like the following in <TT>`conf.h.in'</TT>. On 
systems that have <TT>`unistd.h'</TT>, <CODE>configure</CODE> will change the 0 
to a 1. On other systems, it will leave the line unchanged. </P><PRE>/* Define as 1 if you have unistd.h.  */
#define HAVE_UNISTD_H 0
</PRE>
<P>Alternately, if your code tests for configuration options using 
<CODE>#ifdef</CODE> instead of <CODE>#if</CODE>, a default value can be to 
<CODE>#undef</CODE> the variable instead of to define it to a value. On systems 
that have <TT>`unistd.h'</TT>, <CODE>configure</CODE> will change the second 
line to read <SAMP>`#define HAVE_UNISTD_H 1'</SAMP>. On other systems, it will 
comment that line out (in case the system predefines that symbol). </P><PRE>/* Define if you have unistd.h.  */
#undef HAVE_UNISTD_H
</PRE>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC17" 
name=SEC17>Using <CODE>autoheader</CODE> to Create 
<TT>`config.h.in'</TT></A></H3>
<P>The <CODE>autoheader</CODE> program can create a template file of C 
<SAMP>`#define'</SAMP> statements for <CODE>configure</CODE> to use. If 
<TT>`configure.in'</TT> invokes <CODE>AC_CONFIG_HEADER(<VAR>file</VAR>)</CODE>, 
<CODE>autoheader</CODE> creates <TT>`<VAR>file</VAR>.in'</TT>; if multiple file 
arguments are given, the first one is used. Otherwise, <CODE>autoheader</CODE> 
creates <TT>`config.h.in'</TT>. </P>
<P>If you give <CODE>autoheader</CODE> an argument, it uses that file instead of 
<TT>`configure.in'</TT> and writes the header file to the standard output 
instead of to <TT>`config.h.in'</TT>. If you give <CODE>autoheader</CODE> an 
argument of <SAMP>`-'</SAMP>, it reads the standard input instead of 
<TT>`configure.in'</TT> and writes the header file to the standard output. </P>
<P><CODE>autoheader</CODE> scans <TT>`configure.in'</TT> and figures out which C 
preprocessor symbols it might define. It copies comments and 
<CODE>#define</CODE> and <CODE>#undef</CODE> statements from a file called 
<TT>`acconfig.h'</TT>, which comes with and is installed with Autoconf. It also 
uses a file called <TT>`acconfig.h'</TT> in the current directory, if present. 
If you <CODE>AC_DEFINE</CODE> any additional symbols, you must create that file 
with entries for them. For symbols defined by <CODE>AC_CHECK_HEADERS</CODE>, 
<CODE>AC_CHECK_FUNCS</CODE>, <CODE>AC_CHECK_SIZEOF</CODE>, or 
<CODE>AC_CHECK_LIB</CODE>, <CODE>autoheader</CODE> generates comments and 
<CODE>#undef</CODE> statements itself rather than copying them from a file, 
since the possible symbols are effectively limitless. </P>
<P>The file that <CODE>autoheader</CODE> creates contains mainly 
<CODE>#define</CODE> and <CODE>#undef</CODE> statements and their accompanying 
comments. If <TT>`./acconfig.h'</TT> contains the string <SAMP>`@TOP@'</SAMP>, 
<CODE>autoheader</CODE> copies the lines before the line containing 
<SAMP>`@TOP@'</SAMP> into the top of the file that it generates. Similarly, if 
<TT>`./acconfig.h'</TT> contains the string <SAMP>`@BOTTOM@'</SAMP>, 
<CODE>autoheader</CODE> copies the lines after that line to the end of the file 
it generates. Either or both of those strings may be omitted. </P>
<P>An alternate way to produce the same effect is to create the files 
<TT>`<VAR>file</VAR>.top'</TT> (typically <TT>`config.h.top'</TT>) and/or 
<TT>`<VAR>file</VAR>.bot'</TT> in the current directory. If they exist, 
<CODE>autoheader</CODE> copies them to the beginning and end, respectively, of 
its output. Their use is discouraged because they have file names that contain 
two periods, and so can not be stored on MS-DOS; also, they are two more files 
to clutter up the directory. But if you use the 
<SAMP>`--localdir=<VAR>dir</VAR>'</SAMP> option to use an <TT>`acconfig.h'</TT> 
in another directory, they give you a way to put custom boilerplate in each 
individual <TT>`config.h.in'</TT>. </P>
<P><CODE>autoheader</CODE> accepts the following options: </P>
<DL compact>
  <DT><CODE>--help</CODE> 
  <DD>
  <DT><CODE>-h</CODE> 
  <DD>Print a summary of the command line options and exit. 
  <DT><CODE>--localdir=<VAR>dir</VAR></CODE> 
  <DD>
  <DT><CODE>-l <VAR>dir</VAR></CODE> 
  <DD>Look for the package files <TT>`aclocal.m4'</TT> and <TT>`acconfig.h'</TT> 
  (but not <TT>`<VAR>file</VAR>.top'</TT> and <TT>`<VAR>file</VAR>.bot'</TT>) in 
  directory <VAR>dir</VAR> instead of in the current directory. 
  <DT><CODE>--macrodir=<VAR>dir</VAR></CODE> 
  <DD>
  <DT><CODE>-m <VAR>dir</VAR></CODE> 
  <DD><A name=IDX66></A>Look for the installed macro files and 
  <TT>`acconfig.h'</TT> in directory <VAR>dir</VAR>. You can also set the 
  <CODE>AC_MACRODIR</CODE> environment variable to a directory; this option 
  overrides the environment variable. 
  <DT><CODE>--version</CODE> 
  <DD>Print the version number of Autoconf and exit. </DD></DL>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC18" 
name=SEC18>Configuring Other Packages in Subdirectories</A></H2>
<P>In most situations, calling <CODE>AC_OUTPUT</CODE> is sufficient to produce 
<TT>`Makefile'</TT>s in subdirectories. However, <CODE>configure</CODE> scripts 
that control more than one independent package can use 
<CODE>AC_CONFIG_SUBDIRS</CODE> to run <CODE>configure</CODE> scripts for other 
packages in subdirectories. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CONFIG_SUBDIRS</B> <I>(<VAR>dir</VAR> ...)</I> 
  <DD><A name=IDX67></A><A name=IDX68></A><A name=IDX69></A>Make 
  <CODE>AC_OUTPUT</CODE> run <CODE>configure</CODE> in each subdirectory 
  <VAR>dir</VAR> in the given whitespace-separated list. If a given 
  <VAR>dir</VAR> is not found, no error is reported, so a <CODE>configure</CODE> 
  script can configure whichever parts of a large source tree are present. If a 
  given <VAR>dir</VAR> contains <TT>`configure.in'</TT> but no 
  <CODE>configure</CODE>, the Cygnus <CODE>configure</CODE> script found by 
  <CODE>AC_CONFIG_AUXDIR</CODE> is used. 
  <P></P>
  <P>The subdirectory <CODE>configure</CODE> scripts are given the same command 
  line options that were given to this <CODE>configure</CODE> script, with minor 
  changes if needed (e.g., to adjust a relative path for the cache file or 
  source directory). This macro also sets the output variable 
  <CODE>subdirs</CODE> to the list of directories <SAMP>`<VAR>dir</VAR> 
  ...'</SAMP>. <TT>`Makefile'</TT> rules can use this variable to determine 
  which subdirectories to recurse into. This macro may be called multiple times. 
  </P></DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC19" 
name=SEC19>Default Prefix</A></H2>
<P>By default, <CODE>configure</CODE> sets the prefix for files it installs to 
<TT>`/usr/local'</TT>. The user of <CODE>configure</CODE> can select a different 
prefix using the <SAMP>`--prefix'</SAMP> and <SAMP>`--exec-prefix'</SAMP> 
options. There are two ways to change the default: when creating 
<CODE>configure</CODE>, and when running it. </P>
<P>Some software packages might want to install in a directory besides 
<TT>`/usr/local'</TT> by default. To accomplish that, use the 
<CODE>AC_PREFIX_DEFAULT</CODE> macro. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PREFIX_DEFAULT</B> <I>(<VAR>prefix</VAR>)</I> 
  <DD><A name=IDX70></A>Set the default installation prefix to <VAR>prefix</VAR> 
  instead of <TT>`/usr/local'</TT>. </DD></DL>
<P></P>
<P>It may be convenient for users to have <CODE>configure</CODE> guess the 
installation prefix from the location of a related program that they have 
already installed. If you wish to do that, you can call 
<CODE>AC_PREFIX_PROGRAM</CODE>. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PREFIX_PROGRAM</B> <I>(<VAR>program</VAR>)</I> 
  <DD><A name=IDX71></A><A name=IDX72></A>If the user did not specify an 
  installation prefix (using the <SAMP>`--prefix'</SAMP> option), guess a value 
  for it by looking for <VAR>program</VAR> in <CODE>PATH</CODE>, the way the 
  shell does. If <VAR>program</VAR> is found, set the prefix to the parent of 
  the directory containing <VAR>program</VAR>; otherwise leave the prefix 
  specified in <TT>`Makefile.in'</TT> unchanged. For example, if 
  <VAR>program</VAR> is <CODE>gcc</CODE> and the <CODE>PATH</CODE> contains 
  <TT>`/usr/local/gnu/bin/gcc'</TT>, set the prefix to 
  <TT>`/usr/local/gnu'</TT>. </DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC20" 
name=SEC20>Version Numbers in <CODE>configure</CODE></A></H2>
<P>The following macros manage version numbers for <CODE>configure</CODE> 
scripts. Using them is optional. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PREREQ</B> <I>(<VAR>version</VAR>)</I> 
  <DD><A name=IDX73></A><A name=IDX74></A>Ensure that a recent enough version of 
  Autoconf is being used. If the version of Autoconf being used to create 
  <CODE>configure</CODE> is earlier than <VAR>version</VAR>, print an error 
  message on the standard error output and do not create <CODE>configure</CODE>. 
  For example: 
  <P></P><PRE>AC_PREREQ(1.8)
</PRE>
  <P>This macro is useful if your <TT>`configure.in'</TT> relies on non-obvious 
  behavior that changed between Autoconf releases. If it merely needs recently 
  added macros, then <CODE>AC_PREREQ</CODE> is less useful, because the 
  <CODE>autoconf</CODE> program already tells the user which macros are not 
  found. The same thing happens if <TT>`configure.in'</TT> is processed by a 
  version of Autoconf older than when <CODE>AC_PREREQ</CODE> was added. 
</P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_REVISION</B> <I>(<VAR>revision-info</VAR>)</I> 
  <DD><A name=IDX75></A><A name=IDX76></A>Copy revision stamp 
  <VAR>revision-info</VAR> into the <CODE>configure</CODE> script, with any 
  dollar signs or double-quotes removed. This macro lets you put a revision 
  stamp from <TT>`configure.in'</TT> into <CODE>configure</CODE> without RCS or 
  CVS changing it when you check in <CODE>configure</CODE>. That way, you can 
  determine easily which revision of <TT>`configure.in'</TT> a particular 
  <CODE>configure</CODE> corresponds to. 
  <P></P>
  <P>It is a good idea to call this macro before <CODE>AC_INIT</CODE> so that 
  the revision number is near the top of both <TT>`configure.in'</TT> and 
  <CODE>configure</CODE>. To support doing that, the <CODE>AC_REVISION</CODE> 
  output begins with <SAMP>`#! /bin/sh'</SAMP>, like the normal start of a 
  <CODE>configure</CODE> script does. </P>
  <P>For example, this line in <TT>`configure.in'</TT>: </P><PRE>AC_REVISION($Revision: 1.30 $)dnl
</PRE>
  <P>produces this in <CODE>configure</CODE>: </P><PRE>#! /bin/sh
# From configure.in Revision: 1.30
</PRE></DD></DL>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC21" 
name=SEC21>Existing Tests</A></H1>
<P>These macros test for particular system features that packages might need or 
want to use. If you need to test for a kind of feature that none of these macros 
check for, you can probably do it by calling primitive test macros with 
appropriate arguments (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC40">Writing 
Tests</A>). </P>
<P>These tests print messages telling the user which feature they're checking 
for, and what they find. They cache their results for future 
<CODE>configure</CODE> runs (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC55">Caching 
Results</A>). </P>
<P>Some of these macros set output variables. See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC11">Substitutions 
in Makefiles</A>, for how to get their values. The phrase "define 
<VAR>name</VAR>" is used below as a shorthand to mean "define C preprocessor 
symbol <VAR>name</VAR> to the value 1". See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC53">Defining 
C Preprocessor Symbols</A>, for how to get those symbol definitions into your 
program. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC22" 
name=SEC22>Alternative Programs</A></H2>
<P>These macros check for the presence or behavior of particular programs. They 
are used to choose between several alternative programs and to decide what to do 
once one has been chosen. If there is no macro specifically defined to check for 
a program you need, and you don't need to check for any special properties of 
it, then you can use one of the general program check macros. </P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC23" 
name=SEC23>Particular Program Checks</A></H3>
<P>These macros check for particular programs--whether they exist, and in some 
cases whether they support certain features. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_DECL_YYTEXT</B> 
  <DD><A name=IDX77></A><A name=IDX78></A><A name=IDX79></A><A 
  name=IDX80></A>Define <CODE>YYTEXT_POINTER</CODE> if <CODE>yytext</CODE> is a 
  <SAMP>`char *'</SAMP> instead of a <SAMP>`char []'</SAMP>. Also set output 
  variable <CODE>LEX_OUTPUT_ROOT</CODE> to the base of the file name that the 
  lexer generates; usually <TT>`lex.yy'</TT>, but sometimes something else. 
  These results vary according to whether <CODE>lex</CODE> or <CODE>flex</CODE> 
  is being used. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROG_AWK</B> 
  <DD><A name=IDX81></A><A name=IDX82></A><A name=IDX83></A>Check for 
  <CODE>mawk</CODE>, <CODE>gawk</CODE>, <CODE>nawk</CODE>, and <CODE>awk</CODE>, 
  in that order, and set output variable <CODE>AWK</CODE> to the first one that 
  it finds. It tries <CODE>mawk</CODE> first because that is reported to be the 
  fastest implementation. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROG_CC</B> 
  <DD><A name=IDX84></A><A name=IDX85></A><A name=IDX86></A><A 
  name=IDX87></A>Determine a C compiler to use. If <CODE>CC</CODE> is not 
  already set in the environment, check for <CODE>gcc</CODE>, and use 
  <CODE>cc</CODE> if that's not found. Set output variable <CODE>CC</CODE> to 
  the name of the compiler found. 
  <P></P>
  <P>If using the GNU C compiler, set shell variable <CODE>GCC</CODE> to 
  <SAMP>`yes'</SAMP>, empty otherwise. If output variable <CODE>CFLAGS</CODE> 
  was not already set, set it to <SAMP>`-g -O2'</SAMP> for the GNU C compiler 
  (<SAMP>`-O2'</SAMP> on systems where GCC does not accept <SAMP>`-g'</SAMP>), 
  or <SAMP>`-g'</SAMP> for other compilers. </P>
  <P>If the C compiler being used does not produce executables that can run on 
  the system where <CODE>configure</CODE> is being run, set the shell variable 
  <CODE>cross_compiling</CODE> to <SAMP>`yes'</SAMP>, otherwise 
  <SAMP>`no'</SAMP>. In other words, this tests whether the build system type is 
  different from the host system type (the target system type is irrelevant to 
  this test). See section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC67">Manual 
  Configuration</A>, for more on support for cross compiling. </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROG_CC_C_O</B> 
  <DD><A name=IDX88></A><A name=IDX89></A><A name=IDX90></A>If the C compiler 
  does not accept the <SAMP>`-c'</SAMP> and <SAMP>`-o'</SAMP> options 
  simultaneously, define <CODE>NO_MINUS_C_MINUS_O</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROG_CPP</B> 
  <DD><A name=IDX91></A><A name=IDX92></A><A name=IDX93></A>Set output variable 
  <CODE>CPP</CODE> to a command that runs the C preprocessor. If <SAMP>`$CC 
  -E'</SAMP> doesn't work, it uses <TT>`/lib/cpp'</TT>. It is only portable to 
  run <CODE>CPP</CODE> on files with a <TT>`.c'</TT> extension. 
  <P></P>
  <P>If the current language is C (see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC51">Language 
  Choice</A>), many of the specific test macros use the value of 
  <CODE>CPP</CODE> indirectly by calling <CODE>AC_TRY_CPP</CODE>, 
  <CODE>AC_CHECK_HEADER</CODE>, <CODE>AC_EGREP_HEADER</CODE>, or 
  <CODE>AC_EGREP_CPP</CODE>. </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROG_CXX</B> 
  <DD><A name=IDX94></A><A name=IDX95></A><A name=IDX96></A><A 
  name=IDX97></A>Determine a C++ compiler to use. Check if the environment 
  variable <CODE>CXX</CODE> or <CODE>CCC</CODE> (in that order) is set; if so, 
  set output variable <CODE>CXX</CODE> to its value. Otherwise search for a C++ 
  compiler under likely names (<CODE>c++</CODE>, <CODE>g++</CODE>, 
  <CODE>gcc</CODE>, <CODE>CC</CODE>, <CODE>cxx</CODE>, and <CODE>cc++</CODE>). 
  If none of those checks succeed, as a last resort set <CODE>CXX</CODE> to 
  <CODE>gcc</CODE>. 
  <P></P>
  <P>If using the GNU C++ compiler, set shell variable <CODE>GXX</CODE> to 
  <SAMP>`yes'</SAMP>, empty otherwise. If output variable <CODE>CXXFLAGS</CODE> 
  was not already set, set it to <SAMP>`-g -O2'</SAMP> for the GNU C++ compiler 
  (<SAMP>`-O2'</SAMP> on systems where G++ does not accept <SAMP>`-g'</SAMP>), 
  or <SAMP>`-g'</SAMP> for other compilers. </P>
  <P>If the C++ compiler being used does not produce executables that can run on 
  the system where <CODE>configure</CODE> is being run, set the shell variable 
  <CODE>cross_compiling</CODE> to <SAMP>`yes'</SAMP>, otherwise 
  <SAMP>`no'</SAMP>. In other words, this tests whether the build system type is 
  different from the host system type (the target system type is irrelevant to 
  this test). See section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC67">Manual 
  Configuration</A>, for more on support for cross compiling. </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROG_CXXCPP</B> 
  <DD><A name=IDX98></A><A name=IDX99></A><A name=IDX100></A>Set output variable 
  <CODE>CXXCPP</CODE> to a command that runs the C++ preprocessor. If 
  <SAMP>`$CXX -E'</SAMP> doesn't work, it uses <TT>`/lib/cpp'</TT>. It is only 
  portable to run <CODE>CXXCPP</CODE> on files with a <TT>`.c'</TT>, 
  <TT>`.C'</TT>, or <TT>`.cc'</TT> extension. 
  <P></P>
  <P>If the current language is C++ (see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC51">Language 
  Choice</A>), many of the specific test macros use the value of 
  <CODE>CXXCPP</CODE> indirectly by calling <CODE>AC_TRY_CPP</CODE>, 
  <CODE>AC_CHECK_HEADER</CODE>, <CODE>AC_EGREP_HEADER</CODE>, or 
  <CODE>AC_EGREP_CPP</CODE>. </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROG_F77</B> 
  <DD><A name=IDX101></A><A name=IDX102></A><A name=IDX103></A><A 
  name=IDX104></A>Determine a Fortran 77 compiler to use. If <CODE>F77</CODE> is 
  not already set in the environment, check for <CODE>g77</CODE>, 
  <CODE>f77</CODE> and <CODE>f2c</CODE>, in that order. Set the output variable 
  <CODE>F77</CODE> to the name of the compiler found. 
  <P></P>
  <P>If using <CODE>g77</CODE> (the GNU Fortran 77 compiler), then 
  <CODE>AC_PROG_F77</CODE> will set the shell variable <CODE>G77</CODE> to 
  <SAMP>`yes'</SAMP>, and empty otherwise. If the output variable 
  <CODE>FFLAGS</CODE> was not already set in the environment, then set it to 
  <SAMP>`-g -02'</SAMP> for <CODE>g77</CODE> (or <SAMP>`-O2'</SAMP> where 
  <CODE>g77</CODE> does not accept <SAMP>`-g'</SAMP>). Otherwise, set 
  <CODE>FFLAGS</CODE> to <SAMP>`-g'</SAMP> for all other Fortran 77 compilers. 
  </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROG_F77_C_O</B> 
  <DD><A name=IDX105></A><A name=IDX106></A><A name=IDX107></A>Test if the 
  Fortran 77 compiler accepts the options <SAMP>`-c'</SAMP> and 
  <SAMP>`-o'</SAMP> simultaneously, and define 
  <CODE>F77_NO_MINUS_C_MINUS_O</CODE> if it does not. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROG_GCC_TRADITIONAL</B> 
  <DD><A name=IDX108></A><A name=IDX109></A><A name=IDX110></A>Add 
  <SAMP>`-traditional'</SAMP> to output variable <CODE>CC</CODE> if using the 
  GNU C compiler and <CODE>ioctl</CODE> does not work properly without 
  <SAMP>`-traditional'</SAMP>. That usually happens when the fixed header files 
  have not been installed on an old system. Since recent versions of the GNU C 
  compiler fix the header files automatically when installed, this is becoming a 
  less prevalent problem. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROG_INSTALL</B> 
  <DD><A name=IDX111></A><A name=IDX112></A><A name=IDX113></A><A 
  name=IDX114></A><A name=IDX115></A><A name=IDX116></A>Set output variable 
  <CODE>INSTALL</CODE> to the path of a BSD compatible <CODE>install</CODE> 
  program, if one is found in the current <CODE>PATH</CODE>. Otherwise, set 
  <CODE>INSTALL</CODE> to <SAMP>`<VAR>dir</VAR>/install-sh -c'</SAMP>, checking 
  the directories specified to <CODE>AC_CONFIG_AUX_DIR</CODE> (or its default 
  directories) to determine <VAR>dir</VAR> (see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC10">Creating 
  Output Files</A>). Also set the variables <CODE>INSTALL_PROGRAM</CODE> and 
  <CODE>INSTALL_SCRIPT</CODE> to <SAMP>`${INSTALL}'</SAMP> and 
  <CODE>INSTALL_DATA</CODE> to <SAMP>`${INSTALL} -m 644'</SAMP>. 
  <P></P>
  <P>This macro screens out various instances of <CODE>install</CODE> known to 
  not work. It prefers to find a C program rather than a shell script, for 
  speed. Instead of <TT>`install-sh'</TT>, it can also use 
  <TT>`install.sh'</TT>, but that name is obsolete because some 
  <CODE>make</CODE> programs have a rule that creates <TT>`install'</TT> from it 
  if there is no <TT>`Makefile'</TT>. </P>
  <P>A copy of <TT>`install-sh'</TT> which you may use comes with Autoconf. If 
  you use <CODE>AC_PROG_INSTALL</CODE>, you must include either 
  <TT>`install-sh'</TT> or <TT>`install.sh'</TT> in your distribution, or 
  <CODE>configure</CODE> will produce an error message saying it can't find 
  them--even if the system you're on has a good <CODE>install</CODE> program. 
  This check is a safety measure to prevent you from accidentally leaving that 
  file out, which would prevent your package from installing on systems that 
  don't have a BSD-compatible <CODE>install</CODE> program. </P>
  <P>If you need to use your own installation program because it has features 
  not found in standard <CODE>install</CODE> programs, there is no reason to use 
  <CODE>AC_PROG_INSTALL</CODE>; just put the pathname of your program into your 
  <TT>`Makefile.in'</TT> files. </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROG_LEX</B> 
  <DD><A name=IDX117></A><A name=IDX118></A><A name=IDX119></A><A 
  name=IDX120></A>If <CODE>flex</CODE> is found, set output variable 
  <CODE>LEX</CODE> to <SAMP>`flex'</SAMP> and <CODE>LEXLIB</CODE> to 
  <SAMP>`-lfl'</SAMP>, if that library is in a standard place. Otherwise set 
  <CODE>LEX</CODE> to <SAMP>`lex'</SAMP> and <CODE>LEXLIB</CODE> to 
  <SAMP>`-ll'</SAMP>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROG_LN_S</B> 
  <DD><A name=IDX121></A><A name=IDX122></A><A name=IDX123></A>If <SAMP>`ln 
  -s'</SAMP> works on the current filesystem (the operating system and 
  filesystem support symbolic links), set output variable <CODE>LN_S</CODE> to 
  <SAMP>`ln -s'</SAMP>, otherwise set it to <SAMP>`ln'</SAMP>. 
  <P></P>
  <P>If the link is put in a directory other than the current directory, its 
  meaning depends on whether <SAMP>`ln'</SAMP> or <SAMP>`ln -s'</SAMP> is used. 
  To safely create links using <SAMP>`$(LN_S)'</SAMP>, either find out which 
  form is used and adjust the arguments, or always invoke <CODE>ln</CODE> in the 
  directory where the link is to be created. </P>
  <P>In other words, it does not work to do <PRE>$(LN_S) foo /x/bar
</PRE>
  <P>Instead, do </P><PRE>(cd /x &amp;&amp; $(LN_S) foo bar)
</PRE></DD></DL>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROG_RANLIB</B> 
  <DD><A name=IDX124></A><A name=IDX125></A><A name=IDX126></A>Set output 
  variable <CODE>RANLIB</CODE> to <SAMP>`ranlib'</SAMP> if <CODE>ranlib</CODE> 
  is found, otherwise to <SAMP>`:'</SAMP> (do nothing). </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROG_YACC</B> 
  <DD><A name=IDX127></A><A name=IDX128></A><A name=IDX129></A>If 
  <CODE>bison</CODE> is found, set output variable <CODE>YACC</CODE> to 
  <SAMP>`bison -y'</SAMP>. Otherwise, if <CODE>byacc</CODE> is found, set 
  <CODE>YACC</CODE> to <SAMP>`byacc'</SAMP>. Otherwise set <CODE>YACC</CODE> to 
  <SAMP>`yacc'</SAMP>. </DD></DL>
<P></P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC24" 
name=SEC24>Generic Program and File Checks</A></H3>
<P>These macros are used to find programs not covered by the particular test 
macros. If you need to check the behavior of a program as well as find out 
whether it is present, you have to write your own test for it (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC40">Writing 
Tests</A>). By default, these macros use the environment variable 
<CODE>PATH</CODE>. If you need to check for a program that might not be in the 
user's <CODE>PATH</CODE>, you can pass a modified path to use instead, like 
this: </P><PRE>AC_PATH_PROG(INETD, inetd, /usr/libexec/inetd,
  $PATH:/usr/libexec:/usr/sbin:/usr/etc:etc)
</PRE>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CHECK_FILE</B> <I>(<VAR>file</VAR> [, 
  <VAR>action-if-found</VAR> [, <VAR>action-if-not-found</VAR>]])</I> 
  <DD><A name=IDX130></A><A name=IDX131></A>Check whether file <VAR>file</VAR> 
  exists on the native system. If it is found, execute 
  <VAR>action-if-found</VAR>, otherwise do <VAR>action-if-not-found</VAR>, if 
  given. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CHECK_FILES</B> <I>(<VAR>files</VAR>[, 
  <VAR>action-if-found</VAR> [, <VAR>action-if-not-found</VAR>]])</I> 
  <DD><A name=IDX132></A><A name=IDX133></A>Executes <CODE>AC_CHECK_FILE</CODE> 
  once for each file listed in <VAR>files</VAR>. Additionally, defines 
  <SAMP>`HAVE<VAR>file</VAR>'</SAMP> for each file found, set to 1. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CHECK_PROG</B> <I>(<VAR>variable</VAR>, 
  <VAR>prog-to-check-for</VAR>, <VAR>value-if-found</VAR> [, 
  <VAR>value-if-not-found</VAR> [, <VAR>path</VAR>, [ <VAR>reject</VAR> ]]])</I> 

  <DD><A name=IDX134></A><A name=IDX135></A>Check whether program 
  <VAR>prog-to-check-for</VAR> exists in <CODE>PATH</CODE>. If it is found, set 
  <VAR>variable</VAR> to <VAR>value-if-found</VAR>, otherwise to 
  <VAR>value-if-not-found</VAR>, if given. Always pass over <VAR>reject</VAR> 
  (an absolute file name) even if it is the first found in the search path; in 
  that case, set <VAR>variable</VAR> using the absolute file name of the 
  <VAR>prog-to-check-for</VAR> found that is not <VAR>reject</VAR>. If 
  <VAR>variable</VAR> was already set, do nothing. Calls <CODE>AC_SUBST</CODE> 
  for <VAR>variable</VAR>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CHECK_PROGS</B> <I>(<VAR>variable</VAR>, 
  <VAR>progs-to-check-for</VAR> [, <VAR>value-if-not-found</VAR> [, 
  <VAR>path</VAR>]])</I> 
  <DD><A name=IDX136></A><A name=IDX137></A>Check for each program in the 
  whitespace-separated list <VAR>progs-to-check-for</VAR> exists in 
  <CODE>PATH</CODE>. If it is found, set <VAR>variable</VAR> to the name of that 
  program. Otherwise, continue checking the next program in the list. If none of 
  the programs in the list are found, set <VAR>variable</VAR> to 
  <VAR>value-if-not-found</VAR>; if <VAR>value-if-not-found</VAR> is not 
  specified, the value of <VAR>variable</VAR> is not changed. Calls 
  <CODE>AC_SUBST</CODE> for <VAR>variable</VAR>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CHECK_TOOL</B> <I>(<VAR>variable</VAR>, 
  <VAR>prog-to-check-for</VAR> [, <VAR>value-if-not-found</VAR> [, 
  <VAR>path</VAR>]])</I> 
  <DD><A name=IDX138></A><A name=IDX139></A>Like <CODE>AC_CHECK_PROG</CODE>, but 
  first looks for <VAR>prog-to-check-for</VAR> with a prefix of the host type as 
  determined by <CODE>AC_CANONICAL_HOST</CODE>, followed by a dash (see section 
  <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC69">Getting 
  the Canonical System Type</A>). For example, if the user runs <SAMP>`configure 
  --host=i386-gnu'</SAMP>, then this call: <PRE>AC_CHECK_TOOL(RANLIB, ranlib, :)
</PRE>
  <P>sets <CODE>RANLIB</CODE> to <TT>`i386-gnu-ranlib'</TT> if that program 
  exists in <CODE>PATH</CODE>, or to <SAMP>`ranlib'</SAMP> if that program 
  exists in <CODE>PATH</CODE>, or to <SAMP>`:'</SAMP> if neither program exists. 
  </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PATH_PROG</B> <I>(<VAR>variable</VAR>, 
  <VAR>prog-to-check-for</VAR> [, <VAR>value-if-not-found</VAR> [, 
  <VAR>path</VAR>]])</I> 
  <DD><A name=IDX140></A><A name=IDX141></A>Like <CODE>AC_CHECK_PROG</CODE>, but 
  set <VAR>variable</VAR> to the entire path of <VAR>prog-to-check-for</VAR> if 
  found. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PATH_PROGS</B> <I>(<VAR>variable</VAR>, 
  <VAR>progs-to-check-for</VAR> [, <VAR>value-if-not-found</VAR> [, 
  <VAR>path</VAR>]])</I> 
  <DD><A name=IDX142></A><A name=IDX143></A>Like <CODE>AC_CHECK_PROGS</CODE>, 
  but if any of <VAR>progs-to-check-for</VAR> are found, set <VAR>variable</VAR> 
  to the entire path of the program found. </DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC25" 
name=SEC25>Library Files</A></H2>
<P>The following macros check for the presence of certain C, C++ or Fortran 77 
library archive files. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CHECK_LIB</B> <I>(<VAR>library</VAR>, 
  <VAR>function</VAR> [, <VAR>action-if-found</VAR> [, 
  <VAR>action-if-not-found</VAR> [, <VAR>other-libraries</VAR>]]])</I> 
  <DD><A name=IDX144></A><A name=IDX145></A>Depending on the current 
  language(see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC51">Language 
  Choice</A>), try to ensure that the C, C++ or Fortran 77 function 
  <VAR>function</VAR> is available by checking whether a test program can be 
  linked with the library <VAR>library</VAR> to get the function. 
  <VAR>library</VAR> is the base name of the library; e.g., to check for 
  <SAMP>`-lmp'</SAMP>, use <SAMP>`mp'</SAMP> as the <VAR>library</VAR> argument. 

  <P></P>
  <P><VAR>action-if-found</VAR> is a list of shell commands to run if the link 
  with the library succeeds; <VAR>action-if-not-found</VAR> is a list of shell 
  commands to run if the link fails. If <VAR>action-if-found</VAR> is not 
  specified, the default action will add <SAMP>`-l<VAR>library</VAR>'</SAMP> to 
  <CODE>LIBS</CODE> and define <SAMP>`HAVE_LIB<VAR>library</VAR>'</SAMP> (in all 
  capitals). </P>
  <P>If linking with <VAR>library</VAR> results in unresolved symbols, which 
  would be resolved by linking with additional libraries, give those libraries 
  as the <VAR>other-libraries</VAR> argument, separated by spaces: <SAMP>`-lXt 
  -lX11'</SAMP>. Otherwise this macro will fail to detect that 
  <VAR>library</VAR> is present, because linking the test program will always 
  fail with unresolved symbols. </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_HAVE_LIBRARY</B> <I>(<VAR>library</VAR>, [, 
  <VAR>action-if-found</VAR> [, <VAR>action-if-not-found</VAR> [, 
  <VAR>other-libraries</VAR>]]])</I> 
  <DD><A name=IDX146></A><A name=IDX147></A>This macro is equivalent to calling 
  <CODE>AC_CHECK_LIB</CODE> with a <VAR>function</VAR> argument of 
  <CODE>main</CODE>. In addition, <VAR>library</VAR> can be written as any of 
  <SAMP>`foo'</SAMP>, <SAMP>`-lfoo'</SAMP>, or <SAMP>`libfoo.a'</SAMP>. In all 
  of those cases, the compiler is passed <SAMP>`-lfoo'</SAMP>. However, 
  <VAR>library</VAR> can not be a shell variable; it must be a literal name. 
  This macro is considered obsolete. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_SEARCH_LIBS</B> <I>(<VAR>function</VAR>, 
  <VAR>search-libs</VAR> [, <VAR>action-if-found</VAR> [, 
  <VAR>action-if-not-found</VAR> [, <VAR>other-libraries</VAR>]]])</I> 
  <DD><A name=IDX148></A><A name=IDX149></A>Search for a library defining 
  <VAR>function</VAR>, if it's not already available. This equates to calling 
  <CODE>AC_TRY_LINK_FUNC</CODE> first with no libraries, then for each library 
  listed in <VAR>search-libs</VAR>. 
  <P></P>
  <P>If the function is found, run <VAR>action-if-found</VAR>, otherwise run 
  <VAR>action-if-not-found</VAR>. </P>
  <P>If linking with <VAR>library</VAR> results in unresolved symbols, which 
  would be resolved by linking with additional libraries, give those libraries 
  as the <VAR>other-libraries</VAR> argument, separated by spaces: <SAMP>`-lXt 
  -lX11'</SAMP>. Otherwise this macro will fail to detect that 
  <VAR>function</VAR> is present, because linking the test program will always 
  fail with unresolved symbols. </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_SEARCH_LIBS</B> <I>(<VAR>function</VAR>, 
  <VAR>search-libs</VAR>[, <VAR>action-if-found</VAR> [, 
  <VAR>action-if-not-found</VAR>]])</I> 
  <DD><A name=IDX150></A><A name=IDX151></A>This macro is equivalent to calling 
  <CODE>AC_TRY_LINK_FUNC</CODE> once for each library listed in 
  <VAR>search-libs</VAR>. Add <SAMP>`-l<VAR>library</VAR>'</SAMP> to 
  <CODE>LIBS</CODE> for the first library found to contain <VAR>function</VAR>, 
  and execute <VAR>action-if-found</VAR>. Otherwise execute 
  <VAR>action-if-not-found</VAR>. </DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC26" 
name=SEC26>Library Functions</A></H2>
<P>The following macros check for particular C library functions. If there is no 
macro specifically defined to check for a function you need, and you don't need 
to check for any special properties of it, then you can use one of the general 
function check macros. </P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC27" 
name=SEC27>Particular Function Checks</A></H3>
<P>These macros check for particular C functions--whether they exist, and in 
some cases how they respond when given certain arguments. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_ALLOCA</B> 
  <DD><A name=IDX152></A><A name=IDX153></A><A name=IDX154></A><A 
  name=IDX155></A><A name=IDX156></A>Check how to get <CODE>alloca</CODE>. Tries 
  to get a builtin version by checking for <TT>`alloca.h'</TT> or the predefined 
  C preprocessor macros <CODE>__GNUC__</CODE> and <CODE>_AIX</CODE>. If this 
  macro finds <TT>`alloca.h'</TT>, it defines <CODE>HAVE_ALLOCA_H</CODE>. 
  <P></P>
  <P>If those attempts fail, it looks for the function in the standard C 
  library. If any of those methods succeed, it defines <CODE>HAVE_ALLOCA</CODE>. 
  Otherwise, it sets the output variable <CODE>ALLOCA</CODE> to 
  <SAMP>`alloca.o'</SAMP> and defines <CODE>C_ALLOCA</CODE> (so programs can 
  periodically call <SAMP>`alloca(0)'</SAMP> to garbage collect). This variable 
  is separate from <CODE>LIBOBJS</CODE> so multiple programs can share the value 
  of <CODE>ALLOCA</CODE> without needing to create an actual library, in case 
  only some of them use the code in <CODE>LIBOBJS</CODE>. </P>
  <P>This macro does not try to get <CODE>alloca</CODE> from the System V R3 
  <TT>`libPW'</TT> or the System V R4 <TT>`libucb'</TT> because those libraries 
  contain some incompatible functions that cause trouble. Some versions do not 
  even contain <CODE>alloca</CODE> or contain a buggy version. If you still want 
  to use their <CODE>alloca</CODE>, use <CODE>ar</CODE> to extract 
  <TT>`alloca.o'</TT> from them instead of compiling <TT>`alloca.c'</TT>. </P>
  <P>Source files that use <CODE>alloca</CODE> should start with a piece of code 
  like the following, to declare it properly. In some versions of AIX, the 
  declaration of <CODE>alloca</CODE> must precede everything else except for 
  comments and preprocessor directives. The <CODE>#pragma</CODE> directive is 
  indented so that pre-ANSI C compilers will ignore it, rather than choke on it. 
  </P><PRE>/* AIX requires this to be the first thing in the file.  */
#ifndef __GNUC__
# if HAVE_ALLOCA_H
#  include &lt;alloca.h&gt;
# else
#  ifdef _AIX
 #pragma alloca
#  else
#   ifndef alloca /* predefined by HP cc +Olibcalls */
char *alloca ();
#   endif
#  endif
# endif
#endif
</PRE></DD></DL>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_CLOSEDIR_VOID</B> 
  <DD><A name=IDX157></A><A name=IDX158></A><A name=IDX159></A>If the 
  <CODE>closedir</CODE> function does not return a meaningful value, define 
  <CODE>CLOSEDIR_VOID</CODE>. Otherwise, callers ought to check its return value 
  for an error indicator. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_FNMATCH</B> 
  <DD><A name=IDX160></A><A name=IDX161></A><A name=IDX162></A>If the 
  <CODE>fnmatch</CODE> function is available and works (unlike the one on SunOS 
  5.4), define <CODE>HAVE_FNMATCH</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_GETLOADAVG</B> 
  <DD><A name=IDX163></A><A name=IDX164></A><A name=IDX165></A><A 
  name=IDX166></A><A name=IDX167></A><A name=IDX168></A><A name=IDX169></A><A 
  name=IDX170></A><A name=IDX171></A><A name=IDX172></A><A name=IDX173></A><A 
  name=IDX174></A><A name=IDX175></A>Check how to get the system load averages. 
  If the system has the <CODE>getloadavg</CODE> function, this macro defines 
  <CODE>HAVE_GETLOADAVG</CODE>, and adds to <CODE>LIBS</CODE> any libraries 
  needed to get that function. 
  <P></P>
  <P>Otherwise, it adds <SAMP>`getloadavg.o'</SAMP> to the output variable 
  <CODE>LIBOBJS</CODE>, and possibly defines several other C preprocessor macros 
  and output variables: </P>
  <OL>
    <LI>It defines <CODE>SVR4</CODE>, <CODE>DGUX</CODE>, <CODE>UMAX</CODE>, or 
    <CODE>UMAX4_3</CODE> if on those systems. 
    <LI>If it finds <TT>`nlist.h'</TT>, it defines <CODE>NLIST_STRUCT</CODE>. 
    <LI>If <SAMP>`struct nlist'</SAMP> has an <SAMP>`n_un'</SAMP> member, it 
    defines <CODE>NLIST_NAME_UNION</CODE>. 
    <LI>If compiling <TT>`getloadavg.c'</TT> defines 
    <CODE>LDAV_PRIVILEGED</CODE>, programs need to be installed specially on 
    this system for <CODE>getloadavg</CODE> to work, and this macro defines 
    <CODE>GETLOADAVG_PRIVILEGED</CODE>. 
    <LI>This macro sets the output variable <CODE>NEED_SETGID</CODE>. The value 
    is <SAMP>`true'</SAMP> if special installation is required, 
    <SAMP>`false'</SAMP> if not. If <CODE>NEED_SETGID</CODE> is 
    <SAMP>`true'</SAMP>, this macro sets <CODE>KMEM_GROUP</CODE> to the name of 
    the group that should own the installed program. </LI></OL></DD></DL>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_GETMNTENT</B> 
  <DD><A name=IDX176></A><A name=IDX177></A><A name=IDX178></A>Check for 
  <CODE>getmntent</CODE> in the <TT>`sun'</TT>, <TT>`seq'</TT>, and 
  <TT>`gen'</TT> libraries, for Irix 4, PTX, and Unixware, respectively. Then, 
  if <CODE>getmntent</CODE> is available, define <CODE>HAVE_GETMNTENT</CODE>. 
  </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_GETPGRP</B> 
  <DD><A name=IDX179></A><A name=IDX180></A><A name=IDX181></A>If 
  <CODE>getpgrp</CODE> takes no argument (the POSIX.1 version), define 
  <CODE>GETPGRP_VOID</CODE>. Otherwise, it is the BSD version, which takes a 
  process ID as an argument. This macro does not check whether 
  <CODE>getpgrp</CODE> exists at all; if you need to work in that situation, 
  first call <CODE>AC_CHECK_FUNC</CODE> for <CODE>getpgrp</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_MEMCMP</B> 
  <DD><A name=IDX182></A><A name=IDX183></A><A name=IDX184></A>If the 
  <CODE>memcmp</CODE> function is not available, or does not work on 8-bit data 
  (like the one on SunOS 4.1.3), add <SAMP>`memcmp.o'</SAMP> to output variable 
  <CODE>LIBOBJS</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_MMAP</B> 
  <DD><A name=IDX185></A><A name=IDX186></A><A name=IDX187></A>If the 
  <CODE>mmap</CODE> function exists and works correctly, define 
  <CODE>HAVE_MMAP</CODE>. Only checks private fixed mapping of already-mapped 
  memory. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_SELECT_ARGTYPES</B> 
  <DD><A name=IDX188></A><A name=IDX189></A><A name=IDX190></A><A 
  name=IDX191></A><A name=IDX192></A>Determines the correct type to be passed to 
  each of the <CODE>select</CODE> function's arguments, and defines those types 
  in <CODE>SELECT_TYPE_ARG1</CODE>, <CODE>SELECT_TYPE_ARG234</CODE>, and 
  <CODE>SELECT_TYPE_ARG5</CODE> respectively. <CODE>SELECT_TYPE_ARG1</CODE> 
  defaults to <SAMP>`int'</SAMP>, <CODE>SELECT_TYPE_ARG234</CODE> defaults to 
  <SAMP>`int *'</SAMP>, and <CODE>SELECT_TYPE_ARG5</CODE> defaults to 
  <SAMP>`struct timeval *'</SAMP>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_SETPGRP</B> 
  <DD><A name=IDX193></A><A name=IDX194></A><A name=IDX195></A>If 
  <CODE>setpgrp</CODE> takes no argument (the POSIX.1 version), define 
  <CODE>SETPGRP_VOID</CODE>. Otherwise, it is the BSD version, which takes two 
  process ID as arguments. This macro does not check whether 
  <CODE>setpgrp</CODE> exists at all; if you need to work in that situation, 
  first call <CODE>AC_CHECK_FUNC</CODE> for <CODE>setpgrp</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_SETVBUF_REVERSED</B> 
  <DD><A name=IDX196></A><A name=IDX197></A><A name=IDX198></A>If 
  <CODE>setvbuf</CODE> takes the buffering type as its second argument and the 
  buffer pointer as the third, instead of the other way around, define 
  <CODE>SETVBUF_REVERSED</CODE>. This is the case on System V before release 3. 
  </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_STRCOLL</B> 
  <DD><A name=IDX199></A><A name=IDX200></A><A name=IDX201></A>If the 
  <CODE>strcoll</CODE> function exists and works correctly, define 
  <CODE>HAVE_STRCOLL</CODE>. This does a bit more than 
  <SAMP>`AC_CHECK_FUNCS(strcoll)'</SAMP>, because some systems have incorrect 
  definitions of <CODE>strcoll</CODE>, which should not be used. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_STRFTIME</B> 
  <DD><A name=IDX202></A><A name=IDX203></A><A name=IDX204></A>Check for 
  <CODE>strftime</CODE> in the <TT>`intl'</TT> library, for SCO UNIX. Then, if 
  <CODE>strftime</CODE> is available, define <CODE>HAVE_STRFTIME</CODE>. 
</DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_UTIME_NULL</B> 
  <DD><A name=IDX205></A><A name=IDX206></A><A name=IDX207></A>If 
  <SAMP>`utime(<VAR>file</VAR>, NULL)'</SAMP> sets <VAR>file</VAR>'s timestamp 
  to the present, define <CODE>HAVE_UTIME_NULL</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_VFORK</B> 
  <DD><A name=IDX208></A><A name=IDX209></A><A name=IDX210></A><A 
  name=IDX211></A>If <TT>`vfork.h'</TT> is found, define 
  <CODE>HAVE_VFORK_H</CODE>. If a working <CODE>vfork</CODE> is not found, 
  define <CODE>vfork</CODE> to be <CODE>fork</CODE>. This macro checks for 
  several known errors in implementations of <CODE>vfork</CODE> and considers 
  the system to not have a working <CODE>vfork</CODE> if it detects any of them. 
  It is not considered to be an implementation error if a child's invocation of 
  <CODE>signal</CODE> modifies the parent's signal handler, since child 
  processes rarely change their signal handlers. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_VPRINTF</B> 
  <DD><A name=IDX212></A><A name=IDX213></A><A name=IDX214></A><A 
  name=IDX215></A>If <CODE>vprintf</CODE> is found, define 
  <CODE>HAVE_VPRINTF</CODE>. Otherwise, if <CODE>_doprnt</CODE> is found, define 
  <CODE>HAVE_DOPRNT</CODE>. (If <CODE>vprintf</CODE> is available, you may 
  assume that <CODE>vfprintf</CODE> and <CODE>vsprintf</CODE> are also 
  available.) </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_FUNC_WAIT3</B> 
  <DD><A name=IDX216></A><A name=IDX217></A><A name=IDX218></A>If 
  <CODE>wait3</CODE> is found and fills in the contents of its third argument (a 
  <SAMP>`struct rusage *'</SAMP>), which HP-UX does not do, define 
  <CODE>HAVE_WAIT3</CODE>. </DD></DL>
<P></P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC28" 
name=SEC28>Generic Function Checks</A></H3>
<P>These macros are used to find functions not covered by the particular test 
macros. If the functions might be in libraries other than the default C library, 
first call <CODE>AC_CHECK_LIB</CODE> for those libraries. If you need to check 
the behavior of a function as well as find out whether it is present, you have 
to write your own test for it (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC40">Writing 
Tests</A>). </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CHECK_FUNC</B> <I>(<VAR>function</VAR>, 
  [<VAR>action-if-found</VAR> [, <VAR>action-if-not-found</VAR>]])</I> 
  <DD><A name=IDX219></A><A name=IDX220></A>If C function <VAR>function</VAR> is 
  available, run shell commands <VAR>action-if-found</VAR>, otherwise 
  <VAR>action-if-not-found</VAR>. If you just want to define a symbol if the 
  function is available, consider using <CODE>AC_CHECK_FUNCS</CODE> instead. 
  This macro checks for functions with C linkage even when 
  <CODE>AC_LANG_CPLUSPLUS</CODE> has been called, since C++ is more standardized 
  than C is. (see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC51">Language 
  Choice</A>, for more information about selecting the language for checks.) 
  </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CHECK_FUNCS</B> <I>(<VAR>function</VAR>... [, 
  <VAR>action-if-found</VAR> [, <VAR>action-if-not-found</VAR>]])</I> 
  <DD><A name=IDX221></A><A name=IDX222></A><A name=IDX223></A>For each given 
  <VAR>function</VAR> in the whitespace-separated argument list that is 
  available, define <CODE>HAVE_<VAR>function</VAR></CODE> (in all capitals). If 
  <VAR>action-if-found</VAR> is given, it is additional shell code to execute 
  when one of the functions is found. You can give it a value of 
  <SAMP>`break'</SAMP> to break out of the loop on the first match. If 
  <VAR>action-if-not-found</VAR> is given, it is executed when one of the 
  functions is not found. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_REPLACE_FUNCS</B> <I>(<VAR>function</VAR>...)</I> 
  <DD><A name=IDX224></A><A name=IDX225></A><A name=IDX226></A>Like calling 
  <CODE>AC_CHECK_FUNCS</CODE> using an <VAR>action-if-not-found</VAR> that adds 
  <SAMP>`<VAR>function</VAR>.o'</SAMP> to the value of the output variable 
  <CODE>LIBOBJS</CODE>. You can declare a function for which your replacement 
  version is used by enclosing the prototype in <SAMP>`#ifndef 
  HAVE_<VAR>function</VAR>'</SAMP>. If the system has the function, it probably 
  declares it in a header file you should be including, so you shouldn't 
  redeclare it, lest your declaration conflict. </DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC29" 
name=SEC29>Header Files</A></H2>
<P>The following macros check for the presence of certain C header files. If 
there is no macro specifically defined to check for a header file you need, and 
you don't need to check for any special properties of it, then you can use one 
of the general header file check macros. </P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC30" 
name=SEC30>Particular Header Checks</A></H3>
<P>These macros check for particular system header files--whether they exist, 
and in some cases whether they declare certain symbols. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_DECL_SYS_SIGLIST</B> 
  <DD><A name=IDX227></A><A name=IDX228></A><A name=IDX229></A>Define 
  <CODE>SYS_SIGLIST_DECLARED</CODE> if the variable <CODE>sys_siglist</CODE> is 
  declared in a system header file, either <TT>`signal.h'</TT> or 
  <TT>`unistd.h'</TT>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_DIR_HEADER</B> 
  <DD><A name=IDX230></A><A name=IDX231></A><A name=IDX232></A><A 
  name=IDX233></A><A name=IDX234></A><A name=IDX235></A><A name=IDX236></A>Like 
  calling <CODE>AC_HEADER_DIRENT</CODE> and <CODE>AC_FUNC_CLOSEDIR_VOID</CODE>, 
  but defines a different set of C preprocessor macros to indicate which header 
  file is found. This macro and the names it defines are considered obsolete. 
  The names it defines are: 
  <P></P>
  <DL compact>
    <DT><TT>`dirent.h'</TT> 
    <DD><CODE>DIRENT</CODE> 
    <DT><TT>`sys/ndir.h'</TT> 
    <DD><CODE>SYSNDIR</CODE> 
    <DT><TT>`sys/dir.h'</TT> 
    <DD><CODE>SYSDIR</CODE> 
    <DT><TT>`ndir.h'</TT> 
    <DD><CODE>NDIR</CODE> </DD></DL>
  <P>In addition, if the <CODE>closedir</CODE> function does not return a 
  meaningful value, define <CODE>VOID_CLOSEDIR</CODE>. </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_HEADER_DIRENT</B> 
  <DD><A name=IDX237></A><A name=IDX238></A><A name=IDX239></A><A 
  name=IDX240></A><A name=IDX241></A><A name=IDX242></A>Check for the following 
  header files, and for the first one that is found and defines 
  <SAMP>`DIR'</SAMP>, define the listed C preprocessor macro: 
  <P></P>
  <DL compact>
    <DT><TT>`dirent.h'</TT> 
    <DD><CODE>HAVE_DIRENT_H</CODE> 
    <DT><TT>`sys/ndir.h'</TT> 
    <DD><CODE>HAVE_SYS_NDIR_H</CODE> 
    <DT><TT>`sys/dir.h'</TT> 
    <DD><CODE>HAVE_SYS_DIR_H</CODE> 
    <DT><TT>`ndir.h'</TT> 
    <DD><CODE>HAVE_NDIR_H</CODE> </DD></DL>
  <P>The directory library declarations in the source code should look something 
  like the following: </P><PRE>#if HAVE_DIRENT_H
# include &lt;dirent.h&gt;
# define NAMLEN(dirent) strlen((dirent)-&gt;d_name)
#else
# define dirent direct
# define NAMLEN(dirent) (dirent)-&gt;d_namlen
# if HAVE_SYS_NDIR_H
#  include &lt;sys/ndir.h&gt;
# endif
# if HAVE_SYS_DIR_H
#  include &lt;sys/dir.h&gt;
# endif
# if HAVE_NDIR_H
#  include &lt;ndir.h&gt;
# endif
#endif
</PRE>
  <P>Using the above declarations, the program would declare variables to be 
  type <CODE>struct dirent</CODE>, not <CODE>struct direct</CODE>, and would 
  access the length of a directory entry name by passing a pointer to a 
  <CODE>struct dirent</CODE> to the <CODE>NAMLEN</CODE> macro. </P>
  <P>This macro also checks for the SCO Xenix <TT>`dir'</TT> and <TT>`x'</TT> 
  libraries. </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_HEADER_MAJOR</B> 
  <DD><A name=IDX243></A><A name=IDX244></A><A name=IDX245></A><A 
  name=IDX246></A>If <TT>`sys/types.h'</TT> does not define <CODE>major</CODE>, 
  <CODE>minor</CODE>, and <CODE>makedev</CODE>, but <TT>`sys/mkdev.h'</TT> does, 
  define <CODE>MAJOR_IN_MKDEV</CODE>; otherwise, if <TT>`sys/sysmacros.h'</TT> 
  does, define <CODE>MAJOR_IN_SYSMACROS</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_HEADER_STDC</B> 
  <DD><A name=IDX247></A><A name=IDX248></A><A name=IDX249></A>Define 
  <CODE>STDC_HEADERS</CODE> if the system has ANSI C header files. Specifically, 
  this macro checks for <TT>`stdlib.h'</TT>, <TT>`stdarg.h'</TT>, 
  <TT>`string.h'</TT>, and <TT>`float.h'</TT>; if the system has those, it 
  probably has the rest of the ANSI C header files. This macro also checks 
  whether <TT>`string.h'</TT> declares <CODE>memchr</CODE> (and thus presumably 
  the other <CODE>mem</CODE> functions), whether <TT>`stdlib.h'</TT> declare 
  <CODE>free</CODE> (and thus presumably <CODE>malloc</CODE> and other related 
  functions), and whether the <TT>`ctype.h'</TT> macros work on characters with 
  the high bit set, as ANSI C requires. 
  <P></P>
  <P>Use <CODE>STDC_HEADERS</CODE> instead of <CODE>__STDC__</CODE> to determine 
  whether the system has ANSI-compliant header files (and probably C library 
  functions) because many systems that have GCC do not have ANSI C header files. 
  </P>
  <P>On systems without ANSI C headers, there is so much variation that it is 
  probably easier to declare the functions you use than to figure out exactly 
  what the system header files declare. Some systems contain a mix of functions 
  ANSI and BSD; some are mostly ANSI but lack <SAMP>`memmove'</SAMP>; some 
  define the BSD functions as macros in <TT>`string.h'</TT> or 
  <TT>`strings.h'</TT>; some have only the BSD functions but 
  <TT>`string.h'</TT>; some declare the memory functions in <TT>`memory.h'</TT>, 
  some in <TT>`string.h'</TT>; etc. It is probably sufficient to check for one 
  string function and one memory function; if the library has the ANSI versions 
  of those then it probably has most of the others. If you put the following in 
  <TT>`configure.in'</TT>: </P><PRE>AC_HEADER_STDC
AC_CHECK_FUNCS(strchr memcpy)
</PRE>
  <P>then, in your code, you can put declarations like this: </P><PRE>#if STDC_HEADERS
# include &lt;string.h&gt;
#else
# ifndef HAVE_STRCHR
#  define strchr index
#  define strrchr rindex
# endif
char *strchr (), *strrchr ();
# ifndef HAVE_MEMCPY
#  define memcpy(d, s, n) bcopy ((s), (d), (n))
#  define memmove(d, s, n) bcopy ((s), (d), (n))
# endif
#endif
</PRE>
  <P>If you use a function like <CODE>memchr</CODE>, <CODE>memset</CODE>, 
  <CODE>strtok</CODE>, or <CODE>strspn</CODE>, which have no BSD equivalent, 
  then macros won't suffice; you must provide an implementation of each 
  function. An easy way to incorporate your implementations only when needed 
  (since the ones in system C libraries may be hand optimized) is to, taking 
  <CODE>memchr</CODE> for example, put it in <TT>`memchr.c'</TT> and use 
  <SAMP>`AC_REPLACE_FUNCS(memchr)'</SAMP>. </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_HEADER_SYS_WAIT</B> 
  <DD><A name=IDX250></A><A name=IDX251></A><A name=IDX252></A>If 
  <TT>`sys/wait.h'</TT> exists and is compatible with POSIX.1, define 
  <CODE>HAVE_SYS_WAIT_H</CODE>. Incompatibility can occur if 
  <TT>`sys/wait.h'</TT> does not exist, or if it uses the old BSD <CODE>union 
  wait</CODE> instead of <CODE>int</CODE> to store a status value. If 
  <TT>`sys/wait.h'</TT> is not POSIX.1 compatible, then instead of including it, 
  define the POSIX.1 macros with their usual interpretations. Here is an 
  example: 
  <P></P><PRE>#include &lt;sys/types.h&gt;
#if HAVE_SYS_WAIT_H
# include &lt;sys/wait.h&gt;
#endif
#ifndef WEXITSTATUS
# define WEXITSTATUS(stat_val) ((unsigned)(stat_val) &gt;&gt; 8)
#endif
#ifndef WIFEXITED
# define WIFEXITED(stat_val) (((stat_val) &amp; 255) == 0)
#endif
</PRE></DD></DL>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_MEMORY_H</B> 
  <DD><A name=IDX253></A><A name=IDX254></A><A name=IDX255></A>Define 
  <CODE>NEED_MEMORY_H</CODE> if <CODE>memcpy</CODE>, <CODE>memcmp</CODE>, etc. 
  are not declared in <TT>`string.h'</TT> and <TT>`memory.h'</TT> exists. This 
  macro is obsolete; instead, use <CODE>AC_CHECK_HEADERS(memory.h)</CODE>. See 
  the example for <CODE>AC_HEADER_STDC</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_UNISTD_H</B> 
  <DD><A name=IDX256></A><A name=IDX257></A><A name=IDX258></A>Define 
  <CODE>HAVE_UNISTD_H</CODE> if the system has <TT>`unistd.h'</TT>. This macro 
  is obsolete; instead, use <SAMP>`AC_CHECK_HEADERS(unistd.h)'</SAMP>. 
  <P></P>
  <P>The way to check if the system supports POSIX.1 is: </P><PRE>#if HAVE_UNISTD_H
# include &lt;sys/types.h&gt;
# include &lt;unistd.h&gt;
#endif

#ifdef _POSIX_VERSION
/* Code for POSIX.1 systems.  */
#endif
</PRE>
  <P><A name=IDX259></A><CODE>_POSIX_VERSION</CODE> is defined when 
  <TT>`unistd.h'</TT> is included on POSIX.1 systems. If there is no 
  <TT>`unistd.h'</TT>, it is definitely not a POSIX.1 system. However, some 
  non-POSIX.1 systems do have <TT>`unistd.h'</TT>. </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_USG</B> 
  <DD><A name=IDX260></A><A name=IDX261></A><A name=IDX262></A>Define 
  <CODE>USG</CODE> if the system does not have <TT>`strings.h'</TT>, 
  <CODE>rindex</CODE>, <CODE>bzero</CODE>, etc. This implies that it has 
  <TT>`string.h'</TT>, <CODE>strrchr</CODE>, <CODE>memset</CODE>, etc. 
  <P></P>
  <P>The symbol <CODE>USG</CODE> is obsolete. Instead of this macro, see the 
  example for <CODE>AC_HEADER_STDC</CODE>. </P></DD></DL>
<P></P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC31" 
name=SEC31>Generic Header Checks</A></H3>
<P>These macros are used to find system header files not covered by the 
particular test macros. If you need to check the contents of a header as well as 
find out whether it is present, you have to write your own test for it (see 
section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC40">Writing 
Tests</A>). </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CHECK_HEADER</B> <I>(<VAR>header-file</VAR>, 
  [<VAR>action-if-found</VAR> [, <VAR>action-if-not-found</VAR>]])</I> 
  <DD><A name=IDX263></A><A name=IDX264></A>If the system header file 
  <VAR>header-file</VAR> exists, execute shell commands 
  <VAR>action-if-found</VAR>, otherwise execute <VAR>action-if-not-found</VAR>. 
  If you just want to define a symbol if the header file is available, consider 
  using <CODE>AC_CHECK_HEADERS</CODE> instead. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CHECK_HEADERS</B> <I>(<VAR>header-file</VAR>... [, 
  <VAR>action-if-found</VAR> [, <VAR>action-if-not-found</VAR>]])</I> 
  <DD><A name=IDX265></A><A name=IDX266></A><A name=IDX267></A>For each given 
  system header file <VAR>header-file</VAR> in the whitespace-separated argument 
  list that exists, define <CODE>HAVE_<VAR>header-file</VAR></CODE> (in all 
  capitals). If <VAR>action-if-found</VAR> is given, it is additional shell code 
  to execute when one of the header files is found. You can give it a value of 
  <SAMP>`break'</SAMP> to break out of the loop on the first match. If 
  <VAR>action-if-not-found</VAR> is given, it is executed when one of the header 
  files is not found. </DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC32" 
name=SEC32>Structures</A></H2>
<P>The following macros check for certain structures or structure members. To 
check structures not listed here, use <CODE>AC_EGREP_CPP</CODE> (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC41">Examining 
Declarations</A>) or <CODE>AC_TRY_COMPILE</CODE> (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC42">Examining 
Syntax</A>). </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_HEADER_STAT</B> 
  <DD><A name=IDX268></A><A name=IDX269></A><A name=IDX270></A>If the macros 
  <CODE>S_ISDIR</CODE>, <CODE>S_ISREG</CODE> et al. defined in 
  <TT>`sys/stat.h'</TT> do not work properly (returning false positives), define 
  <CODE>STAT_MACROS_BROKEN</CODE>. This is the case on Tektronix UTekV, Amdahl 
  UTS and Motorola System V/88. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_HEADER_TIME</B> 
  <DD><A name=IDX271></A><A name=IDX272></A><A name=IDX273></A>If a program may 
  include both <TT>`time.h'</TT> and <TT>`sys/time.h'</TT>, define 
  <CODE>TIME_WITH_SYS_TIME</CODE>. On some older systems, <TT>`sys/time.h'</TT> 
  includes <TT>`time.h'</TT>, but <TT>`time.h'</TT> is not protected against 
  multiple inclusion, so programs should not explicitly include both files. This 
  macro is useful in programs that use, for example, <CODE>struct timeval</CODE> 
  or <CODE>struct timezone</CODE> as well as <CODE>struct tm</CODE>. It is best 
  used in conjunction with <CODE>HAVE_SYS_TIME_H</CODE>, which can be checked 
  for using <CODE>AC_CHECK_HEADERS(sys/time.h)</CODE>. 
  <P></P><PRE>#if TIME_WITH_SYS_TIME
# include &lt;sys/time.h&gt;
# include &lt;time.h&gt;
#else
# if HAVE_SYS_TIME_H
#  include &lt;sys/time.h&gt;
# else
#  include &lt;time.h&gt;
# endif
#endif
</PRE></DD></DL>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_STRUCT_ST_BLKSIZE</B> 
  <DD><A name=IDX274></A><A name=IDX275></A><A name=IDX276></A>If <CODE>struct 
  stat</CODE> contains an <CODE>st_blksize</CODE> member, define 
  <CODE>HAVE_ST_BLKSIZE</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_STRUCT_ST_BLOCKS</B> 
  <DD><A name=IDX277></A><A name=IDX278></A><A name=IDX279></A><A 
  name=IDX280></A>If <CODE>struct stat</CODE> contains an <CODE>st_blocks</CODE> 
  member, define <CODE>HAVE_ST_BLOCKS</CODE>. Otherwise, add 
  <SAMP>`fileblocks.o'</SAMP> to the output variable <CODE>LIBOBJS</CODE>. 
</DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_STRUCT_ST_RDEV</B> 
  <DD><A name=IDX281></A><A name=IDX282></A><A name=IDX283></A>If <CODE>struct 
  stat</CODE> contains an <CODE>st_rdev</CODE> member, define 
  <CODE>HAVE_ST_RDEV</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_STRUCT_TM</B> 
  <DD><A name=IDX284></A><A name=IDX285></A><A name=IDX286></A>If 
  <TT>`time.h'</TT> does not define <CODE>struct tm</CODE>, define 
  <CODE>TM_IN_SYS_TIME</CODE>, which means that including <TT>`sys/time.h'</TT> 
  had better define <CODE>struct tm</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_STRUCT_TIMEZONE</B> 
  <DD><A name=IDX287></A><A name=IDX288></A><A name=IDX289></A><A 
  name=IDX290></A>Figure out how to get the current timezone. If <CODE>struct 
  tm</CODE> has a <CODE>tm_zone</CODE> member, define <CODE>HAVE_TM_ZONE</CODE>. 
  Otherwise, if the external array <CODE>tzname</CODE> is found, define 
  <CODE>HAVE_TZNAME</CODE>. </DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC33" 
name=SEC33>Typedefs</A></H2>
<P>The following macros check for C typedefs. If there is no macro specifically 
defined to check for a typedef you need, and you don't need to check for any 
special properties of it, then you can use a general typedef check macro. </P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC34" 
name=SEC34>Particular Typedef Checks</A></H3>
<P>These macros check for particular C typedefs in <TT>`sys/types.h'</TT> and 
<TT>`stdlib.h'</TT> (if it exists). </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_TYPE_GETGROUPS</B> 
  <DD><A name=IDX291></A><A name=IDX292></A><A name=IDX293></A>Define 
  <CODE>GETGROUPS_T</CODE> to be whichever of <CODE>gid_t</CODE> or 
  <CODE>int</CODE> is the base type of the array argument to 
  <CODE>getgroups</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_TYPE_MODE_T</B> 
  <DD><A name=IDX294></A><A name=IDX295></A><A name=IDX296></A>If 
  <CODE>mode_t</CODE> is not defined, define <CODE>mode_t</CODE> to be 
  <CODE>int</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_TYPE_OFF_T</B> 
  <DD><A name=IDX297></A><A name=IDX298></A><A name=IDX299></A>If 
  <CODE>off_t</CODE> is not defined, define <CODE>off_t</CODE> to be 
  <CODE>long</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_TYPE_PID_T</B> 
  <DD><A name=IDX300></A><A name=IDX301></A><A name=IDX302></A>If 
  <CODE>pid_t</CODE> is not defined, define <CODE>pid_t</CODE> to be 
  <CODE>int</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_TYPE_SIGNAL</B> 
  <DD><A name=IDX303></A><A name=IDX304></A><A name=IDX305></A>If 
  <TT>`signal.h'</TT> declares <CODE>signal</CODE> as returning a pointer to a 
  function returning <CODE>void</CODE>, define <CODE>RETSIGTYPE</CODE> to be 
  <CODE>void</CODE>; otherwise, define it to be <CODE>int</CODE>. 
  <P></P>
  <P>Define signal handlers as returning type <CODE>RETSIGTYPE</CODE>: </P><PRE>RETSIGTYPE
hup_handler ()
{
...
}
</PRE></DD></DL>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_TYPE_SIZE_T</B> 
  <DD><A name=IDX306></A><A name=IDX307></A><A name=IDX308></A>If 
  <CODE>size_t</CODE> is not defined, define <CODE>size_t</CODE> to be 
  <CODE>unsigned</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_TYPE_UID_T</B> 
  <DD><A name=IDX309></A><A name=IDX310></A><A name=IDX311></A><A 
  name=IDX312></A>If <CODE>uid_t</CODE> is not defined, define 
  <CODE>uid_t</CODE> to be <CODE>int</CODE> and <CODE>gid_t</CODE> to be 
  <CODE>int</CODE>. </DD></DL>
<P></P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC35" 
name=SEC35>Generic Typedef Checks</A></H3>
<P>This macro is used to check for typedefs not covered by the particular test 
macros. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CHECK_TYPE</B> <I>(<VAR>type</VAR>, 
  <VAR>default</VAR>)</I> 
  <DD><A name=IDX313></A><A name=IDX314></A>If the type <VAR>type</VAR> is not 
  defined in <TT>`sys/types.h'</TT>, or <TT>`stdlib.h'</TT> or 
  <TT>`stddef.h'</TT> if they exist, define it to be the C (or C++) builtin type 
  <VAR>default</VAR>; e.g., <SAMP>`short'</SAMP> or <SAMP>`unsigned'</SAMP>. 
  </DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC36" 
name=SEC36>C Compiler Characteristics</A></H2>
<P>The following macros check for C compiler or machine architecture features. 
To check for characteristics not listed here, use <CODE>AC_TRY_COMPILE</CODE> 
(see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC42">Examining 
Syntax</A>) or <CODE>AC_TRY_RUN</CODE> (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC44">Checking 
Run Time Behavior</A>) </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_C_BIGENDIAN</B> 
  <DD><A name=IDX315></A><A name=IDX316></A><A name=IDX317></A>If words are 
  stored with the most significant byte first (like Motorola and SPARC, but not 
  Intel and VAX, CPUs), define <CODE>WORDS_BIGENDIAN</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_C_CONST</B> 
  <DD><A name=IDX318></A><A name=IDX319></A><A name=IDX320></A>If the C compiler 
  does not fully support the keyword <CODE>const</CODE>, define 
  <CODE>const</CODE> to be empty. Some C compilers that do not define 
  <CODE>__STDC__</CODE> do support <CODE>const</CODE>; some compilers that 
  define <CODE>__STDC__</CODE> do not completely support <CODE>const</CODE>. 
  Programs can simply use <CODE>const</CODE> as if every C compiler supported 
  it; for those that don't, the <TT>`Makefile'</TT> or configuration header file 
  will define it as empty. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_C_INLINE</B> 
  <DD><A name=IDX321></A><A name=IDX322></A><A name=IDX323></A>If the C compiler 
  supports the keyword <CODE>inline</CODE>, do nothing. Otherwise define 
  <CODE>inline</CODE> to <CODE>__inline__</CODE> or <CODE>__inline</CODE> if it 
  accepts one of those, otherwise define <CODE>inline</CODE> to be empty. 
</DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_C_CHAR_UNSIGNED</B> 
  <DD><A name=IDX324></A><A name=IDX325></A><A name=IDX326></A>If the C type 
  <CODE>char</CODE> is unsigned, define <CODE>__CHAR_UNSIGNED__</CODE>, unless 
  the C compiler predefines it. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_C_LONG_DOUBLE</B> 
  <DD><A name=IDX327></A><A name=IDX328></A><A name=IDX329></A>If the C compiler 
  supports the <CODE>long double</CODE> type, define 
  <CODE>HAVE_LONG_DOUBLE</CODE>. Some C compilers that do not define 
  <CODE>__STDC__</CODE> do support the <CODE>long double</CODE> type; some 
  compilers that define <CODE>__STDC__</CODE> do not support <CODE>long 
  double</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_C_STRINGIZE</B> 
  <DD><A name=IDX330></A><A name=IDX331></A><A name=IDX332></A>If the C 
  preprocessor supports the stringizing operator, define 
  <CODE>HAVE_STRINGIZE</CODE>. The stringizing operator is <SAMP>`#'</SAMP> and 
  is found in macros such as this: 
  <P></P><PRE>#define x(y) #y
</PRE></DD></DL>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CHECK_SIZEOF</B> <I>(<VAR>type</VAR> [, 
  <VAR>cross-size</VAR>])</I> 
  <DD><A name=IDX333></A><A name=IDX334></A>Define 
  <CODE>SIZEOF_<VAR>uctype</VAR></CODE> to be the size in bytes of the C (or 
  C++) builtin type <VAR>type</VAR>, e.g. <SAMP>`int'</SAMP> or <SAMP>`char 
  *'</SAMP>. If <SAMP>`type'</SAMP> is unknown to the compiler, it gets a size 
  of 0. <VAR>uctype</VAR> is <VAR>type</VAR>, with lowercase converted to 
  uppercase, spaces changed to underscores, and asterisks changed to 
  <SAMP>`P'</SAMP>. If cross-compiling, the value <VAR>cross-size</VAR> is used 
  if given, otherwise <CODE>configure</CODE> exits with an error message. 
  <P></P>
  <P>For example, the call <PRE>AC_CHECK_SIZEOF(int *)
</PRE>
  <P>defines <CODE>SIZEOF_INT_P</CODE> to be 8 on DEC Alpha AXP systems. 
  </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_INT_16_BITS</B> 
  <DD><A name=IDX335></A><A name=IDX336></A><A name=IDX337></A>If the C type 
  <CODE>int</CODE> is 16 bits wide, define <CODE>INT_16_BITS</CODE>. This macro 
  is obsolete; it is more general to use <SAMP>`AC_CHECK_SIZEOF(int)'</SAMP> 
  instead. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_LONG_64_BITS</B> 
  <DD><A name=IDX338></A><A name=IDX339></A><A name=IDX340></A>If the C type 
  <CODE>long int</CODE> is 64 bits wide, define <CODE>LONG_64_BITS</CODE>. This 
  macro is obsolete; it is more general to use 
  <SAMP>`AC_CHECK_SIZEOF(long)'</SAMP> instead. </DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC37" 
name=SEC37>Fortran 77 Compiler Characteristics</A></H2>
<P>The following macros check for Fortran 77 compiler characteristics. To check 
for characteristics not listed here, use <CODE>AC_TRY_COMPILE</CODE> (see 
section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC42">Examining 
Syntax</A>) or <CODE>AC_TRY_RUN</CODE> (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC44">Checking 
Run Time Behavior</A>), making sure to first set the current lanuage to Fortran 
77 <CODE>AC_LANG_FORTRAN77</CODE> (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC51">Language 
Choice</A>). </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_F77_LIBRARY_LDFLAGS</B> 
  <DD><A name=IDX341></A><A name=IDX342></A><A name=IDX343></A>Determine the 
  linker flags (e.g. <SAMP>`-L'</SAMP> and <SAMP>`-l'</SAMP>) for the 
  <EM>Fortran 77 intrinsic and run-time libraries</EM> that are required to 
  successfully link a Fortran 77 program or shared library. The output variable 
  <CODE>FLIBS</CODE> is set to these flags. 
  <P></P>
  <P>This macro is intended to be used in those situations when it is necessary 
  to mix, e.g. C++ and Fortran 77 source code into a single program or shared 
  library (see section `Mixing Fortran 77 With C and C++' in <CITE>GNU 
  Automake</CITE>). </P>
  <P>For example, if object files from a C++ and Fortran 77 compiler must be 
  linked together, then the C++ compiler/linker must be used for linking (since 
  special C++-ish things need to happen at link time like calling global 
  constructors, instantiating templates, enabling exception support, etc.). </P>
  <P>However, the Fortran 77 intrinsic and run-time libraries must be linked in 
  as well, but the C++ compiler/linker doesn't know by default how to add these 
  Fortran 77 libraries. Hence, the macro <CODE>AC_F77_LIBRARY_LDFLAGS</CODE> was 
  created to determine these Fortran 77 libraries. </P></DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC38" 
name=SEC38>System Services</A></H2>
<P>The following macros check for operating system services or capabilities. 
</P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CYGWIN</B> 
  <DD><A name=IDX344></A><A name=IDX345></A>Checks for the Cygwin environment. 
  If present, sets shell variable <CODE>CYGWIN</CODE> to <SAMP>`yes'</SAMP>. If 
  not present, sets <CODE>CYGWIN</CODE> to the empty string. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_EXEEXT</B> 
  <DD><A name=IDX346></A><A name=IDX347></A><A name=IDX348></A>Defines 
  substitute variable <CODE>EXEEXT</CODE> based on the output of the compiler, 
  after .c, .o, and .obj files have been excluded. Typically set to empty string 
  if Unix, <SAMP>`.exe'</SAMP> or <SAMP>`.EXE'</SAMP> if Win32. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_OBJEXT</B> 
  <DD><A name=IDX349></A><A name=IDX350></A><A name=IDX351></A>Defines 
  substitute variable <CODE>OBJEXT</CODE> based on the output of the compiler, 
  after .c files have been excluded. Typically set to <SAMP>`.o'</SAMP> if Unix, 
  <SAMP>`.obj'</SAMP> if Win32. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_MINGW32</B> 
  <DD><A name=IDX352></A><A name=IDX353></A>Checks for the MingW32 compiler 
  environment. If present, sets shell variable <CODE>MINGW32</CODE> to 
  <SAMP>`yes'</SAMP>. If not present, sets <CODE>MINGW32</CODE> to the empty 
  string. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PATH_X</B> 
  <DD><A name=IDX354></A><A name=IDX355></A>Try to locate the X Window System 
  include files and libraries. If the user gave the command line options 
  <SAMP>`--x-includes=<VAR>dir</VAR>'</SAMP> and 
  <SAMP>`--x-libraries=<VAR>dir</VAR>'</SAMP>, use those directories. If either 
  or both were not given, get the missing values by running <CODE>xmkmf</CODE> 
  on a trivial <TT>`Imakefile'</TT> and examining the <TT>`Makefile'</TT> that 
  it produces. If that fails (such as if <CODE>xmkmf</CODE> is not present), 
  look for them in several directories where they often reside. If either method 
  is successful, set the shell variables <CODE>x_includes</CODE> and 
  <CODE>x_libraries</CODE> to their locations, unless they are in directories 
  the compiler searches by default. 
  <P></P>
  <P>If both methods fail, or the user gave the command line option 
  <SAMP>`--without-x'</SAMP>, set the shell variable <CODE>no_x</CODE> to 
  <SAMP>`yes'</SAMP>; otherwise set it to the empty string. </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PATH_XTRA</B> 
  <DD><A name=IDX356></A><A name=IDX357></A><A name=IDX358></A><A 
  name=IDX359></A><A name=IDX360></A><A name=IDX361></A>An enhanced version of 
  <CODE>AC_PATH_X</CODE>. It adds the C compiler flags that X needs to output 
  variable <CODE>X_CFLAGS</CODE>, and the X linker flags to <CODE>X_LIBS</CODE>. 
  If X is not available, adds <SAMP>`-DX_DISPLAY_MISSING'</SAMP> to 
  <CODE>X_CFLAGS</CODE>. 
  <P></P>
  <P>This macro also checks for special libraries that some systems need in 
  order to compile X programs. It adds any that the system needs to output 
  variable <CODE>X_EXTRA_LIBS</CODE>. And it checks for special X11R6 libraries 
  that need to be linked with before <SAMP>`-lX11'</SAMP>, and adds any found to 
  the output variable <CODE>X_PRE_LIBS</CODE>. </P></DD></DL>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_SYS_INTERPRETER</B> 
  <DD><A name=IDX362></A><A name=IDX363></A>Check whether the system supports 
  starting scripts with a line of the form <SAMP>`#! /bin/csh'</SAMP> to select 
  the interpreter to use for the script. After running this macro, shell code in 
  <CODE>configure.in</CODE> can check the shell variable <CODE>interpval</CODE>; 
  it will be set to <SAMP>`yes'</SAMP> if the system supports <SAMP>`#!'</SAMP>, 
  <SAMP>`no'</SAMP> if not. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_SYS_LONG_FILE_NAMES</B> 
  <DD><A name=IDX364></A><A name=IDX365></A><A name=IDX366></A>If the system 
  supports file names longer than 14 characters, define 
  <CODE>HAVE_LONG_FILE_NAMES</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_SYS_RESTARTABLE_SYSCALLS</B> 
  <DD><A name=IDX367></A><A name=IDX368></A><A name=IDX369></A>If the system 
  automatically restarts a system call that is interrupted by a signal, define 
  <CODE>HAVE_RESTARTABLE_SYSCALLS</CODE>. </DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC39" 
name=SEC39>UNIX Variants</A></H2>
<P>The following macros check for certain operating systems that need special 
treatment for some programs, due to exceptional oddities in their header files 
or libraries. These macros are warts; they will be replaced by a more systematic 
approach, based on the functions they make available or the environments they 
provide. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_AIX</B> 
  <DD><A name=IDX370></A><A name=IDX371></A><A name=IDX372></A>If on AIX, define 
  <CODE>_ALL_SOURCE</CODE>. Allows the use of some BSD functions. Should be 
  called before any macros that run the C compiler. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_DYNIX_SEQ</B> 
  <DD><A name=IDX373></A><A name=IDX374></A>If on Dynix/PTX (Sequent UNIX), add 
  <SAMP>`-lseq'</SAMP> to output variable <CODE>LIBS</CODE>. This macro is 
  obsolete; instead, use <CODE>AC_FUNC_GETMNTENT</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_IRIX_SUN</B> 
  <DD><A name=IDX375></A><A name=IDX376></A>If on IRIX (Silicon Graphics UNIX), 
  add <SAMP>`-lsun'</SAMP> to output variable <CODE>LIBS</CODE>. This macro is 
  obsolete. If you were using it to get <CODE>getmntent</CODE>, use 
  <CODE>AC_FUNC_GETMNTENT</CODE> instead. If you used it for the NIS versions of 
  the password and group functions, use <SAMP>`AC_CHECK_LIB(sun, 
  getpwnam)'</SAMP>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_ISC_POSIX</B> 
  <DD><A name=IDX377></A><A name=IDX378></A><A name=IDX379></A><A 
  name=IDX380></A>If on a POSIXized ISC UNIX, define <CODE>_POSIX_SOURCE</CODE> 
  and add <SAMP>`-posix'</SAMP> (for the GNU C compiler) or <SAMP>`-Xp'</SAMP> 
  (for other C compilers) to output variable <CODE>CC</CODE>. This allows the 
  use of POSIX facilities. Must be called after <CODE>AC_PROG_CC</CODE> and 
  before any other macros that run the C compiler. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_MINIX</B> 
  <DD><A name=IDX381></A><A name=IDX382></A><A name=IDX383></A><A 
  name=IDX384></A><A name=IDX385></A>If on Minix, define <CODE>_MINIX</CODE> and 
  <CODE>_POSIX_SOURCE</CODE> and define <CODE>_POSIX_1_SOURCE</CODE> to be 2. 
  This allows the use of POSIX facilities. Should be called before any macros 
  that run the C compiler. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_SCO_INTL</B> 
  <DD><A name=IDX386></A><A name=IDX387></A><A name=IDX388></A>If on SCO UNIX, 
  add <SAMP>`-lintl'</SAMP> to output variable <CODE>LIBS</CODE>. This macro is 
  obsolete; instead, use <CODE>AC_FUNC_STRFTIME</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_XENIX_DIR</B> 
  <DD><A name=IDX389></A><A name=IDX390></A><A name=IDX391></A>If on Xenix, add 
  <SAMP>`-lx'</SAMP> to output variable <CODE>LIBS</CODE>. Also, if 
  <TT>`dirent.h'</TT> is being used, add <SAMP>`-ldir'</SAMP> to 
  <CODE>LIBS</CODE>. This macro is obsolete; use <CODE>AC_HEADER_DIRENT</CODE> 
  instead. </DD></DL>
<P></P>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC40" 
name=SEC40>Writing Tests</A></H1>
<P>If the existing feature tests don't do something you need, you have to write 
new ones. These macros are the building blocks. They provide ways for other 
macros to check whether various kinds of features are available and report the 
results. </P>
<P>This chapter contains some suggestions and some of the reasons why the 
existing tests are written the way they are. You can also learn a lot about how 
to write Autoconf tests by looking at the existing ones. If something goes wrong 
in one or more of the Autoconf tests, this information can help you understand 
the assumptions behind them, which might help you figure out how to best solve 
the problem. </P>
<P>These macros check the output of the C compiler system. They do not cache the 
results of their tests for future use (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC55">Caching 
Results</A>), because they don't know enough about the information they are 
checking for to generate a cache variable name. They also do not print any 
messages, for the same reason. The checks for particular kinds of C features 
call these macros and do cache their results and print messages about what 
they're checking for. </P>
<P>When you write a feature test that could be applicable to more than one 
software package, the best thing to do is encapsulate it in a new macro. See 
section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC59">Writing 
Macros</A>, for how to do that. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC41" 
name=SEC41>Examining Declarations</A></H2>
<P>The macro <CODE>AC_TRY_CPP</CODE> is used to check whether particular header 
files exist. You can check for one at a time, or more than one if you need 
several header files to all exist for some purpose. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_TRY_CPP</B> <I>(<VAR>includes</VAR>, 
  [<VAR>action-if-true</VAR> [, <VAR>action-if-false</VAR>]])</I> 
  <DD><A name=IDX392></A><A name=IDX393></A><VAR>includes</VAR> is C or C++ 
  <CODE>#include</CODE> statements and declarations, on which shell variable, 
  backquote, and backslash substitutions are performed. (Actually, it can be any 
  C program, but other statements are probably not useful.) If the preprocessor 
  produces no error messages while processing it, run shell commands 
  <VAR>action-if-true</VAR>. Otherwise run shell commands 
  <VAR>action-if-false</VAR>. 
  <P></P>
  <P>This macro uses <CODE>CPPFLAGS</CODE>, but not <CODE>CFLAGS</CODE>, because 
  <SAMP>`-g'</SAMP>, <SAMP>`-O'</SAMP>, etc. are not valid options to many C 
  preprocessors. </P></DD></DL>
<P></P>
<P>Here is how to find out whether a header file contains a particular 
declaration, such as a typedef, a structure, a structure member, or a function. 
Use <CODE>AC_EGREP_HEADER</CODE> instead of running <CODE>grep</CODE> directly 
on the header file; on some systems the symbol might be defined in another 
header file that the file you are checking <SAMP>`#include'</SAMP>s. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_EGREP_HEADER</B> <I>(<VAR>pattern</VAR>, 
  <VAR>header-file</VAR>, <VAR>action-if-found</VAR> [, 
  <VAR>action-if-not-found</VAR>])</I> 
  <DD><A name=IDX394></A><A name=IDX395></A>If the output of running the 
  preprocessor on the system header file <VAR>header-file</VAR> matches the 
  <CODE>egrep</CODE> regular expression <VAR>pattern</VAR>, execute shell 
  commands <VAR>action-if-found</VAR>, otherwise execute 
  <VAR>action-if-not-found</VAR>. </DD></DL>
<P></P>
<P>To check for C preprocessor symbols, either defined by header files or 
predefined by the C preprocessor, use <CODE>AC_EGREP_CPP</CODE>. Here is an 
example of the latter: </P><PRE>AC_EGREP_CPP(yes,
[#ifdef _AIX
  yes
#endif
], is_aix=yes, is_aix=no)
</PRE>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_EGREP_CPP</B> <I>(<VAR>pattern</VAR>, 
  <VAR>program</VAR>, [<VAR>action-if-found</VAR> [, 
  <VAR>action-if-not-found</VAR>]])</I> 
  <DD><A name=IDX396></A><A name=IDX397></A><VAR>program</VAR> is the text of a 
  C or C++ program, on which shell variable, backquote, and backslash 
  substitutions are performed. If the output of running the preprocessor on 
  <VAR>program</VAR> matches the <CODE>egrep</CODE> regular expression 
  <VAR>pattern</VAR>, execute shell commands <VAR>action-if-found</VAR>, 
  otherwise execute <VAR>action-if-not-found</VAR>. 
  <P></P>
  <P>This macro calls <CODE>AC_PROG_CPP</CODE> or <CODE>AC_PROG_CXXCPP</CODE> 
  (depending on which language is current, see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC51">Language 
  Choice</A>), if it hasn't been called already. </P></DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC42" 
name=SEC42>Examining Syntax</A></H2>
<P>To check for a syntax feature of the C, C++ or Fortran 77 compiler, such as 
whether it recognizes a certain keyword, use <CODE>AC_TRY_COMPILE</CODE> to try 
to compile a small program that uses that feature. You can also use it to check 
for structures and structure members that are not present on all systems. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_TRY_COMPILE</B> <I>(<VAR>includes</VAR>, 
  <VAR>function-body</VAR>, [<VAR>action-if-found</VAR> [, 
  <VAR>action-if-not-found</VAR>]])</I> 
  <DD><A name=IDX398></A><A name=IDX399></A>Create a C, C++ or Fortran 77 test 
  program (depending on which language is current, see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC51">Language 
  Choice</A>), to see whether a function whose body consists of 
  <VAR>function-body</VAR> can be compiled. 
  <P></P>
  <P>For C and C++, <VAR>includes</VAR> is any <CODE>#include</CODE> statements 
  needed by the code in <VAR>function-body</VAR> (<VAR>includes</VAR> will be 
  ignored if the currently selected language is Fortran 77). This macro also 
  uses <CODE>CFLAGS</CODE> or <CODE>CXXFLAGS</CODE> if either C or C++ is the 
  currently selected language, as well as <CODE>CPPFLAGS</CODE>, when compiling. 
  If Fortran 77 is the currently selected language then <CODE>FFLAGS</CODE> will 
  be used when compiling. </P>
  <P>If the file compiles successfully, run shell commands 
  <VAR>action-if-found</VAR>, otherwise run <VAR>action-if-not-found</VAR>. </P>
  <P>This macro does not try to link; use <CODE>AC_TRY_LINK</CODE> if you need 
  to do that (see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC43">Examining 
  Libraries</A>). </P></DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC43" 
name=SEC43>Examining Libraries</A></H2>
<P>To check for a library, a function, or a global variable, Autoconf 
<CODE>configure</CODE> scripts try to compile and link a small program that uses 
it. This is unlike Metaconfig, which by default uses <CODE>nm</CODE> or 
<CODE>ar</CODE> on the C library to try to figure out which functions are 
available. Trying to link with the function is usually a more reliable approach 
because it avoids dealing with the variations in the options and output formats 
of <CODE>nm</CODE> and <CODE>ar</CODE> and in the location of the standard 
libraries. It also allows configuring for cross-compilation or checking a 
function's runtime behavior if needed. On the other hand, it can be slower than 
scanning the libraries once. </P>
<P>A few systems have linkers that do not return a failure exit status when 
there are unresolved functions in the link. This bug makes the configuration 
scripts produced by Autoconf unusable on those systems. However, some of them 
can be given options that make the exit status correct. This is a problem that 
Autoconf does not currently handle automatically. If users encounter this 
problem, they might be able to solve it by setting <CODE>LDFLAGS</CODE> in the 
environment to pass whatever options the linker needs (for example, 
<SAMP>`-Wl,-dn'</SAMP> on MIPS RISC/OS). </P>
<P><CODE>AC_TRY_LINK</CODE> is used to compile test programs to test for 
functions and global variables. It is also used by <CODE>AC_CHECK_LIB</CODE> to 
check for libraries (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC25">Library 
Files</A>), by adding the library being checked for to <CODE>LIBS</CODE> 
temporarily and trying to link a small program. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_TRY_LINK</B> <I>(<VAR>includes</VAR>, 
  <VAR>function-body</VAR>, [<VAR>action-if-found</VAR> [, 
  <VAR>action-if-not-found</VAR>]])</I> 
  <DD><A name=IDX400></A><A name=IDX401></A>Depending on the current language 
  (see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC51">Language 
  Choice</A>), create a test program to see whether a function whose body 
  consists of <VAR>function-body</VAR> can be compiled and linked. 
  <P></P>
  <P>For C and C++, <VAR>includes</VAR> is any <CODE>#include</CODE> statements 
  needed by the code in <VAR>function-body</VAR> (<VAR>includes</VAR> will be 
  ignored if the currently selected language is Fortran 77). This macro also 
  uses <CODE>CFLAGS</CODE> or <CODE>CXXFLAGS</CODE> if either C or C++ is the 
  currently selected language, as well as <CODE>CPPFLAGS</CODE>, when compiling. 
  If Fortran 77 is the currently selected language then <CODE>FFLAGS</CODE> will 
  be used when compiling. However, both <CODE>LDFLAGS</CODE> and 
  <CODE>LIBS</CODE> will be used during linking in all cases. </P>
  <P>If the file compiles and links successfully, run shell commands 
  <VAR>action-if-found</VAR>, otherwise run <VAR>action-if-not-found</VAR>. 
  </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_TRY_LINK_FUNC</B> <I>(<VAR>function</VAR>, 
  [<VAR>action-if-found</VAR> [, <VAR>action-if-not-found</VAR>]])</I> 
  <DD><A name=IDX402></A><A name=IDX403></A>Depending on the current language 
  (see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC51">Language 
  Choice</A>), create a test program to see whether a program whose body 
  consists of a prototype of and a call to <VAR>function</VAR> can be compiled 
  and linked. 
  <P></P>
  <P>If the file compiles and links successfully, run shell commands 
  <VAR>action-if-found</VAR>, otherwise run <VAR>action-if-not-found</VAR>. 
  </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_TRY_LINK_FUNC</B> <I>(<VAR>function</VAR>, 
  [<VAR>action-if-found</VAR> [, <VAR>action-if-not-found</VAR>]])</I> 
  <DD><A name=IDX404></A><A name=IDX405></A>Attempt to compile and link a small 
  program that links with <VAR>function</VAR>. If the file compiles and links 
  successfully, run shell commands <VAR>action-if-found</VAR>, otherwise run 
  <VAR>action-if-not-found</VAR>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_COMPILE_CHECK</B> <I>(<VAR>echo-text</VAR>, 
  <VAR>includes</VAR>, <VAR>function-body</VAR>, <VAR>action-if-found</VAR> [, 
  <VAR>action-if-not-found</VAR>])</I> 
  <DD><A name=IDX406></A><A name=IDX407></A>This is an obsolete version of 
  <CODE>AC_TRY_LINK</CODE>, with the addition that it prints <SAMP>`checking for 
  <VAR>echo-text</VAR>'</SAMP> to the standard output first, if 
  <VAR>echo-text</VAR> is non-empty. Use <CODE>AC_MSG_CHECKING</CODE> and 
  <CODE>AC_MSG_RESULT</CODE> instead to print messages (see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC58">Printing 
  Messages</A>). </DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC44" 
name=SEC44>Checking Run Time Behavior</A></H2>
<P>Sometimes you need to find out how a system performs at run time, such as 
whether a given function has a certain capability or bug. If you can, make such 
checks when your program runs instead of when it is configured. You can check 
for things like the machine's endianness when your program initializes itself. 
</P>
<P>If you really need to test for a run-time behavior while configuring, you can 
write a test program to determine the result, and compile and run it using 
<CODE>AC_TRY_RUN</CODE>. Avoid running test programs if possible, because using 
them prevents people from configuring your package for cross-compiling. </P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC45" 
name=SEC45>Running Test Programs</A></H3>
<P>Use the following macro if you need to test run-time behavior of the system 
while configuring. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_TRY_RUN</B> <I>(<VAR>program</VAR>, 
  [<VAR>action-if-true</VAR> [, <VAR>action-if-false</VAR> [, 
  <VAR>action-if-cross-compiling</VAR>]]])</I> 
  <DD><A name=IDX408></A><A name=IDX409></A><VAR>program</VAR> is the text of a 
  C program, on which shell variable and backquote substitutions are performed. 
  If it compiles and links successfully and returns an exit status of 0 when 
  executed, run shell commands <VAR>action-if-true</VAR>. Otherwise run shell 
  commands <VAR>action-if-false</VAR>; the exit status of the program is 
  available in the shell variable <SAMP>`$?'</SAMP>. This macro uses 
  <CODE>CFLAGS</CODE> or <CODE>CXXFLAGS</CODE>, <CODE>CPPFLAGS</CODE>, 
  <CODE>LDFLAGS</CODE>, and <CODE>LIBS</CODE> when compiling. 
  <P></P>
  <P>If the C compiler being used does not produce executables that run on the 
  system where <CODE>configure</CODE> is being run, then the test program is not 
  run. If the optional shell commands <VAR>action-if-cross-compiling</VAR> are 
  given, they are run instead. Otherwise, <CODE>configure</CODE> prints an error 
  message and exits. </P></DD></DL>
<P></P>
<P>Try to provide a pessimistic default value to use when cross-compiling makes 
run-time tests impossible. You do this by passing the optional last argument to 
<CODE>AC_TRY_RUN</CODE>. <CODE>autoconf</CODE> prints a warning message when 
creating <CODE>configure</CODE> each time it encounters a call to 
<CODE>AC_TRY_RUN</CODE> with no <VAR>action-if-cross-compiling</VAR> argument 
given. You may ignore the warning, though users will not be able to configure 
your package for cross-compiling. A few of the macros distributed with Autoconf 
produce this warning message. </P>
<P>To configure for cross-compiling you can also choose a value for those 
parameters based on the canonical system name (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC67">Manual 
Configuration</A>). Alternatively, set up a test results cache file with the 
correct values for the target system (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC55">Caching 
Results</A>). </P>
<P>To provide a default for calls of <CODE>AC_TRY_RUN</CODE> that are embedded 
in other macros, including a few of the ones that come with Autoconf, you can 
call <CODE>AC_PROG_CC</CODE> before running them. Then, if the shell variable 
<CODE>cross_compiling</CODE> is set to <SAMP>`yes'</SAMP>, use an alternate 
method to get the results instead of calling the macros. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_C_CROSS</B> 
  <DD><A name=IDX410></A><A name=IDX411></A>This macro is obsolete; it does 
  nothing. </DD></DL>
<P></P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC46" 
name=SEC46>Guidelines for Test Programs</A></H3>
<P>Test programs should not write anything to the standard output. They should 
return 0 if the test succeeds, nonzero otherwise, so that success can be 
distinguished easily from a core dump or other failure; segmentation violations 
and other failures produce a nonzero exit status. Test programs should 
<CODE>exit</CODE>, not <CODE>return</CODE>, from <CODE>main</CODE>, because on 
some systems (old Suns, at least) the argument to <CODE>return</CODE> in 
<CODE>main</CODE> is ignored. </P>
<P>Test programs can use <CODE>#if</CODE> or <CODE>#ifdef</CODE> to check the 
values of preprocessor macros defined by tests that have already run. For 
example, if you call <CODE>AC_HEADER_STDC</CODE>, then later on in 
<TT>`configure.in'</TT> you can have a test program that includes an ANSI C 
header file conditionally: </P><PRE>#if STDC_HEADERS
# include &lt;stdlib.h&gt;
#endif
</PRE>
<P>If a test program needs to use or create a data file, give it a name that 
starts with <TT>`conftest'</TT>, such as <TT>`conftestdata'</TT>. The 
<CODE>configure</CODE> script cleans up by running <SAMP>`rm -rf 
conftest*'</SAMP> after running test programs and if the script is interrupted. 
</P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC47" 
name=SEC47>Test Functions</A></H3>
<P>Function declarations in test programs should have a prototype 
conditionalized for C++. In practice, though, test programs rarely need 
functions that take arguments. </P><PRE>#ifdef __cplusplus
foo(int i)
#else
foo(i) int i;
#endif
</PRE>
<P>Functions that test programs declare should also be conditionalized for C++, 
which requires <SAMP>`extern "C"'</SAMP> prototypes. Make sure to not include 
any header files containing clashing prototypes. </P><PRE>#ifdef __cplusplus
extern "C" void *malloc(size_t);
#else
char *malloc();
#endif
</PRE>
<P>If a test program calls a function with invalid parameters (just to see 
whether it exists), organize the program to ensure that it never invokes that 
function. You can do this by calling it in another function that is never 
invoked. You can't do it by putting it after a call to <CODE>exit</CODE>, 
because GCC version 2 knows that <CODE>exit</CODE> never returns and optimizes 
out any code that follows it in the same block. </P>
<P>If you include any header files, make sure to call the functions relevant to 
them with the correct number of arguments, even if they are just 0, to avoid 
compilation errors due to prototypes. GCC version 2 has internal prototypes for 
several functions that it automatically inlines; for example, 
<CODE>memcpy</CODE>. To avoid errors when checking for them, either pass them 
the correct number of arguments or redeclare them with a different return type 
(such as <CODE>char</CODE>). </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC48" 
name=SEC48>Portable Shell Programming</A></H2>
<P>When writing your own checks, there are some shell script programming 
techniques you should avoid in order to make your code portable. The Bourne 
shell and upward-compatible shells like Bash and the Korn shell have evolved 
over the years, but to prevent trouble, do not take advantage of features that 
were added after UNIX version 7, circa 1977. You should not use shell functions, 
aliases, negated character classes, or other features that are not found in all 
Bourne-compatible shells; restrict yourself to the lowest common denominator. 
Even <CODE>unset</CODE> is not supported by all shells! Also, include a space 
after the exclamation point in interpreter specifications, like this: <PRE>#! /usr/bin/perl
</PRE>
<P>If you omit the space before the path, then 4.2BSD based systems (such as 
Sequent DYNIX) will ignore the line, because they interpret <SAMP>`#! /'</SAMP> 
as a 4-byte magic number. </P>
<P>The set of external programs you should run in a <CODE>configure</CODE> 
script is fairly small. See section `Utilities in Makefiles' in <CITE>GNU Coding 
Standards</CITE>, for the list. This restriction allows users to start out with 
a fairly small set of programs and build the rest, avoiding too many 
interdependencies between packages. </P>
<P>Some of these external utilities have a portable subset of features, as well; 
for example, don't rely on <CODE>ln</CODE> having a <SAMP>`-f'</SAMP> option or 
<CODE>cat</CODE> having any options. <CODE>sed</CODE> scripts should not contain 
comments or use branch labels longer than 8 characters. Don't use <SAMP>`grep 
-s'</SAMP> to suppress output, because <SAMP>`grep -s'</SAMP> on System V does 
not suppress output, only error messages. Instead, redirect the standard output 
and standard error (in case the file doesn't exist) of <CODE>grep</CODE> to 
<TT>`/dev/null'</TT>. Check the exit status of <CODE>grep</CODE> to determine 
whether it found a match. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC49" 
name=SEC49>Testing Values and Files</A></H2>
<P><CODE>configure</CODE> scripts need to test properties of many files and 
strings. Here are some portability problems to watch out for when doing those 
tests. </P>
<P>The <CODE>test</CODE> program is the way to perform many file and string 
tests. It is often invoked by the alternate name <SAMP>`['</SAMP>, but using 
that name in Autoconf code is asking for trouble since it is an <CODE>m4</CODE> 
quote character. </P>
<P>If you need to make multiple checks using <CODE>test</CODE>, combine them 
with the shell operators <SAMP>`&amp;&amp;'</SAMP> and <SAMP>`||'</SAMP> instead 
of using the <CODE>test</CODE> operators <SAMP>`-a'</SAMP> and 
<SAMP>`-o'</SAMP>. On System V, the precedence of <SAMP>`-a'</SAMP> and 
<SAMP>`-o'</SAMP> is wrong relative to the unary operators; consequently, POSIX 
does not specify them, so using them is nonportable. If you combine 
<SAMP>`&amp;&amp;'</SAMP> and <SAMP>`||'</SAMP> in the same statement, keep in 
mind that they have equal precedence. </P>
<P>To enable <CODE>configure</CODE> scripts to support cross-compilation, they 
shouldn't do anything that tests features of the host system instead of the 
target system. But occasionally you may find it necessary to check whether some 
arbitrary file exists. To do so, use <SAMP>`test -f'</SAMP> or <SAMP>`test 
-r'</SAMP>. Do not use <SAMP>`test -x'</SAMP>, because 4.3BSD does not have it. 
</P>
<P>Another nonportable shell programming construction is <PRE><VAR>var</VAR>=${<VAR>var</VAR>:-<VAR>value</VAR>}
</PRE>
<P>The intent is to set <VAR>var</VAR> to <VAR>value</VAR> only if it is not 
already set, but if <VAR>var</VAR> has any value, even the empty string, to 
leave it alone. Old BSD shells, including the Ultrix <CODE>sh</CODE>, don't 
accept the colon, and complain and die. A portable equivalent is <PRE>: ${<VAR>var</VAR>=<VAR>value</VAR>}
</PRE>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC50" 
name=SEC50>Multiple Cases</A></H2>
<P>Some operations are accomplished in several possible ways, depending on the 
UNIX variant. Checking for them essentially requires a "case statement". 
Autoconf does not directly provide one; however, it is easy to simulate by using 
a shell variable to keep track of whether a way to perform the operation has 
been found yet. </P>
<P>Here is an example that uses the shell variable <CODE>fstype</CODE> to keep 
track of whether the remaining cases need to be checked. </P><PRE>AC_MSG_CHECKING(how to get filesystem type)
fstype=no
# The order of these tests is important.
AC_TRY_CPP([#include &lt;sys/statvfs.h&gt;
#include &lt;sys/fstyp.h&gt;], AC_DEFINE(FSTYPE_STATVFS) fstype=SVR4)
if test $fstype = no; then
AC_TRY_CPP([#include &lt;sys/statfs.h&gt;
#include &lt;sys/fstyp.h&gt;], AC_DEFINE(FSTYPE_USG_STATFS) fstype=SVR3)
fi
if test $fstype = no; then
AC_TRY_CPP([#include &lt;sys/statfs.h&gt;
#include &lt;sys/vmount.h&gt;], AC_DEFINE(FSTYPE_AIX_STATFS) fstype=AIX)
fi
# (more cases omitted here)
AC_MSG_RESULT($fstype)
</PRE>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC51" 
name=SEC51>Language Choice</A></H2>
<P>Packages that use both C and C++ need to test features of both compilers. 
Autoconf-generated <CODE>configure</CODE> scripts check for C features by 
default. The following macros determine which language's compiler is used in 
tests that follow in <TT>`configure.in'</TT>. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_LANG_C</B> 
  <DD><A name=IDX412></A><A name=IDX413></A>Do compilation tests using 
  <CODE>CC</CODE> and <CODE>CPP</CODE> and use extension <TT>`.c'</TT> for test 
  programs. Set the shell variable <CODE>cross_compiling</CODE> to the value 
  computed by <CODE>AC_PROG_CC</CODE> if it has been run, empty otherwise. 
</DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_LANG_CPLUSPLUS</B> 
  <DD><A name=IDX414></A><A name=IDX415></A>Do compilation tests using 
  <CODE>CXX</CODE> and <CODE>CXXCPP</CODE> and use extension <TT>`.C'</TT> for 
  test programs. Set the shell variable <CODE>cross_compiling</CODE> to the 
  value computed by <CODE>AC_PROG_CXX</CODE> if it has been run, empty 
  otherwise. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_LANG_FORTRAN77</B> 
  <DD><A name=IDX416></A><A name=IDX417></A>Do compilation tests using 
  <CODE>F77</CODE> and use extension <TT>`.f'</TT> for test programs. Set the 
  shell variable <CODE>cross_compiling</CODE> to the value computed by 
  <CODE>AC_PROG_F77</CODE> if it has been run, empty otherwise. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_LANG_SAVE</B> 
  <DD><A name=IDX418></A><A name=IDX419></A>Remember the current language (as 
  set by <CODE>AC_LANG_C</CODE>, <CODE>AC_LANG_CPLUSPLUS</CODE> or 
  <CODE>AC_LANG_FORTRAN77</CODE>) on a stack. Does not change which language is 
  current. Use this macro and <CODE>AC_LANG_RESTORE</CODE> in macros that need 
  to temporarily switch to a particular language. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_LANG_RESTORE</B> 
  <DD><A name=IDX420></A><A name=IDX421></A>Select the language that is saved on 
  the top of the stack, as set by <CODE>AC_LANG_SAVE</CODE>, and remove it from 
  the stack. This macro is equivalent to either <CODE>AC_LANG_C</CODE>, 
  <CODE>AC_LANG_CPLUSPLUS</CODE> or <CODE>AC_LANG_FORTRAN77</CODE>, whichever 
  had been run most recently when <CODE>AC_LANG_SAVE</CODE> was last called. 
  <P></P>
  <P>Do not call this macro more times than <CODE>AC_LANG_SAVE</CODE>. 
</P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_REQUIRE_CPP</B> 
  <DD><A name=IDX422></A><A name=IDX423></A>Ensure that whichever preprocessor 
  would currently be used for tests has been found. Calls 
  <CODE>AC_REQUIRE</CODE> (see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC64">Prerequisite 
  Macros</A>) with an argument of either <CODE>AC_PROG_CPP</CODE> or 
  <CODE>AC_PROG_CXXCPP</CODE>, depending on which language is current. </DD></DL>
<P></P>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC52" 
name=SEC52>Results of Tests</A></H1>
<P>Once <CODE>configure</CODE> has determined whether a feature exists, what can 
it do to record that information? There are four sorts of things it can do: 
define a C preprocessor symbol, set a variable in the output files, save the 
result in a cache file for future <CODE>configure</CODE> runs, and print a 
message letting the user know the result of the test. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC53" 
name=SEC53>Defining C Preprocessor Symbols</A></H2>
<P>A common action to take in response to a feature test is to define a C 
preprocessor symbol indicating the results of the test. That is done by calling 
<CODE>AC_DEFINE</CODE> or <CODE>AC_DEFINE_UNQUOTED</CODE>. </P>
<P>By default, <CODE>AC_OUTPUT</CODE> places the symbols defined by these macros 
into the output variable <CODE>DEFS</CODE>, which contains an option 
<SAMP>`-D<VAR>symbol</VAR>=<VAR>value</VAR>'</SAMP> for each symbol defined. 
Unlike in Autoconf version 1, there is no variable <CODE>DEFS</CODE> defined 
while <CODE>configure</CODE> is running. To check whether Autoconf macros have 
already defined a certain C preprocessor symbol, test the value of the 
appropriate cache variable, as in this example: </P><PRE>AC_CHECK_FUNC(vprintf, AC_DEFINE(HAVE_VPRINTF))
if test "$ac_cv_func_vprintf" != yes; then
AC_CHECK_FUNC(_doprnt, AC_DEFINE(HAVE_DOPRNT))
fi
</PRE>
<P>If <CODE>AC_CONFIG_HEADER</CODE> has been called, then instead of creating 
<CODE>DEFS</CODE>, <CODE>AC_OUTPUT</CODE> creates a header file by substituting 
the correct values into <CODE>#define</CODE> statements in a template file. See 
section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC15">Configuration 
Header Files</A>, for more information about this kind of output. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_DEFINE</B> <I>(<VAR>variable</VAR> [, <VAR>value</VAR> 
  [, <VAR>description</VAR>]])</I> 
  <DD><A name=IDX424></A><A name=IDX425></A>Define C preprocessor variable 
  <VAR>variable</VAR>. If <VAR>value</VAR> is given, set <VAR>variable</VAR> to 
  that value (verbatim), otherwise set it to 1. <VAR>value</VAR> should not 
  contain literal newlines, and if you are not using 
  <CODE>AC_CONFIG_HEADER</CODE> it should not contain any <SAMP>`#'</SAMP> 
  characters, as <CODE>make</CODE> tends to eat them. To use a shell variable 
  (which you need to do in order to define a value containing the 
  <CODE>m4</CODE> quote characters <SAMP>`['</SAMP> or <SAMP>`]'</SAMP>), use 
  <CODE>AC_DEFINE_UNQUOTED</CODE> instead. <VAR>description</VAR> is only useful 
  if you are using <CODE>AC_CONFIG_HEADER</CODE>. In this case, 
  <VAR>description</VAR> is put into the generated <TT>`config.h.in'</TT> as the 
  comment before the macro define; the macro need not be mentioned in 
  <TT>`acconfig.h'</TT>. The following example defines the C preprocessor 
  variable <CODE>EQUATION</CODE> to be the string constant <SAMP>`"$a &gt; 
  $b"'</SAMP>: 
  <P></P><PRE>AC_DEFINE(EQUATION, "$a &gt; $b")
</PRE></DD></DL>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_DEFINE_UNQUOTED</B> <I>(<VAR>variable</VAR> [, 
  <VAR>value</VAR> [, <VAR>description</VAR>]])</I> 
  <DD><A name=IDX426></A><A name=IDX427></A>Like <CODE>AC_DEFINE</CODE>, but 
  three shell expansions are performed--once--on <VAR>variable</VAR> and 
  <VAR>value</VAR>: variable expansion (<SAMP>`$'</SAMP>), command substitution 
  (<SAMP>``'</SAMP>), and backslash escaping (<SAMP>`\'</SAMP>). Single and 
  double quote characters in the value have no special meaning. Use this macro 
  instead of <CODE>AC_DEFINE</CODE> when <VAR>variable</VAR> or <VAR>value</VAR> 
  is a shell variable. Examples: 
  <P></P><PRE>AC_DEFINE_UNQUOTED(config_machfile, "${machfile}")
AC_DEFINE_UNQUOTED(GETGROUPS_T, $ac_cv_type_getgroups)
AC_DEFINE_UNQUOTED(${ac_tr_hdr})
</PRE></DD></DL>
<P>Due to the syntactical bizarreness of the Bourne shell, do not use semicolons 
to separate <CODE>AC_DEFINE</CODE> or <CODE>AC_DEFINE_UNQUOTED</CODE> calls from 
other macro calls or shell code; that can cause syntax errors in the resulting 
<CODE>configure</CODE> script. Use either spaces or newlines. That is, do this: 
</P><PRE>AC_CHECK_HEADER(elf.h, AC_DEFINE(SVR4) LIBS="$LIBS -lelf")
</PRE>
<P>or this: </P><PRE>AC_CHECK_HEADER(elf.h,
  AC_DEFINE(SVR4)
  LIBS="$LIBS -lelf")
</PRE>
<P>instead of this: </P><PRE>AC_CHECK_HEADER(elf.h, AC_DEFINE(SVR4); LIBS="$LIBS -lelf")
</PRE>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC54" 
name=SEC54>Setting Output Variables</A></H2>
<P>One way to record the results of tests is to set <EM>output variables</EM>, 
which are shell variables whose values are substituted into files that 
<CODE>configure</CODE> outputs. The two macros below create new output 
variables. See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC12">Preset 
Output Variables</A>, for a list of output variables that are always available. 
</P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_SUBST</B> <I>(<VAR>variable</VAR>)</I> 
  <DD><A name=IDX428></A><A name=IDX429></A>Create an output variable from a 
  shell variable. Make <CODE>AC_OUTPUT</CODE> substitute the variable 
  <VAR>variable</VAR> into output files (typically one or more 
  <TT>`Makefile'</TT>s). This means that <CODE>AC_OUTPUT</CODE> will replace 
  instances of <SAMP>`@<VAR>variable</VAR>@'</SAMP> in input files with the 
  value that the shell variable <VAR>variable</VAR> has when 
  <CODE>AC_OUTPUT</CODE> is called. The value of <VAR>variable</VAR> should not 
  contain literal newlines. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_SUBST_FILE</B> <I>(<VAR>variable</VAR>)</I> 
  <DD><A name=IDX430></A><A name=IDX431></A>Another way to create an output 
  variable from a shell variable. Make <CODE>AC_OUTPUT</CODE> insert (without 
  substitutions) the contents of the file named by shell variable 
  <VAR>variable</VAR> into output files. This means that <CODE>AC_OUTPUT</CODE> 
  will replace instances of <SAMP>`@<VAR>variable</VAR>@'</SAMP> in output files 
  (such as <TT>`Makefile.in'</TT>) with the contents of the file that the shell 
  variable <VAR>variable</VAR> names when <CODE>AC_OUTPUT</CODE> is called. Set 
  the variable to <TT>`/dev/null'</TT> for cases that do not have a file to 
  insert. 
  <P></P>
  <P>This macro is useful for inserting <TT>`Makefile'</TT> fragments containing 
  special dependencies or other <CODE>make</CODE> directives for particular host 
  or target types into <TT>`Makefile'</TT>s. For example, 
  <TT>`configure.in'</TT> could contain: </P><PRE>AC_SUBST_FILE(host_frag)dnl
host_frag=$srcdir/conf/sun4.mh
</PRE>
  <P>and then a <TT>`Makefile.in'</TT> could contain: </P><PRE>@host_frag@
</PRE></DD></DL>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC55" 
name=SEC55>Caching Results</A></H2>
<P>To avoid checking for the same features repeatedly in various 
<CODE>configure</CODE> scripts (or repeated runs of one script), 
<CODE>configure</CODE> saves the results of many of its checks in a <EM>cache 
file</EM>. If, when a <CODE>configure</CODE> script runs, it finds a cache file, 
it reads from it the results from previous runs and avoids rerunning those 
checks. As a result, <CODE>configure</CODE> can run much faster than if it had 
to perform all of the checks every time. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CACHE_VAL</B> <I>(<VAR>cache-id</VAR>, 
  <VAR>commands-to-set-it</VAR>)</I> 
  <DD><A name=IDX432></A><A name=IDX433></A>Ensure that the results of the check 
  identified by <VAR>cache-id</VAR> are available. If the results of the check 
  were in the cache file that was read, and <CODE>configure</CODE> was not given 
  the <SAMP>`--quiet'</SAMP> or <SAMP>`--silent'</SAMP> option, print a message 
  saying that the result was cached; otherwise, run the shell commands 
  <VAR>commands-to-set-it</VAR>. Those commands should have no side effects 
  except for setting the variable <VAR>cache-id</VAR>. In particular, they 
  should not call <CODE>AC_DEFINE</CODE>; the code that follows the call to 
  <CODE>AC_CACHE_VAL</CODE> should do that, based on the cached value. Also, 
  they should not print any messages, for example with 
  <CODE>AC_MSG_CHECKING</CODE>; do that before calling 
  <CODE>AC_CACHE_VAL</CODE>, so the messages are printed regardless of whether 
  the results of the check are retrieved from the cache or determined by running 
  the shell commands. If the shell commands are run to determine the value, the 
  value will be saved in the cache file just before <CODE>configure</CODE> 
  creates its output files. See section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC56">Cache 
  Variable Names</A>, for how to choose the name of the <VAR>cache-id</VAR> 
  variable. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CACHE_CHECK</B> <I>(<VAR>message</VAR>, 
  <VAR>cache-id</VAR>, <VAR>commands</VAR>)</I> 
  <DD><A name=IDX434></A><A name=IDX435></A>A wrapper for 
  <CODE>AC_CACHE_VAL</CODE> that takes care of printing the messages. This macro 
  provides a convenient shorthand for the most common way to use these macros. 
  It calls <CODE>AC_MSG_CHECKING</CODE> for <VAR>message</VAR>, then 
  <CODE>AC_CACHE_VAL</CODE> with the <VAR>cache-id</VAR> and <VAR>commands</VAR> 
  arguments, and <CODE>AC_MSG_RESULT</CODE> with <VAR>cache-id</VAR>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CACHE_LOAD</B> 
  <DD><A name=IDX436></A><A name=IDX437></A>Loads values from existing cache 
  file, or creates a new cache file if a cache file is not found. Called 
  automatically from <CODE>AC_INIT</CODE>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CACHE_SAVE</B> 
  <DD><A name=IDX438></A><A name=IDX439></A>Flushes all cached values to the 
  cache file. Called automatically from <CODE>AC_OUTPUT</CODE>, but it can be 
  quite useful to call <CODE>AC_CACHE_SAVE</CODE> at key points in configure.in. 
  Doing so checkpoints the cache in case of an early configure script abort. 
  </DD></DL>
<P></P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC56" 
name=SEC56>Cache Variable Names</A></H3>
<P>The names of cache variables should have the following format: </P><PRE><VAR>package-prefix</VAR>_cv_<VAR>value-type</VAR>_<VAR>specific-value</VAR>[_<VAR>additional-options</VAR>]
</PRE>
<P>for example, <SAMP>`ac_cv_header_stat_broken'</SAMP> or 
<SAMP>`ac_cv_prog_gcc_traditional'</SAMP>. The parts of the variable name are: 
</P>
<DL compact>
  <DT><VAR>package-prefix</VAR> 
  <DD>An abbreviation for your package or organization; the same prefix you 
  begin local Autoconf macros with, except lowercase by convention. For cache 
  values used by the distributed Autoconf macros, this value is 
  <SAMP>`ac'</SAMP>. 
  <DT><CODE>_cv_</CODE> 
  <DD>Indicates that this shell variable is a cache value. 
  <DT><VAR>value-type</VAR> 
  <DD>A convention for classifying cache values, to produce a rational naming 
  system. The values used in Autoconf are listed in section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC61">Macro 
  Names</A>. 
  <DT><VAR>specific-value</VAR> 
  <DD>Which member of the class of cache values this test applies to. For 
  example, which function (<SAMP>`alloca'</SAMP>), program (<SAMP>`gcc'</SAMP>), 
  or output variable (<SAMP>`INSTALL'</SAMP>). 
  <DT><VAR>additional-options</VAR> 
  <DD>Any particular behavior of the specific member that this test applies to. 
  For example, <SAMP>`broken'</SAMP> or <SAMP>`set'</SAMP>. This part of the 
  name may be omitted if it does not apply. </DD></DL>
<P>The values assigned to cache variables may not contain newlines. Usually, 
their values will be boolean (<SAMP>`yes'</SAMP> or <SAMP>`no'</SAMP>) or the 
names of files or functions; so this is not an important restriction. </P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC57" 
name=SEC57>Cache Files</A></H3>
<P>A cache file is a shell script that caches the results of configure tests run 
on one system so they can be shared between configure scripts and configure 
runs. It is not useful on other systems. If its contents are invalid for some 
reason, the user may delete or edit it. </P>
<P>By default, configure uses <TT>`./config.cache'</TT> as the cache file, 
creating it if it does not exist already. <CODE>configure</CODE> accepts the 
<SAMP>`--cache-file=<VAR>file</VAR>'</SAMP> option to use a different cache 
file; that is what <CODE>configure</CODE> does when it calls 
<CODE>configure</CODE> scripts in subdirectories, so they share the cache. See 
section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC18">Configuring 
Other Packages in Subdirectories</A>, for information on configuring 
subdirectories with the <CODE>AC_CONFIG_SUBDIRS</CODE> macro. </P>
<P>Giving <SAMP>`--cache-file=/dev/null'</SAMP> disables caching, for debugging 
<CODE>configure</CODE>. <TT>`config.status'</TT> only pays attention to the 
cache file if it is given the <SAMP>`--recheck'</SAMP> option, which makes it 
rerun <CODE>configure</CODE>. If you are anticipating a long debugging period, 
you can also disable cache loading and saving for a <CODE>configure</CODE> 
script by redefining the cache macros at the start of <TT>`configure.in'</TT>: 
</P><PRE>define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
AC_INIT(whatever)
 ... rest of configure.in ...
</PRE>
<P>It is wrong to try to distribute cache files for particular system types. 
There is too much room for error in doing that, and too much administrative 
overhead in maintaining them. For any features that can't be guessed 
automatically, use the standard method of the canonical system type and linking 
files (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC67">Manual 
Configuration</A>). </P>
<P>The cache file on a particular system will gradually accumulate whenever 
someone runs a <CODE>configure</CODE> script; it will be initially nonexistent. 
Running <CODE>configure</CODE> merges the new cache results with the existing 
cache file. The site initialization script can specify a site-wide cache file to 
use instead of the default, to make it work transparently, as long as the same C 
compiler is used every time (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC80">Setting 
Site Defaults</A>). </P>
<P>If your configure script, or a macro called from configure.in, happens to 
abort the configure process, it may be useful to checkpoint the cache a few 
times at key points. Doing so will reduce the amount of time it takes to re-run 
the configure script with (hopefully) the error that caused the previous abort 
corrected. </P><PRE> ... AC_INIT, etc. ...
dnl checks for programs
AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
 ... more program checks ...
AC_CACHE_SAVE

dnl checks for libraries
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(socket, connect)
 ... more lib checks ...
AC_CACHE_SAVE

dnl Might abort...
AM_PATH_GTK(1.0.2, , exit 1)
AM_PATH_GTKMM(0.9.5, , exit 1)
</PRE>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC58" 
name=SEC58>Printing Messages</A></H2>
<P><CODE>configure</CODE> scripts need to give users running them several kinds 
of information. The following macros print messages in ways appropriate for each 
kind. The arguments to all of them get enclosed in shell double quotes, so the 
shell performs variable and backquote substitution on them. You can print a 
message containing a comma by quoting the message with the <CODE>m4</CODE> quote 
characters: </P><PRE>AC_MSG_RESULT([never mind, I found the BASIC compiler])
</PRE>
<P>These macros are all wrappers around the <CODE>echo</CODE> shell command. 
<CODE>configure</CODE> scripts should rarely need to run <CODE>echo</CODE> 
directly to print messages for the user. Using these macros makes it easy to 
change how and when each kind of message is printed; such changes need only be 
made to the macro definitions, and all of the callers change automatically. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_MSG_CHECKING</B> 
  <I>(<VAR>feature-description</VAR>)</I> 
  <DD><A name=IDX440></A><A name=IDX441></A>Notify the user that 
  <CODE>configure</CODE> is checking for a particular feature. This macro prints 
  a message that starts with <SAMP>`checking '</SAMP> and ends with 
  <SAMP>`...'</SAMP> and no newline. It must be followed by a call to 
  <CODE>AC_MSG_RESULT</CODE> to print the result of the check and the newline. 
  The <VAR>feature-description</VAR> should be something like <SAMP>`whether the 
  Fortran compiler accepts C++ comments'</SAMP> or <SAMP>`for c89'</SAMP>. 
  <P></P>
  <P>This macro prints nothing if <CODE>configure</CODE> is run with the 
  <SAMP>`--quiet'</SAMP> or <SAMP>`--silent'</SAMP> option. </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_MSG_RESULT</B> <I>(<VAR>result-description</VAR>)</I> 
  <DD><A name=IDX442></A><A name=IDX443></A>Notify the user of the results of a 
  check. <VAR>result-description</VAR> is almost always the value of the cache 
  variable for the check, typically <SAMP>`yes'</SAMP>, <SAMP>`no'</SAMP>, or a 
  file name. This macro should follow a call to <CODE>AC_MSG_CHECKING</CODE>, 
  and the <VAR>result-description</VAR> should be the completion of the message 
  printed by the call to <CODE>AC_MSG_CHECKING</CODE>. 
  <P></P>
  <P>This macro prints nothing if <CODE>configure</CODE> is run with the 
  <SAMP>`--quiet'</SAMP> or <SAMP>`--silent'</SAMP> option. </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_MSG_ERROR</B> <I>(<VAR>error-description</VAR>)</I> 
  <DD><A name=IDX444></A><A name=IDX445></A>Notify the user of an error that 
  prevents <CODE>configure</CODE> from completing. This macro prints an error 
  message on the standard error output and exits <CODE>configure</CODE> with a 
  nonzero status. <VAR>error-description</VAR> should be something like 
  <SAMP>`invalid value $HOME for \$HOME'</SAMP>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_MSG_WARN</B> <I>(<VAR>problem-description</VAR>)</I> 
  <DD><A name=IDX446></A><A name=IDX447></A>Notify the <CODE>configure</CODE> 
  user of a possible problem. This macro prints the message on the standard 
  error output; <CODE>configure</CODE> continues running afterward, so macros 
  that call <CODE>AC_MSG_WARN</CODE> should provide a default (back-up) behavior 
  for the situations they warn about. <VAR>problem-description</VAR> should be 
  something like <SAMP>`ln -s seems to make hard links'</SAMP>. </DD></DL>
<P></P>
<P>The following two macros are an obsolete alternative to 
<CODE>AC_MSG_CHECKING</CODE> and <CODE>AC_MSG_RESULT</CODE>. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CHECKING</B> <I>(<VAR>feature-description</VAR>)</I> 
  <DD><A name=IDX448></A><A name=IDX449></A>This macro is similar to 
  <CODE>AC_MSG_CHECKING</CODE>, except that it prints a newline after the 
  <VAR>feature-description</VAR>. It is useful mainly to print a general 
  description of the overall purpose of a group of feature checks, e.g., 
  <P></P><PRE>AC_CHECKING(if stack overflow is detectable)
</PRE></DD></DL>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_VERBOSE</B> <I>(<VAR>result-description</VAR>)</I> 
  <DD><A name=IDX450></A><A name=IDX451></A>This macro is similar to 
  <CODE>AC_MSG_RESULT</CODE>, except that it is meant to follow a call to 
  <CODE>AC_CHECKING</CODE> instead of <CODE>AC_MSG_CHECKING</CODE>; it starts 
  the message it prints with a tab. It is considered obsolete. </DD></DL>
<P></P>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC59" 
name=SEC59>Writing Macros</A></H1>
<P>When you write a feature test that could be applicable to more than one 
software package, the best thing to do is encapsulate it in a new macro. Here 
are some instructions and guidelines for writing Autoconf macros. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC60" 
name=SEC60>Macro Definitions</A></H2>
<P><A name=IDX452></A>Autoconf macros are defined using the 
<CODE>AC_DEFUN</CODE> macro, which is similar to the <CODE>m4</CODE> builtin 
<CODE>define</CODE> macro. In addition to defining a macro, 
<CODE>AC_DEFUN</CODE> adds to it some code which is used to constrain the order 
in which macros are called (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC64">Prerequisite 
Macros</A>). </P>
<P>An Autoconf macro definition looks like this: </P><PRE>AC_DEFUN(<VAR>macro-name</VAR>, [<VAR>macro-body</VAR>])
</PRE>
<P>The square brackets here do not indicate optional text: they should literally 
be present in the macro definition to avoid macro expansion problems (see 
section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC62">Quoting</A>). 
You can refer to any arguments passed to the macro as <SAMP>`$1'</SAMP>, 
<SAMP>`$2'</SAMP>, etc. </P>
<P>To introduce comments in <CODE>m4</CODE>, use the <CODE>m4</CODE> builtin 
<CODE>dnl</CODE>; it causes <CODE>m4</CODE> to discard the text through the next 
newline. It is not needed between macro definitions in <TT>`acsite.m4'</TT> and 
<TT>`aclocal.m4'</TT>, because all output is discarded until 
<CODE>AC_INIT</CODE> is called. </P>
<P>See section `How to define new macros' in <CITE>GNU m4</CITE>, for more 
complete information on writing <CODE>m4</CODE> macros. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC61" 
name=SEC61>Macro Names</A></H2>
<P>All of the Autoconf macros have all-uppercase names starting with 
<SAMP>`AC_'</SAMP> to prevent them from accidentally conflicting with other 
text. All shell variables that they use for internal purposes have 
mostly-lowercase names starting with <SAMP>`ac_'</SAMP>. To ensure that your 
macros don't conflict with present or future Autoconf macros, you should prefix 
your own macro names and any shell variables they use with some other sequence. 
Possibilities include your initials, or an abbreviation for the name of your 
organization or software package. </P>
<P>Most of the Autoconf macros' names follow a structured naming convention that 
indicates the kind of feature check by the name. The macro names consist of 
several words, separated by underscores, going from most general to most 
specific. The names of their cache variables use the same convention (see 
section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC56">Cache 
Variable Names</A>, for more information on them). </P>
<P>The first word of the name after <SAMP>`AC_'</SAMP> usually tells the 
category of feature being tested. Here are the categories used in Autoconf for 
specific test macros, the kind of macro that you are more likely to write. They 
are also used for cache variables, in all-lowercase. Use them where applicable; 
where they're not, invent your own categories. </P>
<DL compact>
  <DT><CODE>C</CODE> 
  <DD>C language builtin features. 
  <DT><CODE>DECL</CODE> 
  <DD>Declarations of C variables in header files. 
  <DT><CODE>FUNC</CODE> 
  <DD>Functions in libraries. 
  <DT><CODE>GROUP</CODE> 
  <DD>UNIX group owners of files. 
  <DT><CODE>HEADER</CODE> 
  <DD>Header files. 
  <DT><CODE>LIB</CODE> 
  <DD>C libraries. 
  <DT><CODE>PATH</CODE> 
  <DD>The full path names to files, including programs. 
  <DT><CODE>PROG</CODE> 
  <DD>The base names of programs. 
  <DT><CODE>STRUCT</CODE> 
  <DD>Definitions of C structures in header files. 
  <DT><CODE>SYS</CODE> 
  <DD>Operating system features. 
  <DT><CODE>TYPE</CODE> 
  <DD>C builtin or declared types. 
  <DT><CODE>VAR</CODE> 
  <DD>C variables in libraries. </DD></DL>
<P>After the category comes the name of the particular feature being tested. Any 
further words in the macro name indicate particular aspects of the feature. For 
example, <CODE>AC_FUNC_UTIME_NULL</CODE> checks the behavior of the 
<CODE>utime</CODE> function when called with a <CODE>NULL</CODE> pointer. </P>
<P>A macro that is an internal subroutine of another macro should have a name 
that starts with the name of that other macro, followed by one or more words 
saying what the internal macro does. For example, <CODE>AC_PATH_X</CODE> has 
internal macros <CODE>AC_PATH_X_XMKMF</CODE> and <CODE>AC_PATH_X_DIRECT</CODE>. 
</P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC62" 
name=SEC62>Quoting</A></H2>
<P>Macros that are called by other macros are evaluated by <CODE>m4</CODE> 
several times; each evaluation might require another layer of quotes to prevent 
unwanted expansions of macros or <CODE>m4</CODE> builtins, such as 
<SAMP>`define'</SAMP> and <SAMP>`$1'</SAMP>. Quotes are also required around 
macro arguments that contain commas, since commas separate the arguments from 
each other. It's a good idea to quote any macro arguments that contain newlines 
or calls to other macros, as well. </P>
<P>Autoconf changes the <CODE>m4</CODE> quote characters from the default 
<SAMP>``'</SAMP> and <SAMP>`''</SAMP> to <SAMP>`['</SAMP> and <SAMP>`]'</SAMP>, 
because many of the macros use <SAMP>``'</SAMP> and <SAMP>`''</SAMP>, 
mismatched. However, in a few places the macros need to use brackets (usually in 
C program text or regular expressions). In those places, they use the 
<CODE>m4</CODE> builtin command <CODE>changequote</CODE> to temporarily change 
the quote characters to <SAMP>`&lt;&lt;'</SAMP> and <SAMP>`&gt;&gt;'</SAMP>. 
(Sometimes, if they don't need to quote anything, they disable quoting entirely 
instead by setting the quote characters to empty strings.) Here is an example: 
</P><PRE>AC_TRY_LINK(
changequote(&lt;&lt;, &gt;&gt;)dnl
&lt;&lt;#include &lt;time.h&gt;
#ifndef tzname /* For SGI.  */
extern char *tzname[]; /* RS6000 and others reject char **tzname.  */
#endif&gt;&gt;,
changequote([, ])dnl
[atoi(*tzname);], ac_cv_var_tzname=yes, ac_cv_var_tzname=no)
</PRE>
<P>When you create a <CODE>configure</CODE> script using newly written macros, 
examine it carefully to check whether you need to add more quotes in your 
macros. If one or more words have disappeared in the <CODE>m4</CODE> output, you 
need more quotes. When in doubt, quote. </P>
<P>However, it's also possible to put on too many layers of quotes. If this 
happens, the resulting <CODE>configure</CODE> script will contain unexpanded 
macros. The <CODE>autoconf</CODE> program checks for this problem by doing 
<SAMP>`grep AC_ configure'</SAMP>. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC63" 
name=SEC63>Dependencies Between Macros</A></H2>
<P>Some Autoconf macros depend on other macros having been called first in order 
to work correctly. Autoconf provides a way to ensure that certain macros are 
called if needed and a way to warn the user if macros are called in an order 
that might cause incorrect operation. </P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC64" 
name=SEC64>Prerequisite Macros</A></H3>
<P>A macro that you write might need to use values that have previously been 
computed by other macros. For example, <CODE>AC_DECL_YYTEXT</CODE> examines the 
output of <CODE>flex</CODE> or <CODE>lex</CODE>, so it depends on 
<CODE>AC_PROG_LEX</CODE> having been called first to set the shell variable 
<CODE>LEX</CODE>. </P>
<P>Rather than forcing the user of the macros to keep track of the dependencies 
between them, you can use the <CODE>AC_REQUIRE</CODE> macro to do it 
automatically. <CODE>AC_REQUIRE</CODE> can ensure that a macro is only called if 
it is needed, and only called once. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_REQUIRE</B> <I>(<VAR>macro-name</VAR>)</I> 
  <DD><A name=IDX453></A><A name=IDX454></A>If the <CODE>m4</CODE> macro 
  <VAR>macro-name</VAR> has not already been called, call it (without any 
  arguments). Make sure to quote <VAR>macro-name</VAR> with square brackets. 
  <VAR>macro-name</VAR> must have been defined using <CODE>AC_DEFUN</CODE> or 
  else contain a call to <CODE>AC_PROVIDE</CODE> to indicate that it has been 
  called. </DD></DL>
<P></P>
<P>An alternative to using <CODE>AC_DEFUN</CODE> is to use <CODE>define</CODE> 
and call <CODE>AC_PROVIDE</CODE>. Because this technique does not prevent nested 
messages, it is considered obsolete. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_PROVIDE</B> <I>(<VAR>this-macro-name</VAR>)</I> 
  <DD><A name=IDX455></A><A name=IDX456></A>Record the fact that 
  <VAR>this-macro-name</VAR> has been called. <VAR>this-macro-name</VAR> should 
  be the name of the macro that is calling <CODE>AC_PROVIDE</CODE>. An easy way 
  to get it is from the <CODE>m4</CODE> builtin variable <CODE>$0</CODE>, like 
  this: 
  <P></P><PRE>AC_PROVIDE([$0])
</PRE></DD></DL>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC65" 
name=SEC65>Suggested Ordering</A></H3>
<P>Some macros should be run before another macro if both are called, but 
neither <EM>requires</EM> that the other be called. For example, a macro that 
changes the behavior of the C compiler should be called before any macros that 
run the C compiler. Many of these dependencies are noted in the documentation. 
</P>
<P>Autoconf provides the <CODE>AC_BEFORE</CODE> macro to warn users when macros 
with this kind of dependency appear out of order in a <TT>`configure.in'</TT> 
file. The warning occurs when creating <CODE>configure</CODE> from 
<TT>`configure.in'</TT>, not when running <CODE>configure</CODE>. For example, 
<CODE>AC_PROG_CPP</CODE> checks whether the C compiler can run the C 
preprocessor when given the <SAMP>`-E'</SAMP> option. It should therefore be 
called after any macros that change which C compiler is being used, such as 
<CODE>AC_PROG_CC</CODE>. So <CODE>AC_PROG_CC</CODE> contains: </P><PRE>AC_BEFORE([$0], [AC_PROG_CPP])dnl
</PRE>
<P>This warns the user if a call to <CODE>AC_PROG_CPP</CODE> has already 
occurred when <CODE>AC_PROG_CC</CODE> is called. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_BEFORE</B> <I>(<VAR>this-macro-name</VAR>, 
  <VAR>called-macro-name</VAR>)</I> 
  <DD><A name=IDX457></A><A name=IDX458></A>Make <CODE>m4</CODE> print a warning 
  message on the standard error output if <VAR>called-macro-name</VAR> has 
  already been called. <VAR>this-macro-name</VAR> should be the name of the 
  macro that is calling <CODE>AC_BEFORE</CODE>. The macro 
  <VAR>called-macro-name</VAR> must have been defined using 
  <CODE>AC_DEFUN</CODE> or else contain a call to <CODE>AC_PROVIDE</CODE> to 
  indicate that it has been called. </DD></DL>
<P></P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC66" 
name=SEC66>Obsolete Macros</A></H3>
<P>Configuration and portability technology has evolved over the years. Often 
better ways of solving a particular problem are developed, or ad-hoc approaches 
are systematized. This process has occurred in many parts of Autoconf. One 
result is that some of the macros are now considered <EM>obsolete</EM>; they 
still work, but are no longer considered the best thing to do. Autoconf provides 
the <CODE>AC_OBSOLETE</CODE> macro to warn users producing 
<CODE>configure</CODE> scripts when they use obsolete macros, to encourage them 
to modernize. A sample call is: </P><PRE>AC_OBSOLETE([$0], [; use AC_CHECK_HEADERS(unistd.h) instead])dnl
</PRE>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_OBSOLETE</B> <I>(<VAR>this-macro-name</VAR> [, 
  <VAR>suggestion</VAR>])</I> 
  <DD><A name=IDX459></A><A name=IDX460></A>Make <CODE>m4</CODE> print a message 
  on the standard error output warning that <VAR>this-macro-name</VAR> is 
  obsolete, and giving the file and line number where it was called. 
  <VAR>this-macro-name</VAR> should be the name of the macro that is calling 
  <CODE>AC_OBSOLETE</CODE>. If <VAR>suggestion</VAR> is given, it is printed at 
  the end of the warning message; for example, it can be a suggestion for what 
  to use instead of <VAR>this-macro-name</VAR>. </DD></DL>
<P></P>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC67" 
name=SEC67>Manual Configuration</A></H1>
<P>A few kinds of features can't be guessed automatically by running test 
programs. For example, the details of the object file format, or special options 
that need to be passed to the compiler or linker. You can check for such 
features using ad-hoc means, such as having <CODE>configure</CODE> check the 
output of the <CODE>uname</CODE> program, or looking for libraries that are 
unique to particular systems. However, Autoconf provides a uniform method for 
handling unguessable features. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC68" 
name=SEC68>Specifying the System Type</A></H2>
<P>Like other GNU <CODE>configure</CODE> scripts, Autoconf-generated 
<CODE>configure</CODE> scripts can make decisions based on a canonical name for 
the system type, which has the form: </P><PRE><VAR>cpu</VAR>-<VAR>company</VAR>-<VAR>system</VAR>
</PRE>
<P><CODE>configure</CODE> can usually guess the canonical name for the type of 
system it's running on. To do so it runs a script called 
<CODE>config.guess</CODE>, which derives the name using the <CODE>uname</CODE> 
command or symbols predefined by the C preprocessor. </P>
<P>Alternately, the user can specify the system type with command line arguments 
to <CODE>configure</CODE>. Doing so is necessary when cross-compiling. In the 
most complex case of cross-compiling, three system types are involved. The 
options to specify them are: </P>
<DL compact>
  <DT><CODE>--build=<VAR>build-type</VAR></CODE> 
  <DD>the type of system on which the package is being configured and compiled 
  (rarely needed); 
  <DT><CODE>--host=<VAR>host-type</VAR></CODE> 
  <DD>the type of system on which the package will run; 
  <DT><CODE>--target=<VAR>target-type</VAR></CODE> 
  <DD>the type of system for which any compiler tools in the package will 
  produce code. </DD></DL>
<P>If the user gives <CODE>configure</CODE> a non-option argument, it is used as 
the default for the host, target, and build system types if the user does not 
specify them explicitly with options. The target and build types default to the 
host type if it is given and they are not. If you are cross-compiling, you still 
have to specify the names of the cross-tools you use, in particular the C 
compiler, on the <CODE>configure</CODE> command line, e.g., </P><PRE>CC=m68k-coff-gcc configure --target=m68k-coff
</PRE>
<P><CODE>configure</CODE> recognizes short aliases for many system types; for 
example, <SAMP>`decstation'</SAMP> can be given on the command line instead of 
<SAMP>`mips-dec-ultrix4.2'</SAMP>. <CODE>configure</CODE> runs a script called 
<CODE>config.sub</CODE> to canonicalize system type aliases. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC69" 
name=SEC69>Getting the Canonical System Type</A></H2>
<P>The following macros make the system type available to <CODE>configure</CODE> 
scripts. They run the shell script <CODE>config.guess</CODE> to determine any 
values for the host, target, and build types that they need and the user did not 
specify on the command line. They run <CODE>config.sub</CODE> to canonicalize 
any aliases the user gave. If you use these macros, you must distribute those 
two shell scripts along with your source code. See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC10">Creating 
Output Files</A>, for information about the <CODE>AC_CONFIG_AUX_DIR</CODE> macro 
which you can use to control which directory <CODE>configure</CODE> looks for 
those scripts in. If you do not use either of these macros, 
<CODE>configure</CODE> ignores any <SAMP>`--host'</SAMP>, 
<SAMP>`--target'</SAMP>, and <SAMP>`--build'</SAMP> options given to it. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CANONICAL_SYSTEM</B> 
  <DD><A name=IDX461></A><A name=IDX462></A>Determine the system type and set 
  output variables to the names of the canonical system types. See section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC70">System 
  Type Variables</A>, for details about the variables this macro sets. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_CANONICAL_HOST</B> 
  <DD><A name=IDX463></A><A name=IDX464></A>Perform only the subset of 
  <CODE>AC_CANONICAL_SYSTEM</CODE> relevant to the host type. This is all that 
  is needed for programs that are not part of a compiler toolchain. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_VALIDATE_CACHED_SYSTEM_TUPLE</B> 
  <I>(<VAR>cmd</VAR>)</I> 
  <DD><A name=IDX465></A><A name=IDX466></A>If the cache file is inconsistent 
  with the current host, target and build system types, execute <VAR>cmd</VAR> 
  or print a default error message. </DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC70" 
name=SEC70>System Type Variables</A></H2>
<P>After calling <CODE>AC_CANONICAL_SYSTEM</CODE>, the following output 
variables contain the system type information. After 
<CODE>AC_CANONICAL_HOST</CODE>, only the <CODE>host</CODE> variables below are 
set. </P>
<DL compact>
  <DT><CODE><CODE>build</CODE>, <CODE>host</CODE>, <CODE>target</CODE></CODE> 
  <DD><A name=IDX467></A><A name=IDX468></A><A name=IDX469></A>the canonical 
  system names; 
  <DT><CODE><CODE>build_alias</CODE>, <CODE>host_alias</CODE>, 
  <CODE>target_alias</CODE></CODE> 
  <DD><A name=IDX470></A><A name=IDX471></A><A name=IDX472></A>the names the 
  user specified, or the canonical names if <CODE>config.guess</CODE> was used; 
  <DT><CODE><CODE>build_cpu</CODE>, <CODE>build_vendor</CODE>, 
  <CODE>build_os</CODE></CODE> 
  <DD>
  <DT><CODE><CODE>host_cpu</CODE>, <CODE>host_vendor</CODE>, 
  <CODE>host_os</CODE></CODE> 
  <DD>
  <DT><CODE><CODE>target_cpu</CODE>, <CODE>target_vendor</CODE>, 
  <CODE>target_os</CODE></CODE> 
  <DD><A name=IDX473></A><A name=IDX474></A><A name=IDX475></A><A 
  name=IDX476></A><A name=IDX477></A><A name=IDX478></A><A name=IDX479></A><A 
  name=IDX480></A><A name=IDX481></A>the individual parts of the canonical names 
  (for convenience). </DD></DL>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC71" 
name=SEC71>Using the System Type</A></H2>
<P>How do you use a canonical system type? Usually, you use it in one or more 
<CODE>case</CODE> statements in <TT>`configure.in'</TT> to select 
system-specific C files. Then link those files, which have names based on the 
system name, to generic names, such as <TT>`host.h'</TT> or <TT>`target.c'</TT>. 
The <CODE>case</CODE> statement patterns can use shell wildcards to group 
several cases together, like in this fragment: </P><PRE>case "$target" in
i386-*-mach* | i386-*-gnu*) obj_format=aout emulation=mach bfd_gas=yes ;;
i960-*-bout) obj_format=bout ;;
esac
</PRE>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_LINK_FILES</B> <I>(<VAR>source</VAR>..., 
  <VAR>dest</VAR>...)</I> 
  <DD><A name=IDX482></A><A name=IDX483></A>Make <CODE>AC_OUTPUT</CODE> link 
  each of the existing files <VAR>source</VAR> to the corresponding link name 
  <VAR>dest</VAR>. Makes a symbolic link if possible, otherwise a hard link. The 
  <VAR>dest</VAR> and <VAR>source</VAR> names should be relative to the top 
  level source or build directory. This macro may be called multiple times. 
  <P></P>
  <P>For example, this call: </P><PRE>AC_LINK_FILES(config/${machine}.h config/${obj_format}.h, host.h object.h)
</PRE>
  <P>creates in the current directory <TT>`host.h'</TT>, which is a link to 
  <TT>`<VAR>srcdir</VAR>/config/${machine}.h'</TT>, and <TT>`object.h'</TT>, 
  which is a link to <TT>`<VAR>srcdir</VAR>/config/${obj_format}.h'</TT>. 
  </P></DD></DL>
<P></P>
<P>You can also use the host system type to find cross-compilation tools. See 
section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC24">Generic 
Program and File Checks</A>, for information about the 
<CODE>AC_CHECK_TOOL</CODE> macro which does that. </P>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC72" 
name=SEC72>Site Configuration</A></H1>
<P><CODE>configure</CODE> scripts support several kinds of local configuration 
decisions. There are ways for users to specify where external software packages 
are, include or exclude optional features, install programs under modified 
names, and set default values for <CODE>configure</CODE> options. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC73" 
name=SEC73>Working With External Software</A></H2>
<P>Some packages require, or can optionally use, other software packages which 
are already installed. The user can give <CODE>configure</CODE> command line 
options to specify which such external software to use. The options have one of 
these forms: </P><PRE>--with-<VAR>package</VAR>[=<VAR>arg</VAR>]
--without-<VAR>package</VAR>
</PRE>
<P>For example, <SAMP>`--with-gnu-ld'</SAMP> means work with the GNU linker 
instead of some other linker. <SAMP>`--with-x'</SAMP> means work with The X 
Window System. </P>
<P>The user can give an argument by following the package name with 
<SAMP>`='</SAMP> and the argument. Giving an argument of <SAMP>`no'</SAMP> is 
for packages that are used by default; it says to <EM>not</EM> use the package. 
An argument that is neither <SAMP>`yes'</SAMP> nor <SAMP>`no'</SAMP> could 
include a name or number of a version of the other package, to specify more 
precisely which other package this program is supposed to work with. If no 
argument is given, it defaults to <SAMP>`yes'</SAMP>. 
<SAMP>`--without-<VAR>package</VAR>'</SAMP> is equivalent to 
<SAMP>`--with-<VAR>package</VAR>=no'</SAMP>. </P>
<P><CODE>configure</CODE> scripts do not complain about 
<SAMP>`--with-<VAR>package</VAR>'</SAMP> options that they do not support. This 
behavior permits configuring a source tree containing multiple packages with a 
top-level <CODE>configure</CODE> script when the packages support different 
options, without spurious error messages about options that some of the packages 
support. An unfortunate side effect is that option spelling errors are not 
diagnosed. No better approach to this problem has been suggested so far. </P>
<P>For each external software package that may be used, <TT>`configure.in'</TT> 
should call <CODE>AC_ARG_WITH</CODE> to detect whether the 
<CODE>configure</CODE> user asked to use it. Whether each package is used or not 
by default, and which arguments are valid, is up to you. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_ARG_WITH</B> <I>(<VAR>package</VAR>, 
  <VAR>help-string</VAR> [, <VAR>action-if-given</VAR> [, 
  <VAR>action-if-not-given</VAR>]])</I> 
  <DD><A name=IDX484></A><A name=IDX485></A>If the user gave 
  <CODE>configure</CODE> the option <SAMP>`--with-<VAR>package</VAR>'</SAMP> or 
  <SAMP>`--without-<VAR>package</VAR>'</SAMP>, run shell commands 
  <VAR>action-if-given</VAR>. If neither option was given, run shell commands 
  <VAR>action-if-not-given</VAR>. The name <VAR>package</VAR> indicates another 
  software package that this program should work with. It should consist only of 
  alphanumeric characters and dashes. 
  <P></P>
  <P>The option's argument is available to the shell commands 
  <VAR>action-if-given</VAR> in the shell variable <CODE>withval</CODE>, which 
  is actually just the value of the shell variable 
  <CODE>with_<VAR>package</VAR></CODE>, with any <SAMP>`-'</SAMP> characters 
  changed into <SAMP>`_'</SAMP>. You may use that variable instead, if you wish. 
  </P>
  <P>The argument <VAR>help-string</VAR> is a description of the option which 
  looks like this: <PRE>  --with-readline         support fancy command line editing
</PRE>
  <P><VAR>help-string</VAR> may be more than one line long, if more detail is 
  needed. Just make sure the columns line up in <SAMP>`configure --help'</SAMP>. 
  Avoid tabs in the help string. You'll need to enclose it in <SAMP>`['</SAMP> 
  and <SAMP>`]'</SAMP> in order to produce the leading spaces. </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_WITH</B> <I>(<VAR>package</VAR>, 
  <VAR>action-if-given</VAR> [, <VAR>action-if-not-given</VAR>])</I> 
  <DD><A name=IDX486></A><A name=IDX487></A>This is an obsolete version of 
  <CODE>AC_ARG_WITH</CODE> that does not support providing a help string. 
</DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC74" 
name=SEC74>Choosing Package Options</A></H2>
<P>If a software package has optional compile-time features, the user can give 
<CODE>configure</CODE> command line options to specify whether to compile them. 
The options have one of these forms: </P><PRE>--enable-<VAR>feature</VAR>[=<VAR>arg</VAR>]
--disable-<VAR>feature</VAR>
</PRE>
<P>These options allow users to choose which optional features to build and 
install. <SAMP>`--enable-<VAR>feature</VAR>'</SAMP> options should never make a 
feature behave differently or cause one feature to replace another. They should 
only cause parts of the program to be built rather than left out. </P>
<P>The user can give an argument by following the feature name with 
<SAMP>`='</SAMP> and the argument. Giving an argument of <SAMP>`no'</SAMP> 
requests that the feature <EM>not</EM> be made available. A feature with an 
argument looks like <SAMP>`--enable-debug=stabs'</SAMP>. If no argument is 
given, it defaults to <SAMP>`yes'</SAMP>. 
<SAMP>`--disable-<VAR>feature</VAR>'</SAMP> is equivalent to 
<SAMP>`--enable-<VAR>feature</VAR>=no'</SAMP>. </P>
<P><CODE>configure</CODE> scripts do not complain about 
<SAMP>`--enable-<VAR>feature</VAR>'</SAMP> options that they do not support. 
This behavior permits configuring a source tree containing multiple packages 
with a top-level <CODE>configure</CODE> script when the packages support 
different options, without spurious error messages about options that some of 
the packages support. An unfortunate side effect is that option spelling errors 
are not diagnosed. No better approach to this problem has been suggested so far. 
</P>
<P>For each optional feature, <TT>`configure.in'</TT> should call 
<CODE>AC_ARG_ENABLE</CODE> to detect whether the <CODE>configure</CODE> user 
asked to include it. Whether each feature is included or not by default, and 
which arguments are valid, is up to you. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_ARG_ENABLE</B> <I>(<VAR>feature</VAR>, 
  <VAR>help-string</VAR> [, <VAR>action-if-given</VAR> [, 
  <VAR>action-if-not-given</VAR>]])</I> 
  <DD><A name=IDX488></A><A name=IDX489></A>If the user gave 
  <CODE>configure</CODE> the option <SAMP>`--enable-<VAR>feature</VAR>'</SAMP> 
  or <SAMP>`--disable-<VAR>feature</VAR>'</SAMP>, run shell commands 
  <VAR>action-if-given</VAR>. If neither option was given, run shell commands 
  <VAR>action-if-not-given</VAR>. The name <VAR>feature</VAR> indicates an 
  optional user-level facility. It should consist only of alphanumeric 
  characters and dashes. 
  <P></P>
  <P>The option's argument is available to the shell commands 
  <VAR>action-if-given</VAR> in the shell variable <CODE>enableval</CODE>, which 
  is actually just the value of the shell variable 
  <CODE>enable_<VAR>feature</VAR></CODE>, with any <SAMP>`-'</SAMP> characters 
  changed into <SAMP>`_'</SAMP>. You may use that variable instead, if you wish. 
  The <VAR>help-string</VAR> argument is like that of <CODE>AC_ARG_WITH</CODE> 
  (see section <A 
  href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC73">Working 
  With External Software</A>). </P></DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_ENABLE</B> <I>(<VAR>feature</VAR>, 
  <VAR>action-if-given</VAR> [, <VAR>action-if-not-given</VAR>])</I> 
  <DD><A name=IDX490></A><A name=IDX491></A>This is an obsolete version of 
  <CODE>AC_ARG_ENABLE</CODE> that does not support providing a help string. 
</DD></DL>
<P></P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC75" 
name=SEC75>Configuring Site Details</A></H2>
<P>Some software packages require complex site-specific information. Some 
examples are host names to use for certain services, company names, and email 
addresses to contact. Since some configuration scripts generated by Metaconfig 
ask for such information interactively, people sometimes wonder how to get that 
information in Autoconf-generated configuration scripts, which aren't 
interactive. </P>
<P>Such site configuration information should be put in a file that is edited 
<EM>only by users</EM>, not by programs. The location of the file can either be 
based on the <CODE>prefix</CODE> variable, or be a standard location such as the 
user's home directory. It could even be specified by an environment variable. 
The programs should examine that file at run time, rather than at compile time. 
Run time configuration is more convenient for users and makes the configuration 
process simpler than getting the information while configuring. See section 
`Variables for Installation Directories' in <CITE>GNU Coding Standards</CITE>, 
for more information on where to put data files. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC76" 
name=SEC76>Transforming Program Names When Installing</A></H2>
<P>Autoconf supports changing the names of programs when installing them. In 
order to use these transformations, <TT>`configure.in'</TT> must call the macro 
<CODE>AC_ARG_PROGRAM</CODE>. </P>
<P>
<DL>
  <DT><U>Macro:</U> <B>AC_ARG_PROGRAM</B> 
  <DD><A name=IDX492></A><A name=IDX493></A><A name=IDX494></A>Place in output 
  variable <CODE>program_transform_name</CODE> a sequence of <CODE>sed</CODE> 
  commands for changing the names of installed programs. 
  <P></P>
  <P>If any of the options described below are given to <CODE>configure</CODE>, 
  program names are transformed accordingly. Otherwise, if 
  <CODE>AC_CANONICAL_SYSTEM</CODE> has been called and a <SAMP>`--target'</SAMP> 
  value is given that differs from the host type (specified with 
  <SAMP>`--host'</SAMP> or defaulted by <CODE>config.sub</CODE>), the target 
  type followed by a dash is used as a prefix. Otherwise, no program name 
  transformation is done. </P></DD></DL>
<P></P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC77" 
name=SEC77>Transformation Options</A></H3>
<P>You can specify name transformations by giving <CODE>configure</CODE> these 
command line options: </P>
<DL compact>
  <DT><CODE>--program-prefix=<VAR>prefix</VAR></CODE> 
  <DD>prepend <VAR>prefix</VAR> to the names; 
  <DT><CODE>--program-suffix=<VAR>suffix</VAR></CODE> 
  <DD>append <VAR>suffix</VAR> to the names; 
  <DT><CODE>--program-transform-name=<VAR>expression</VAR></CODE> 
  <DD>perform <CODE>sed</CODE> substitution <VAR>expression</VAR> on the names. 
  </DD></DL>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC78" 
name=SEC78>Transformation Examples</A></H3>
<P>These transformations are useful with programs that can be part of a 
cross-compilation development environment. For example, a cross-assembler 
running on a Sun 4 configured with <SAMP>`--target=i960-vxworks'</SAMP> is 
normally installed as <TT>`i960-vxworks-as'</TT>, rather than <TT>`as'</TT>, 
which could be confused with a native Sun 4 assembler. </P>
<P>You can force a program name to begin with <TT>`g'</TT>, if you don't want 
GNU programs installed on your system to shadow other programs with the same 
name. For example, if you configure GNU <CODE>diff</CODE> with 
<SAMP>`--program-prefix=g'</SAMP>, then when you run <SAMP>`make install'</SAMP> 
it is installed as <TT>`/usr/local/bin/gdiff'</TT>. </P>
<P>As a more sophisticated example, you could use <PRE>--program-transform-name='s/^/g/; s/^gg/g/; s/^gless/less/'
</PRE>
<P>to prepend <SAMP>`g'</SAMP> to most of the program names in a source tree, 
excepting those like <CODE>gdb</CODE> that already have one and those like 
<CODE>less</CODE> and <CODE>lesskey</CODE> that aren't GNU programs. (That is 
assuming that you have a source tree containing those programs that is set up to 
use this feature.) </P>
<P>One way to install multiple versions of some programs simultaneously is to 
append a version number to the name of one or both. For example, if you want to 
keep Autoconf version 1 around for awhile, you can configure Autoconf version 2 
using <SAMP>`--program-suffix=2'</SAMP> to install the programs as 
<TT>`/usr/local/bin/autoconf2'</TT>, <TT>`/usr/local/bin/autoheader2'</TT>, etc. 
</P>
<H3><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC79" 
name=SEC79>Transformation Rules</A></H3>
<P>Here is how to use the variable <CODE>program_transform_name</CODE> in a 
<TT>`Makefile.in'</TT>: </P><PRE>transform=@program_transform_name@
install: all
        $(INSTALL_PROGRAM) myprog $(bindir)/`echo myprog|sed '$(transform)'`

uninstall:
        rm -f $(bindir)/`echo myprog|sed '$(transform)'`
</PRE>
<P>If you have more than one program to install, you can do it in a loop: </P><PRE>PROGRAMS=cp ls rm
install:
        for p in $(PROGRAMS); do \
          $(INSTALL_PROGRAM) $$p $(bindir)/`echo $$p|sed '$(transform)'`; \
        done

uninstall:
        for p in $(PROGRAMS); do \
          rm -f $(bindir)/`echo $$p|sed '$(transform)'`; \
        done
</PRE>
<P>Whether to do the transformations on documentation files (Texinfo or 
<CODE>man</CODE>) is a tricky question; there seems to be no perfect answer, due 
to the several reasons for name transforming. Documentation is not usually 
particular to a specific architecture, and Texinfo files do not conflict with 
system documentation. But they might conflict with earlier versions of the same 
files, and <CODE>man</CODE> pages sometimes do conflict with system 
documentation. As a compromise, it is probably best to do name transformations 
on <CODE>man</CODE> pages but not on Texinfo manuals. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC80" 
name=SEC80>Setting Site Defaults</A></H2>
<P>Autoconf-generated <CODE>configure</CODE> scripts allow your site to provide 
default values for some configuration values. You do this by creating site- and 
system-wide initialization files. </P>
<P><A name=IDX495></A>If the environment variable <CODE>CONFIG_SITE</CODE> is 
set, <CODE>configure</CODE> uses its value as the name of a shell script to 
read. Otherwise, it reads the shell script 
<TT>`<VAR>prefix</VAR>/share/config.site'</TT> if it exists, then 
<TT>`<VAR>prefix</VAR>/etc/config.site'</TT> if it exists. Thus, settings in 
machine-specific files override those in machine-independent ones in case of 
conflict. </P>
<P>Site files can be arbitrary shell scripts, but only certain kinds of code are 
really appropriate to be in them. Because <CODE>configure</CODE> reads any cache 
file after it has read any site files, a site file can define a default cache 
file to be shared between all Autoconf-generated <CODE>configure</CODE> scripts 
run on that system. If you set a default cache file in a site file, it is a good 
idea to also set the output variable <CODE>CC</CODE> in that site file, because 
the cache file is only valid for a particular compiler, but many systems have 
several available. </P>
<P>You can examine or override the value set by a command line option to 
<CODE>configure</CODE> in a site file; options set shell variables that have the 
same names as the options, with any dashes turned into underscores. The 
exceptions are that <SAMP>`--without-'</SAMP> and <SAMP>`--disable-'</SAMP> 
options are like giving the corresponding <SAMP>`--with-'</SAMP> or 
<SAMP>`--enable-'</SAMP> option and the value <SAMP>`no'</SAMP>. Thus, 
<SAMP>`--cache-file=localcache'</SAMP> sets the variable <CODE>cache_file</CODE> 
to the value <SAMP>`localcache'</SAMP>; <SAMP>`--enable-warnings=no'</SAMP> or 
<SAMP>`--disable-warnings'</SAMP> sets the variable <CODE>enable_warnings</CODE> 
to the value <SAMP>`no'</SAMP>; <SAMP>`--prefix=/usr'</SAMP> sets the variable 
<CODE>prefix</CODE> to the value <SAMP>`/usr'</SAMP>; etc. </P>
<P>Site files are also good places to set default values for other output 
variables, such as <CODE>CFLAGS</CODE>, if you need to give them non-default 
values: anything you would normally do, repetitively, on the command line. If 
you use non-default values for <VAR>prefix</VAR> or <VAR>exec_prefix</VAR> 
(wherever you locate the site file), you can set them in the site file if you 
specify it with the <CODE>CONFIG_SITE</CODE> environment variable. </P>
<P>You can set some cache values in the site file itself. Doing this is useful 
if you are cross-compiling, so it is impossible to check features that require 
running a test program. You could "prime the cache" by setting those values 
correctly for that system in <TT>`<VAR>prefix</VAR>/etc/config.site'</TT>. To 
find out the names of the cache variables you need to set, look for shell 
variables with <SAMP>`_cv_'</SAMP> in their names in the affected 
<CODE>configure</CODE> scripts, or in the Autoconf <CODE>m4</CODE> source code 
for those macros. </P>
<P>The cache file is careful to not override any variables set in the site 
files. Similarly, you should not override command-line options in the site 
files. Your code should check that variables such as <CODE>prefix</CODE> and 
<CODE>cache_file</CODE> have their default values (as set near the top of 
<CODE>configure</CODE>) before changing them. </P>
<P>Here is a sample file <TT>`/usr/share/local/gnu/share/config.site'</TT>. The 
command <SAMP>`configure --prefix=/usr/share/local/gnu'</SAMP> would read this 
file (if <CODE>CONFIG_SITE</CODE> is not set to a different file). </P><PRE># config.site for configure
#
# Change some defaults.
test "$prefix" = NONE &amp;&amp; prefix=/usr/share/local/gnu
test "$exec_prefix" = NONE &amp;&amp; exec_prefix=/usr/local/gnu
test "$sharedstatedir" = '${prefix}/com' &amp;&amp; sharedstatedir=/var
test "$localstatedir" = '${prefix}/var' &amp;&amp; localstatedir=/var
#
# Give Autoconf 2.x generated configure scripts a shared default
# cache file for feature test results, architecture-specific.
if test "$cache_file" = ./config.cache; then
  cache_file="$prefix/var/config.cache"
  # A cache file is only valid for one C compiler.
  CC=gcc
fi
</PRE>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC81" 
name=SEC81>Running <CODE>configure</CODE> Scripts</A></H1>
<P>Below are instructions on how to configure a package that uses a 
<CODE>configure</CODE> script, suitable for inclusion as an <TT>`INSTALL'</TT> 
file in the package. A plain-text version of <TT>`INSTALL'</TT> which you may 
use comes with Autoconf. </P>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC82" 
name=SEC82>Recreating a Configuration</A></H1>
<P>The <CODE>configure</CODE> script creates a file named 
<TT>`config.status'</TT> which describes which configuration options were 
specified when the package was last configured. This file is a shell script 
which, if run, will recreate the same configuration. </P>
<P>You can give <TT>`config.status'</TT> the <SAMP>`--recheck'</SAMP> option to 
update itself. This option is useful if you change <CODE>configure</CODE>, so 
that the results of some tests might be different from the previous run. The 
<SAMP>`--recheck'</SAMP> option re-runs <CODE>configure</CODE> with the same 
arguments you used before, plus the <SAMP>`--no-create'</SAMP> option, which 
prevent <CODE>configure</CODE> from running <TT>`config.status'</TT> and 
creating <TT>`Makefile'</TT> and other files, and the 
<SAMP>`--no-recursion'</SAMP> option, which prevents <CODE>configure</CODE> from 
running other <CODE>configure</CODE> scripts in subdirectories. (This is so 
other <TT>`Makefile'</TT> rules can run <TT>`config.status'</TT> when it 
changes; see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC14">Automatic 
Remaking</A>, for an example). </P>
<P><TT>`config.status'</TT> also accepts the options <SAMP>`--help'</SAMP>, 
which prints a summary of the options to <TT>`config.status'</TT>, and 
<SAMP>`--version'</SAMP>, which prints the version of Autoconf used to create 
the <CODE>configure</CODE> script that generated <TT>`config.status'</TT>. </P>
<P><TT>`config.status'</TT> checks several optional environment variables that 
can alter its behavior: </P>
<P>
<DL>
  <DT><U>Variable:</U> <B>CONFIG_SHELL</B> 
  <DD><A name=IDX496></A><A name=IDX497></A>The shell with which to run 
  <CODE>configure</CODE> for the <SAMP>`--recheck'</SAMP> option. It must be 
  Bourne-compatible. The default is <TT>`/bin/sh'</TT>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>CONFIG_STATUS</B> 
  <DD><A name=IDX498></A><A name=IDX499></A>The file name to use for the shell 
  script that records the configuration. The default is 
  <TT>`./config.status'</TT>. This variable is useful when one package uses 
  parts of another and the <CODE>configure</CODE> scripts shouldn't be merged 
  because they are maintained separately. </DD></DL>
<P></P>
<P>The following variables provide one way for separately distributed packages 
to share the values computed by <CODE>configure</CODE>. Doing so can be useful 
if some of the packages need a superset of the features that one of them, 
perhaps a common library, does. These variables allow a <TT>`config.status'</TT> 
file to create files other than the ones that its <TT>`configure.in'</TT> 
specifies, so it can be used for a different package. </P>
<P>
<DL>
  <DT><U>Variable:</U> <B>CONFIG_FILES</B> 
  <DD><A name=IDX500></A><A name=IDX501></A>The files in which to perform 
  <SAMP>`@<VAR>variable</VAR>@'</SAMP> substitutions. The default is the 
  arguments given to <CODE>AC_OUTPUT</CODE> in <TT>`configure.in'</TT>. </DD></DL>
<P></P>
<P>
<DL>
  <DT><U>Variable:</U> <B>CONFIG_HEADERS</B> 
  <DD><A name=IDX502></A><A name=IDX503></A>The files in which to substitute C 
  <CODE>#define</CODE> statements. The default is the arguments given to 
  <CODE>AC_CONFIG_HEADER</CODE>; if that macro was not called, 
  <TT>`config.status'</TT> ignores this variable. </DD></DL>
<P></P>
<P>These variables also allow you to write <TT>`Makefile'</TT> rules that 
regenerate only some of the files. For example, in the dependencies given above 
(see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC14">Automatic 
Remaking</A>), <TT>`config.status'</TT> is run twice when 
<TT>`configure.in'</TT> has changed. If that bothers you, you can make each run 
only regenerate the files for that rule: </P><PRE>config.h: stamp-h
stamp-h: config.h.in config.status
        CONFIG_FILES= CONFIG_HEADERS=config.h ./config.status
        echo &gt; stamp-h

Makefile: Makefile.in config.status
        CONFIG_FILES=Makefile CONFIG_HEADERS= ./config.status
</PRE>
<P>(If <TT>`configure.in'</TT> does not call <CODE>AC_CONFIG_HEADER</CODE>, 
there is no need to set <CODE>CONFIG_HEADERS</CODE> in the <CODE>make</CODE> 
rules.) </P>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC83" 
name=SEC83>Questions About Autoconf</A></H1>
<P>Several questions about Autoconf come up occasionally. Here some of them are 
addressed. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC84" 
name=SEC84>Distributing <CODE>configure</CODE> Scripts</A></H2><PRE>What are the restrictions on distributing <CODE>configure</CODE>
scripts that Autoconf generates?  How does that affect my
programs that use them?
</PRE>
<P>There are no restrictions on how the configuration scripts that Autoconf 
produces may be distributed or used. In Autoconf version 1, they were covered by 
the GNU General Public License. We still encourage software authors to 
distribute their work under terms like those of the GPL, but doing so is not 
required to use Autoconf. </P>
<P>Of the other files that might be used with <CODE>configure</CODE>, 
<TT>`config.h.in'</TT> is under whatever copyright you use for your 
<TT>`configure.in'</TT>, since it is derived from that file and from the public 
domain file <TT>`acconfig.h'</TT>. <TT>`config.sub'</TT> and 
<TT>`config.guess'</TT> have an exception to the GPL when they are used with an 
Autoconf-generated <CODE>configure</CODE> script, which permits you to 
distribute them under the same terms as the rest of your package. 
<TT>`install-sh'</TT> is from the X Consortium and is not copyrighted. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC85" 
name=SEC85>Why Require GNU <CODE>m4</CODE>?</A></H2><PRE>Why does Autoconf require GNU <CODE>m4</CODE>?
</PRE>
<P>Many <CODE>m4</CODE> implementations have hard-coded limitations on the size 
and number of macros, which Autoconf exceeds. They also lack several builtin 
macros that it would be difficult to get along without in a sophisticated 
application like Autoconf, including: </P><PRE>builtin
indir
patsubst
__file__
__line__
</PRE>
<P>Since only software maintainers need to use Autoconf, and since GNU 
<CODE>m4</CODE> is simple to configure and install, it seems reasonable to 
require GNU <CODE>m4</CODE> to be installed also. Many maintainers of GNU and 
other free software already have most of the GNU utilities installed, since they 
prefer them. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC86" 
name=SEC86>How Can I Bootstrap?</A></H2><PRE>If Autoconf requires GNU <CODE>m4</CODE> and GNU <CODE>m4</CODE> has an
Autoconf <CODE>configure</CODE> script, how do I bootstrap?  It seems
like a chicken and egg problem!
</PRE>
<P>This is a misunderstanding. Although GNU <CODE>m4</CODE> does come with a 
<CODE>configure</CODE> script produced by Autoconf, Autoconf is not required in 
order to run the script and install GNU <CODE>m4</CODE>. Autoconf is only 
required if you want to change the <CODE>m4</CODE> <CODE>configure</CODE> 
script, which few people have to do (mainly its maintainer). </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC87" 
name=SEC87>Why Not Imake?</A></H2><PRE>Why not use Imake instead of <CODE>configure</CODE> scripts?
</PRE>
<P>Several people have written addressing this question, so I include 
adaptations of their explanations here. </P>
<P>The following answer is based on one written by Richard Pixley: </P>
<P>Autoconf generated scripts frequently work on machines which it has never 
been set up to handle before. That is, it does a good job of inferring a 
configuration for a new system. Imake cannot do this. </P>
<P>Imake uses a common database of host specific data. For X11, this makes sense 
because the distribution is made as a collection of tools, by one central 
authority who has control over the database. </P>
<P>GNU tools are not released this way. Each GNU tool has a maintainer; these 
maintainers are scattered across the world. Using a common database would be a 
maintenance nightmare. Autoconf may appear to be this kind of database, but in 
fact it is not. Instead of listing host dependencies, it lists program 
requirements. </P>
<P>If you view the GNU suite as a collection of native tools, then the problems 
are similar. But the GNU development tools can be configured as cross tools in 
almost any host+target permutation. All of these configurations can be installed 
concurrently. They can even be configured to share host independent files across 
hosts. Imake doesn't address these issues. </P>
<P>Imake templates are a form of standardization. The GNU coding standards 
address the same issues without necessarily imposing the same restrictions. </P>
<P>Here is some further explanation, written by Per Bothner: </P>
<P>One of the advantages of Imake is that it easy to generate large Makefiles 
using <CODE>cpp</CODE>'s <SAMP>`#include'</SAMP> and macro mechanisms. However, 
<CODE>cpp</CODE> is not programmable: it has limited conditional facilities, and 
no looping. And <CODE>cpp</CODE> cannot inspect its environment. </P>
<P>All of these problems are solved by using <CODE>sh</CODE> instead of 
<CODE>cpp</CODE>. The shell is fully programmable, has macro substitution, can 
execute (or source) other shell scripts, and can inspect its environment. </P>
<P>Paul Eggert elaborates more: </P>
<P>With Autoconf, installers need not assume that Imake itself is already 
installed and working well. This may not seem like much of an advantage to 
people who are accustomed to Imake. But on many hosts Imake is not installed or 
the default installation is not working well, and requiring Imake to install a 
package hinders the acceptance of that package on those hosts. For example, the 
Imake template and configuration files might not be installed properly on a 
host, or the Imake build procedure might wrongly assume that all source files 
are in one big directory tree, or the Imake configuration might assume one 
compiler whereas the package or the installer needs to use another, or there 
might be a version mismatch between the Imake expected by the package and the 
Imake supported by the host. These problems are much rarer with Autoconf, where 
each package comes with its own independent configuration processor. </P>
<P>Also, Imake often suffers from unexpected interactions between 
<CODE>make</CODE> and the installer's C preprocessor. The fundamental problem 
here is that the C preprocessor was designed to preprocess C programs, not 
<TT>`Makefile'</TT>s. This is much less of a problem with Autoconf, which uses 
the general-purpose preprocessor <CODE>m4</CODE>, and where the package's author 
(rather than the installer) does the preprocessing in a standard way. </P>
<P>Finally, Mark Eichin notes: </P>
<P>Imake isn't all that extensible, either. In order to add new features to 
Imake, you need to provide your own project template, and duplicate most of the 
features of the existing one. This means that for a sophisticated project, using 
the vendor-provided Imake templates fails to provide any leverage--since they 
don't cover anything that your own project needs (unless it is an X11 program). 
</P>
<P>On the other side, though: </P>
<P>The one advantage that Imake has over <CODE>configure</CODE>: 
<TT>`Imakefile'</TT>s tend to be much shorter (likewise, less redundant) than 
<TT>`Makefile.in'</TT>s. There is a fix to this, however--at least for the 
Kerberos V5 tree, we've modified things to call in common <TT>`post.in'</TT> and 
<TT>`pre.in'</TT> <TT>`Makefile'</TT> fragments for the entire tree. This means 
that a lot of common things don't have to be duplicated, even though they 
normally are in <CODE>configure</CODE> setups. </P>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC88" 
name=SEC88>Upgrading From Version 1</A></H1>
<P>Autoconf version 2 is mostly backward compatible with version 1. However, it 
introduces better ways to do some things, and doesn't support some of the ugly 
things in version 1. So, depending on how sophisticated your 
<TT>`configure.in'</TT> files are, you might have to do some manual work in 
order to upgrade to version 2. This chapter points out some problems to watch 
for when upgrading. Also, perhaps your <CODE>configure</CODE> scripts could 
benefit from some of the new features in version 2; the changes are summarized 
in the file <TT>`NEWS'</TT> in the Autoconf distribution. </P>
<P>First, make sure you have GNU <CODE>m4</CODE> version 1.1 or higher 
installed, preferably 1.3 or higher. Versions before 1.1 have bugs that prevent 
them from working with Autoconf version 2. Versions 1.3 and later are much 
faster than earlier versions, because as of version 1.3, GNU <CODE>m4</CODE> has 
a more efficient implementation of diversions and can freeze its internal state 
in a file that it can read back quickly. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC89" 
name=SEC89>Changed File Names</A></H2>
<P>If you have an <TT>`aclocal.m4'</TT> installed with Autoconf (as opposed to 
in a particular package's source directory), you must rename it to 
<TT>`acsite.m4'</TT>. See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC6">Using 
<CODE>autoconf</CODE> to Create <CODE>configure</CODE></A>. </P>
<P>If you distribute <TT>`install.sh'</TT> with your package, rename it to 
<TT>`install-sh'</TT> so <CODE>make</CODE> builtin rules won't inadvertently 
create a file called <TT>`install'</TT> from it. <CODE>AC_PROG_INSTALL</CODE> 
looks for the script under both names, but it is best to use the new name. </P>
<P>If you were using <TT>`config.h.top'</TT> or <TT>`config.h.bot'</TT>, you 
still can, but you will have less clutter if you merge them into 
<TT>`acconfig.h'</TT>. See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC17">Using 
<CODE>autoheader</CODE> to Create <TT>`config.h.in'</TT></A>. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC90" 
name=SEC90>Changed Makefiles</A></H2>
<P>Add <SAMP>`@CFLAGS@'</SAMP>, <SAMP>`@CPPFLAGS@'</SAMP>, and 
<SAMP>`@LDFLAGS@'</SAMP> in your <TT>`Makefile.in'</TT> files, so they can take 
advantage of the values of those variables in the environment when 
<CODE>configure</CODE> is run. Doing this isn't necessary, but it's a 
convenience for users. </P>
<P>Also add <SAMP>`@configure_input@'</SAMP> in a comment to each 
non-<TT>`Makefile'</TT> input file for <CODE>AC_OUTPUT</CODE>, so that the 
output files will contain a comment saying they were produced by 
<CODE>configure</CODE>. Automatically selecting the right comment syntax for all 
the kinds of files that people call <CODE>AC_OUTPUT</CODE> on became too much 
work. </P>
<P>Add <TT>`config.log'</TT> and <TT>`config.cache'</TT> to the list of files 
you remove in <CODE>distclean</CODE> targets. </P>
<P>If you have the following in <TT>`Makefile.in'</TT>: </P><PRE>prefix = /usr/local
exec_prefix = ${prefix}
</PRE>
<P>you must change it to: </P><PRE>prefix = @prefix@
exec_prefix = @exec_prefix@
</PRE>
<P>The old behavior of replacing those variables without <SAMP>`@'</SAMP> 
characters around them has been removed. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC91" 
name=SEC91>Changed Macros</A></H2>
<P>Many of the macros were renamed in Autoconf version 2. You can still use the 
old names, but the new ones are clearer, and it's easier to find the 
documentation for them. See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC101">Old 
Macro Names</A>, for a table showing the new names for the old macros. Use the 
<CODE>autoupdate</CODE> program to convert your <TT>`configure.in'</TT> to using 
the new macro names. See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC92">Using 
<CODE>autoupdate</CODE> to Modernize <CODE>configure</CODE></A>. </P>
<P>Some macros have been superseded by similar ones that do the job better, but 
are not call-compatible. If you get warnings about calling obsolete macros while 
running <CODE>autoconf</CODE>, you may safely ignore them, but your 
<CODE>configure</CODE> script will generally work better if you follow the 
advice it prints about what to replace the obsolete macros with. In particular, 
the mechanism for reporting the results of tests has changed. If you were using 
<CODE>echo</CODE> or <CODE>AC_VERBOSE</CODE> (perhaps via 
<CODE>AC_COMPILE_CHECK</CODE>), your <CODE>configure</CODE> script's output will 
look better if you switch to <CODE>AC_MSG_CHECKING</CODE> and 
<CODE>AC_MSG_RESULT</CODE>. See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC58">Printing 
Messages</A>. Those macros work best in conjunction with cache variables. See 
section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC55">Caching 
Results</A>. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC92" 
name=SEC92>Using <CODE>autoupdate</CODE> to Modernize 
<CODE>configure</CODE></A></H2>
<P>The <CODE>autoupdate</CODE> program updates a <TT>`configure.in'</TT> file 
that calls Autoconf macros by their old names to use the current macro names. In 
version 2 of Autoconf, most of the macros were renamed to use a more uniform and 
descriptive naming scheme. See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC61">Macro 
Names</A>, for a description of the new scheme. Although the old names still 
work (see section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC101">Old 
Macro Names</A>, for a list of the old macro names and the corresponding new 
names), you can make your <TT>`configure.in'</TT> files more readable and make 
it easier to use the current Autoconf documentation if you update them to use 
the new macro names. </P>
<P><A name=IDX504></A>If given no arguments, <CODE>autoupdate</CODE> updates 
<TT>`configure.in'</TT>, backing up the original version with the suffix 
<TT>`~'</TT> (or the value of the environment variable 
<CODE>SIMPLE_BACKUP_SUFFIX</CODE>, if that is set). If you give 
<CODE>autoupdate</CODE> an argument, it reads that file instead of 
<TT>`configure.in'</TT> and writes the updated file to the standard output. </P>
<P><CODE>autoupdate</CODE> accepts the following options: </P>
<DL compact>
  <DT><CODE>--help</CODE> 
  <DD>
  <DT><CODE>-h</CODE> 
  <DD>Print a summary of the command line options and exit. 
  <DT><CODE>--macrodir=<VAR>dir</VAR></CODE> 
  <DD>
  <DT><CODE>-m <VAR>dir</VAR></CODE> 
  <DD><A name=IDX505></A>Look for the Autoconf macro files in directory 
  <VAR>dir</VAR> instead of the default installation directory. You can also set 
  the <CODE>AC_MACRODIR</CODE> environment variable to a directory; this option 
  overrides the environment variable. 
  <DT><CODE>--version</CODE> 
  <DD>Print the version number of <CODE>autoupdate</CODE> and exit. </DD></DL>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC93" 
name=SEC93>Changed Results</A></H2>
<P>If you were checking the results of previous tests by examining the shell 
variable <CODE>DEFS</CODE>, you need to switch to checking the values of the 
cache variables for those tests. <CODE>DEFS</CODE> no longer exists while 
<CODE>configure</CODE> is running; it is only created when generating output 
files. This difference from version 1 is because properly quoting the contents 
of that variable turned out to be too cumbersome and inefficient to do every 
time <CODE>AC_DEFINE</CODE> is called. See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC56">Cache 
Variable Names</A>. </P>
<P>For example, here is a <TT>`configure.in'</TT> fragment written for Autoconf 
version 1: </P><PRE>AC_HAVE_FUNCS(syslog)
case "$DEFS" in
*-DHAVE_SYSLOG*) ;;
*) # syslog is not in the default libraries.  See if it's in some other.
  saved_LIBS="$LIBS"
  for lib in bsd socket inet; do
    AC_CHECKING(for syslog in -l$lib)
    LIBS="$saved_LIBS -l$lib"
    AC_HAVE_FUNCS(syslog)
    case "$DEFS" in
    *-DHAVE_SYSLOG*) break ;;
    *) ;;
    esac
    LIBS="$saved_LIBS"
  done ;;
esac
</PRE>
<P>Here is a way to write it for version 2: </P><PRE>AC_CHECK_FUNCS(syslog)
if test $ac_cv_func_syslog = no; then
  # syslog is not in the default libraries.  See if it's in some other.
  for lib in bsd socket inet; do
    AC_CHECK_LIB($lib, syslog, [AC_DEFINE(HAVE_SYSLOG)
      LIBS="$LIBS $lib"; break])
  done
fi
</PRE>
<P>If you were working around bugs in <CODE>AC_DEFINE_UNQUOTED</CODE> by adding 
backslashes before quotes, you need to remove them. It now works predictably, 
and does not treat quotes (except backquotes) specially. See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC54">Setting 
Output Variables</A>. </P>
<P>All of the boolean shell variables set by Autoconf macros now use 
<SAMP>`yes'</SAMP> for the true value. Most of them use <SAMP>`no'</SAMP> for 
false, though for backward compatibility some use the empty string instead. If 
you were relying on a shell variable being set to something like 1 or 
<SAMP>`t'</SAMP> for true, you need to change your tests. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC94" 
name=SEC94>Changed Macro Writing</A></H2>
<P>When defining your own macros, you should now use <CODE>AC_DEFUN</CODE> 
instead of <CODE>define</CODE>. <CODE>AC_DEFUN</CODE> automatically calls 
<CODE>AC_PROVIDE</CODE> and ensures that macros called via 
<CODE>AC_REQUIRE</CODE> do not interrupt other macros, to prevent nested 
<SAMP>`checking...'</SAMP> messages on the screen. There's no actual harm in 
continuing to use the older way, but it's less convenient and attractive. See 
section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC60">Macro 
Definitions</A>. </P>
<P>You probably looked at the macros that came with Autoconf as a guide for how 
to do things. It would be a good idea to take a look at the new versions of 
them, as the style is somewhat improved and they take advantage of some new 
features. </P>
<P>If you were doing tricky things with undocumented Autoconf internals (macros, 
variables, diversions), check whether you need to change anything to account for 
changes that have been made. Perhaps you can even use an officially supported 
technique in version 2 instead of kludging. Or perhaps not. </P>
<P>To speed up your locally written feature tests, add caching to them. See 
whether any of your tests are of general enough usefulness to encapsulate into 
macros that you can share. </P>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC95" 
name=SEC95>History of Autoconf</A></H1>
<P>You may be wondering, Why was Autoconf originally written? How did it get 
into its present form? (Why does it look like gorilla spit?) If you're not 
wondering, then this chapter contains no information useful to you, and you 
might as well skip it. If you <EM>are</EM> wondering, then let there be light... 
</P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC96" 
name=SEC96>Genesis</A></H2>
<P>In June 1991 I was maintaining many of the GNU utilities for the Free 
Software Foundation. As they were ported to more platforms and more programs 
were added, the number of <SAMP>`-D'</SAMP> options that users had to select in 
the <TT>`Makefile'</TT> (around 20) became burdensome. Especially for me--I had 
to test each new release on a bunch of different systems. So I wrote a little 
shell script to guess some of the correct settings for the fileutils package, 
and released it as part of fileutils 2.0. That <CODE>configure</CODE> script 
worked well enough that the next month I adapted it (by hand) to create similar 
<CODE>configure</CODE> scripts for several other GNU utilities packages. Brian 
Berliner also adapted one of my scripts for his CVS revision control system. 
</P>
<P>Later that summer, I learned that Richard Stallman and Richard Pixley were 
developing similar scripts to use in the GNU compiler tools; so I adapted my 
<CODE>configure</CODE> scripts to support their evolving interface: using the 
file name <TT>`Makefile.in'</TT> as the templates; adding 
<SAMP>`+srcdir'</SAMP>, the first option (of many); and creating 
<TT>`config.status'</TT> files. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC97" 
name=SEC97>Exodus</A></H2>
<P>As I got feedback from users, I incorporated many improvements, using Emacs 
to search and replace, cut and paste, similar changes in each of the scripts. As 
I adapted more GNU utilities packages to use <CODE>configure</CODE> scripts, 
updating them all by hand became impractical. Rich Murphey, the maintainer of 
the GNU graphics utilities, sent me mail saying that the <CODE>configure</CODE> 
scripts were great, and asking if I had a tool for generating them that I could 
send him. No, I thought, but I should! So I started to work out how to generate 
them. And the journey from the slavery of hand-written <CODE>configure</CODE> 
scripts to the abundance and ease of Autoconf began. </P>
<P>Cygnus <CODE>configure</CODE>, which was being developed at around that time, 
is table driven; it is meant to deal mainly with a discrete number of system 
types with a small number of mainly unguessable features (such as details of the 
object file format). The automatic configuration system that Brian Fox had 
developed for Bash takes a similar approach. For general use, it seems to me a 
hopeless cause to try to maintain an up-to-date database of which features each 
variant of each operating system has. It's easier and more reliable to check for 
most features on the fly--especially on hybrid systems that people have hacked 
on locally or that have patches from vendors installed. </P>
<P>I considered using an architecture similar to that of Cygnus 
<CODE>configure</CODE>, where there is a single <CODE>configure</CODE> script 
that reads pieces of <TT>`configure.in'</TT> when run. But I didn't want to have 
to distribute all of the feature tests with every package, so I settled on 
having a different <CODE>configure</CODE> made from each <TT>`configure.in'</TT> 
by a preprocessor. That approach also offered more control and flexibility. </P>
<P>I looked briefly into using the Metaconfig package, by Larry Wall, Harlan 
Stenn, and Raphael Manfredi, but I decided not to for several reasons. The 
<CODE>Configure</CODE> scripts it produces are interactive, which I find quite 
inconvenient; I didn't like the ways it checked for some features (such as 
library functions); I didn't know that it was still being maintained, and the 
<CODE>Configure</CODE> scripts I had seen didn't work on many modern systems 
(such as System V R4 and NeXT); it wasn't very flexible in what it could do in 
response to a feature's presence or absence; I found it confusing to learn; and 
it was too big and complex for my needs (I didn't realize then how much Autoconf 
would eventually have to grow). </P>
<P>I considered using Perl to generate my style of <CODE>configure</CODE> 
scripts, but decided that <CODE>m4</CODE> was better suited to the job of simple 
textual substitutions: it gets in the way less, because output is implicit. 
Plus, everyone already has it. (Initially I didn't rely on the GNU extensions to 
<CODE>m4</CODE>.) Also, some of my friends at the University of Maryland had 
recently been putting <CODE>m4</CODE> front ends on several programs, including 
<CODE>tvtwm</CODE>, and I was interested in trying out a new language. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC98" 
name=SEC98>Leviticus</A></H2>
<P>Since my <CODE>configure</CODE> scripts determine the system's capabilities 
automatically, with no interactive user intervention, I decided to call the 
program that generates them Autoconfig. But with a version number tacked on, 
that name would be too long for old UNIX file systems, so I shortened it to 
Autoconf. </P>
<P>In the fall of 1991 I called together a group of fellow questers after the 
Holy Grail of portability (er, that is, alpha testers) to give me feedback as I 
encapsulated pieces of my handwritten scripts in <CODE>m4</CODE> macros and 
continued to add features and improve the techniques used in the checks. 
Prominent among the testers were Pinard, who came up with the idea of making an 
<TT>`autoconf'</TT> shell script to run <CODE>m4</CODE> and check for unresolved 
macro calls; Richard Pixley, who suggested running the compiler instead of 
searching the file system to find include files and symbols, for more accurate 
results; Karl Berry, who got Autoconf to configure TeX and added the macro index 
to the documentation; and Ian Taylor, who added support for creating a C header 
file as an alternative to putting <SAMP>`-D'</SAMP> options in a 
<TT>`Makefile'</TT>, so he could use Autoconf for his UUCP package. The alpha 
testers cheerfully adjusted their files again and again as the names and calling 
conventions of the Autoconf macros changed from release to release. They all 
contributed many specific checks, great ideas, and bug fixes. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC99" 
name=SEC99>Numbers</A></H2>
<P>In July 1992, after months of alpha testing, I released Autoconf 1.0, and 
converted many GNU packages to use it. I was surprised by how positive the 
reaction to it was. More people started using it than I could keep track of, 
including people working on software that wasn't part of the GNU Project (such 
as TCL, FSP, and Kerberos V5). Autoconf continued to improve rapidly, as many 
people using the <CODE>configure</CODE> scripts reported problems they 
encountered. </P>
<P>Autoconf turned out to be a good torture test for <CODE>m4</CODE> 
implementations. UNIX <CODE>m4</CODE> started to dump core because of the length 
of the macros that Autoconf defined, and several bugs showed up in GNU 
<CODE>m4</CODE> as well. Eventually, we realized that we needed to use some 
features that only GNU <CODE>m4</CODE> has. 4.3BSD <CODE>m4</CODE>, in 
particular, has an impoverished set of builtin macros; the System V version is 
better, but still doesn't provide everything we need. </P>
<P>More development occurred as people put Autoconf under more stresses (and to 
uses I hadn't anticipated). Karl Berry added checks for X11. david zuhn 
contributed C++ support. Pinard made it diagnose invalid arguments. Jim Blandy 
bravely coerced it into configuring GNU Emacs, laying the groundwork for several 
later improvements. Roland McGrath got it to configure the GNU C Library, wrote 
the <CODE>autoheader</CODE> script to automate the creation of C header file 
templates, and added a <SAMP>`--verbose'</SAMP> option to 
<CODE>configure</CODE>. Noah Friedman added the <SAMP>`--macrodir'</SAMP> option 
and <CODE>AC_MACRODIR</CODE> environment variable. (He also coined the term 
<EM>autoconfiscate</EM> to mean "adapt a software package to use Autoconf".) 
Roland and Noah improved the quoting protection in <CODE>AC_DEFINE</CODE> and 
fixed many bugs, especially when I got sick of dealing with portability problems 
from February through June, 1993. </P>
<H2><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC100" 
name=SEC100>Deuteronomy</A></H2>
<P>A long wish list for major features had accumulated, and the effect of 
several years of patching by various people had left some residual cruft. In 
April 1994, while working for Cygnus Support, I began a major revision of 
Autoconf. I added most of the features of the Cygnus <CODE>configure</CODE> that 
Autoconf had lacked, largely by adapting the relevant parts of Cygnus 
<CODE>configure</CODE> with the help of david zuhn and Ken Raeburn. These 
features include support for using <TT>`config.sub'</TT>, 
<TT>`config.guess'</TT>, <SAMP>`--host'</SAMP>, and <SAMP>`--target'</SAMP>; 
making links to files; and running <CODE>configure</CODE> scripts in 
subdirectories. Adding these features enabled Ken to convert GNU 
<CODE>as</CODE>, and Rob Savoye to convert DejaGNU, to using Autoconf. </P>
<P>I added more features in response to other peoples' requests. Many people had 
asked for <CODE>configure</CODE> scripts to share the results of the checks 
between runs, because (particularly when configuring a large source tree, like 
Cygnus does) they were frustratingly slow. Mike Haertel suggested adding 
site-specific initialization scripts. People distributing software that had to 
unpack on MS-DOS asked for a way to override the <TT>`.in'</TT> extension on the 
file names, which produced file names like <TT>`config.h.in'</TT> containing two 
dots. Jim Avera did an extensive examination of the problems with quoting in 
<CODE>AC_DEFINE</CODE> and <CODE>AC_SUBST</CODE>; his insights led to 
significant improvements. Richard Stallman asked that compiler output be sent to 
<TT>`config.log'</TT> instead of <TT>`/dev/null'</TT>, to help people debug the 
Emacs <CODE>configure</CODE> script. </P>
<P>I made some other changes because of my dissatisfaction with the quality of 
the program. I made the messages showing results of the checks less ambiguous, 
always printing a result. I regularized the names of the macros and cleaned up 
coding style inconsistencies. I added some auxiliary utilities that I had 
developed to help convert source code packages to use Autoconf. With the help of 
Pinard, I made the macros not interrupt each others' messages. (That feature 
revealed some performance bottlenecks in GNU <CODE>m4</CODE>, which he hastily 
corrected!) I reorganized the documentation around problems people want to 
solve. And I began a testsuite, because experience had shown that Autoconf has a 
pronounced tendency to regress when we change it. </P>
<P>Again, several alpha testers gave invaluable feedback, especially Pinard, Jim 
Meyering, Karl Berry, Rob Savoye, Ken Raeburn, and Mark Eichin. </P>
<P>Finally, version 2.0 was ready. And there was much rejoicing. (And I have 
free time again. I think. Yeah, right.) </P>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC101" 
name=SEC101>Old Macro Names</A></H1>
<P>In version 2 of Autoconf, most of the macros were renamed to use a more 
uniform and descriptive naming scheme. Here are the old names of the macros that 
were renamed, followed by the current names of those macros. Although the old 
names are still accepted by the <CODE>autoconf</CODE> program for backward 
compatibility, the old names are considered obsolete. See section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC61">Macro 
Names</A>, for a description of the new naming scheme. </P>
<DL compact>
  <DT><CODE>AC_ALLOCA</CODE> 
  <DD><A name=IDX506></A><CODE>AC_FUNC_ALLOCA</CODE> 
  <DT><CODE>AC_ARG_ARRAY</CODE> 
  <DD><A name=IDX507></A>removed because of limited usefulness 
  <DT><CODE>AC_CHAR_UNSIGNED</CODE> 
  <DD><A name=IDX508></A><CODE>AC_C_CHAR_UNSIGNED</CODE> 
  <DT><CODE>AC_CONST</CODE> 
  <DD><A name=IDX509></A><CODE>AC_C_CONST</CODE> 
  <DT><CODE>AC_CROSS_CHECK</CODE> 
  <DD><A name=IDX510></A><CODE>AC_C_CROSS</CODE> 
  <DT><CODE>AC_ERROR</CODE> 
  <DD><A name=IDX511></A><CODE>AC_MSG_ERROR</CODE> 
  <DT><CODE>AC_FIND_X</CODE> 
  <DD><A name=IDX512></A><CODE>AC_PATH_X</CODE> 
  <DT><CODE>AC_FIND_XTRA</CODE> 
  <DD><A name=IDX513></A><CODE>AC_PATH_XTRA</CODE> 
  <DT><CODE>AC_FUNC_CHECK</CODE> 
  <DD><A name=IDX514></A><CODE>AC_CHECK_FUNC</CODE> 
  <DT><CODE>AC_GCC_TRADITIONAL</CODE> 
  <DD><A name=IDX515></A><CODE>AC_PROG_GCC_TRADITIONAL</CODE> 
  <DT><CODE>AC_GETGROUPS_T</CODE> 
  <DD><A name=IDX516></A><CODE>AC_TYPE_GETGROUPS</CODE> 
  <DT><CODE>AC_GETLOADAVG</CODE> 
  <DD><A name=IDX517></A><CODE>AC_FUNC_GETLOADAVG</CODE> 
  <DT><CODE>AC_HAVE_FUNCS</CODE> 
  <DD><A name=IDX518></A><CODE>AC_CHECK_FUNCS</CODE> 
  <DT><CODE>AC_HAVE_HEADERS</CODE> 
  <DD><A name=IDX519></A><CODE>AC_CHECK_HEADERS</CODE> 
  <DT><CODE>AC_HAVE_POUNDBANG</CODE> 
  <DD><A name=IDX520></A><CODE>AC_SYS_INTERPRETER</CODE> (different calling 
  convention) 
  <DT><CODE>AC_HEADER_CHECK</CODE> 
  <DD><A name=IDX521></A><CODE>AC_CHECK_HEADER</CODE> 
  <DT><CODE>AC_HEADER_EGREP</CODE> 
  <DD><A name=IDX522></A><CODE>AC_EGREP_HEADER</CODE> 
  <DT><CODE>AC_INLINE</CODE> 
  <DD><A name=IDX523></A><CODE>AC_C_INLINE</CODE> 
  <DT><CODE>AC_LN_S</CODE> 
  <DD><A name=IDX524></A><CODE>AC_PROG_LN_S</CODE> 
  <DT><CODE>AC_LONG_DOUBLE</CODE> 
  <DD><A name=IDX525></A><CODE>AC_C_LONG_DOUBLE</CODE> 
  <DT><CODE>AC_LONG_FILE_NAMES</CODE> 
  <DD><A name=IDX526></A><CODE>AC_SYS_LONG_FILE_NAMES</CODE> 
  <DT><CODE>AC_MAJOR_HEADER</CODE> 
  <DD><A name=IDX527></A><CODE>AC_HEADER_MAJOR</CODE> 
  <DT><CODE>AC_MINUS_C_MINUS_O</CODE> 
  <DD><A name=IDX528></A><CODE>AC_PROG_CC_C_O</CODE> 
  <DT><CODE>AC_MMAP</CODE> 
  <DD><A name=IDX529></A><CODE>AC_FUNC_MMAP</CODE> 
  <DT><CODE>AC_MODE_T</CODE> 
  <DD><A name=IDX530></A><CODE>AC_TYPE_MODE_T</CODE> 
  <DT><CODE>AC_OFF_T</CODE> 
  <DD><A name=IDX531></A><CODE>AC_TYPE_OFF_T</CODE> 
  <DT><CODE>AC_PID_T</CODE> 
  <DD><A name=IDX532></A><CODE>AC_TYPE_PID_T</CODE> 
  <DT><CODE>AC_PREFIX</CODE> 
  <DD><A name=IDX533></A><CODE>AC_PREFIX_PROGRAM</CODE> 
  <DT><CODE>AC_PROGRAMS_CHECK</CODE> 
  <DD><A name=IDX534></A><CODE>AC_CHECK_PROGS</CODE> 
  <DT><CODE>AC_PROGRAMS_PATH</CODE> 
  <DD><A name=IDX535></A><CODE>AC_PATH_PROGS</CODE> 
  <DT><CODE>AC_PROGRAM_CHECK</CODE> 
  <DD><A name=IDX536></A><CODE>AC_CHECK_PROG</CODE> 
  <DT><CODE>AC_PROGRAM_EGREP</CODE> 
  <DD><A name=IDX537></A><CODE>AC_EGREP_CPP</CODE> 
  <DT><CODE>AC_PROGRAM_PATH</CODE> 
  <DD><A name=IDX538></A><CODE>AC_PATH_PROG</CODE> 
  <DT><CODE>AC_REMOTE_TAPE</CODE> 
  <DD><A name=IDX539></A>removed because of limited usefulness 
  <DT><CODE>AC_RESTARTABLE_SYSCALLS</CODE> 
  <DD><A name=IDX540></A><CODE>AC_SYS_RESTARTABLE_SYSCALLS</CODE> 
  <DT><CODE>AC_RETSIGTYPE</CODE> 
  <DD><A name=IDX541></A><CODE>AC_TYPE_SIGNAL</CODE> 
  <DT><CODE>AC_RSH</CODE> 
  <DD><A name=IDX542></A>removed because of limited usefulness 
  <DT><CODE>AC_SETVBUF_REVERSED</CODE> 
  <DD><A name=IDX543></A><CODE>AC_FUNC_SETVBUF_REVERSED</CODE> 
  <DT><CODE>AC_SET_MAKE</CODE> 
  <DD><A name=IDX544></A><CODE>AC_PROG_MAKE_SET</CODE> 
  <DT><CODE>AC_SIZEOF_TYPE</CODE> 
  <DD><A name=IDX545></A><CODE>AC_CHECK_SIZEOF</CODE> 
  <DT><CODE>AC_SIZE_T</CODE> 
  <DD><A name=IDX546></A><CODE>AC_TYPE_SIZE_T</CODE> 
  <DT><CODE>AC_STAT_MACROS_BROKEN</CODE> 
  <DD><A name=IDX547></A><CODE>AC_HEADER_STAT</CODE> 
  <DT><CODE>AC_STDC_HEADERS</CODE> 
  <DD><A name=IDX548></A><CODE>AC_HEADER_STDC</CODE> 
  <DT><CODE>AC_STRCOLL</CODE> 
  <DD><A name=IDX549></A><CODE>AC_FUNC_STRCOLL</CODE> 
  <DT><CODE>AC_ST_BLKSIZE</CODE> 
  <DD><A name=IDX550></A><CODE>AC_STRUCT_ST_BLKSIZE</CODE> 
  <DT><CODE>AC_ST_BLOCKS</CODE> 
  <DD><A name=IDX551></A><CODE>AC_STRUCT_ST_BLOCKS</CODE> 
  <DT><CODE>AC_ST_RDEV</CODE> 
  <DD><A name=IDX552></A><CODE>AC_STRUCT_ST_RDEV</CODE> 
  <DT><CODE>AC_SYS_SIGLIST_DECLARED</CODE> 
  <DD><A name=IDX553></A><CODE>AC_DECL_SYS_SIGLIST</CODE> 
  <DT><CODE>AC_TEST_CPP</CODE> 
  <DD><A name=IDX554></A><CODE>AC_TRY_CPP</CODE> 
  <DT><CODE>AC_TEST_PROGRAM</CODE> 
  <DD><A name=IDX555></A><CODE>AC_TRY_RUN</CODE> 
  <DT><CODE>AC_TIMEZONE</CODE> 
  <DD><A name=IDX556></A><CODE>AC_STRUCT_TIMEZONE</CODE> 
  <DT><CODE>AC_TIME_WITH_SYS_TIME</CODE> 
  <DD><A name=IDX557></A><CODE>AC_HEADER_TIME</CODE> 
  <DT><CODE>AC_UID_T</CODE> 
  <DD><A name=IDX558></A><CODE>AC_TYPE_UID_T</CODE> 
  <DT><CODE>AC_UTIME_NULL</CODE> 
  <DD><A name=IDX559></A><CODE>AC_FUNC_UTIME_NULL</CODE> 
  <DT><CODE>AC_VFORK</CODE> 
  <DD><A name=IDX560></A><CODE>AC_FUNC_VFORK</CODE> 
  <DT><CODE>AC_VPRINTF</CODE> 
  <DD><A name=IDX561></A><CODE>AC_FUNC_VPRINTF</CODE> 
  <DT><CODE>AC_WAIT3</CODE> 
  <DD><A name=IDX562></A><CODE>AC_FUNC_WAIT3</CODE> 
  <DT><CODE>AC_WARN</CODE> 
  <DD><A name=IDX563></A><CODE>AC_MSG_WARN</CODE> 
  <DT><CODE>AC_WORDS_BIGENDIAN</CODE> 
  <DD><A name=IDX564></A><CODE>AC_C_BIGENDIAN</CODE> 
  <DT><CODE>AC_YYTEXT_POINTER</CODE> 
  <DD><A name=IDX565></A><CODE>AC_DECL_YYTEXT</CODE> </DD></DL>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC102" 
name=SEC102>Environment Variable Index</A></H1>
<P>This is an alphabetical list of the environment variables that Autoconf 
checks. </P>
<P>Jump to: <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#evindex_a">a</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#evindex_c">c</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#evindex_s">s</A> 

<P>
<H2><A name=evindex_a>a</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX1">AC_MACRODIR</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX2">AC_MACRODIR</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX3">AC_MACRODIR</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX4">AC_MACRODIR</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX66">AC_MACRODIR</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX505">AC_MACRODIR</A> 
</LI></DIR>
<H2><A name=evindex_c>c</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX501">CONFIG_FILES</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX503">CONFIG_HEADERS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX497">CONFIG_SHELL</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX495">CONFIG_SITE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX499">CONFIG_STATUS</A> 
</LI></DIR>
<H2><A name=evindex_s>s</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX504">SIMPLE_BACKUP_SUFFIX</A> 
</LI></DIR>
<P></P>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC103" 
name=SEC103>Output Variable Index</A></H1>
<P>This is an alphabetical list of the variables that Autoconf can substitute 
into files that it creates, typically one or more <TT>`Makefile'</TT>s. See 
section <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#SEC54">Setting 
Output Variables</A>, for more information on how this is done. </P>
<P>Jump to: <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_a">a</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_b">b</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_c">c</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_d">d</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_e">e</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_f">f</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_h">h</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_i">i</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_k">k</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_l">l</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_m">m</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_n">n</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_o">o</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_p">p</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_r">r</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_s">s</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_t">t</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_x">x</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#ovindex_y">y</A> 

<P>
<H2><A name=ovindex_a>a</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX156">ALLOCA</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX83">AWK</A> 
</LI></DIR>
<H2><A name=ovindex_b>b</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX16">bindir</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX467">build</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX470">build_alias</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX473">build_cpu</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX479">build_os</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX476">build_vendor</A> 
</LI></DIR>
<H2><A name=ovindex_c>c</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX86">CC</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX110">CC</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX380">CC</A> 
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX50">CFLAGS</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX87">CFLAGS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX18">configure_input</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX93">CPP</A> 
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX52">CPPFLAGS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX96">CXX</A> 
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX100">CXXCPP</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX54">CXXFLAGS</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX97">CXXFLAGS</A> 
</LI></DIR>
<H2><A name=ovindex_d>d</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX20">datadir</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX58">DEFS</A> 
</LI></DIR>
<H2><A name=ovindex_e>e</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX22">exec_prefix</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX348">EXEEXT</A> 
</LI></DIR>
<H2><A name=ovindex_f>f</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX103">F77</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX56">FFLAGS</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX104">FFLAGS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX343">FLIBS</A> 
</LI></DIR>
<H2><A name=ovindex_h>h</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX468">host</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX471">host_alias</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX474">host_cpu</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX480">host_os</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX477">host_vendor</A> 
</LI></DIR>
<H2><A name=ovindex_i>i</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX24">includedir</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX26">infodir</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX113">INSTALL</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX115">INSTALL_DATA</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX114">INSTALL_PROGRAM</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX116">INSTALL_SCRIPT</A> 
</LI></DIR>
<H2><A name=ovindex_k>k</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX175">KMEM_GROUP</A> 
</LI></DIR>
<H2><A name=ovindex_l>l</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX60">LDFLAGS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX119">LEX</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX80">LEX_OUTPUT_ROOT</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX120">LEXLIB</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX28">libdir</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX30">libexecdir</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX162">LIBOBJS</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX173">LIBOBJS</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX184">LIBOBJS</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX226">LIBOBJS</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX280">LIBOBJS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX62">LIBS</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX388">LIBS</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX391">LIBS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX123">LN_S</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX32">localstatedir</A> 
</LI></DIR>
<H2><A name=ovindex_m>m</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX34">mandir</A> 
</LI></DIR>
<H2><A name=ovindex_n>n</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX174">NEED_SETGID</A> 
</LI></DIR>
<H2><A name=ovindex_o>o</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX351">OBJEXT</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX36">oldincludedir</A> 
</LI></DIR>
<H2><A name=ovindex_p>p</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX38">prefix</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX494">program_transform_name</A> 
</LI></DIR>
<H2><A name=ovindex_r>r</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX126">RANLIB</A> 
</LI></DIR>
<H2><A name=ovindex_s>s</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX40">sbindir</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX14">SET_MAKE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX42">sharedstatedir</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX44">srcdir</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX69">subdirs</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX46">sysconfdir</A> 
</LI></DIR>
<H2><A name=ovindex_t>t</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX469">target</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX472">target_alias</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX475">target_cpu</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX481">target_os</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX478">target_vendor</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX48">top_srcdir</A> 
</LI></DIR>
<H2><A name=ovindex_x>x</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX358">X_CFLAGS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX360">X_EXTRA_LIBS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX359">X_LIBS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX361">X_PRE_LIBS</A> 
</LI></DIR>
<H2><A name=ovindex_y>y</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX129">YACC</A> 
</LI></DIR>
<P></P>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC104" 
name=SEC104>Preprocessor Symbol Index</A></H1>
<P>This is an alphabetical list of the C preprocessor symbols that the Autoconf 
macros define. To work with Autoconf, C source code needs to use these names in 
<CODE>#if</CODE> directives. </P>
<P>Jump to: <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex__">_</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_c">c</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_d">d</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_f">f</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_g">g</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_h">h</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_i">i</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_l">l</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_m">m</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_n">n</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_o">o</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_p">p</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_r">r</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_s">s</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_t">t</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_u">u</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_v">v</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_w">w</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#cvindex_y">y</A> 

<P>
<H2><A name=cvindex__>_</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX326">__CHAR_UNSIGNED__</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX372">_ALL_SOURCE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX383">_MINIX</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX385">_POSIX_1_SOURCE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX379">_POSIX_SOURCE</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX384">_POSIX_SOURCE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX259">_POSIX_VERSION</A> 
</LI></DIR>
<H2><A name=cvindex_c>c</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX154">C_ALLOCA</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX159">CLOSEDIR_VOID</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX320">const</A> 
</LI></DIR>
<H2><A name=cvindex_d>d</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX166">DGUX</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX232">DIRENT</A> 
</LI></DIR>
<H2><A name=cvindex_f>f</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX107">F77_NO_MINUS_C_MINUS_O</A> 
</LI></DIR>
<H2><A name=cvindex_g>g</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX293">GETGROUPS_T</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX171">GETLODAVG_PRIVILEGED</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX181">GETPGRP_VOID</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX312">gid_t</A> 
</LI></DIR>
<H2><A name=cvindex_h>h</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX155">HAVE_ALLOCA_H</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX65">HAVE_CONFIG_H</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX239">HAVE_DIRENT_H</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX215">HAVE_DOPRNT</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX223">HAVE_<VAR>function</VAR></A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX178">HAVE_GETMNTENT</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX267">HAVE_<VAR>header</VAR></A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX329">HAVE_LONG_DOUBLE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX366">HAVE_LONG_FILE_NAMES</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX187">HAVE_MMAP</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX240">HAVE_NDIR_H</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX369">HAVE_RESTARTABLE_SYSCALLS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX276">HAVE_ST_BLKSIZE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX279">HAVE_ST_BLOCKS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX283">HAVE_ST_RDEV</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX201">HAVE_STRCOLL</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX204">HAVE_STRFTIME</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX332">HAVE_STRINGIZE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX241">HAVE_SYS_DIR_H</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX242">HAVE_SYS_NDIR_H</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX252">HAVE_SYS_WAIT_H</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX289">HAVE_TM_ZONE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX290">HAVE_TZNAME</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX258">HAVE_UNISTD_H</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX207">HAVE_UTIME_NULL</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX210">HAVE_VFORK_H</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX214">HAVE_VPRINTF</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX218">HAVE_WAIT3</A> 
</LI></DIR>
<H2><A name=cvindex_i>i</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX323">inline</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX337">INT_16_BITS</A> 
</LI></DIR>
<H2><A name=cvindex_l>l</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX340">LONG_64_BITS</A> 
</LI></DIR>
<H2><A name=cvindex_m>m</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX245">MAJOR_IN_MKDEV</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX246">MAJOR_IN_SYSMACROS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX296">mode_t</A> 
</LI></DIR>
<H2><A name=cvindex_n>n</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX235">NDIR</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX255">NEED_MEMORY_H</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX172">NEED_SETGID</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX170">NLIST_NAME_UNION</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX169">NLIST_STRUCT</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX90">NO_MINUS_C_MINUS_O</A> 
</LI></DIR>
<H2><A name=cvindex_o>o</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX299">off_t</A> 
</LI></DIR>
<H2><A name=cvindex_p>p</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX302">pid_t</A> 
</LI></DIR>
<H2><A name=cvindex_r>r</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX305">RETSIGTYPE</A> 
</LI></DIR>
<H2><A name=cvindex_s>s</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX190">SELECT_TYPE_ARG1</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX191">SELECT_TYPE_ARG234</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX192">SELECT_TYPE_ARG5</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX195">SETPGRP_VOID</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX198">SETVBUF_REVERSED</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX308">size_t</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX249">STDC_HEADERS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX165">SVR4</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX229">SYS_SIGLIST_DECLARED</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX233">SYSDIR</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX234">SYSNDIR</A> 
</LI></DIR>
<H2><A name=cvindex_t>t</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX273">TIME_WITH_SYS_TIME</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX286">TM_IN_SYS_TIME</A> 
</LI></DIR>
<H2><A name=cvindex_u>u</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX311">uid_t</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX167">UMAX</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX168">UMAX4_3</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX262">USG</A> 
</LI></DIR>
<H2><A name=cvindex_v>v</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX211">vfork</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX236">VOID_CLOSEDIR</A> 
</LI></DIR>
<H2><A name=cvindex_w>w</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX317">WORDS_BIGENDIAN</A> 
</LI></DIR>
<H2><A name=cvindex_y>y</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX79">YYTEXT_POINTER</A> 
</LI></DIR>
<P></P>
<H1><A href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#TOC105" 
name=SEC105>Macro Index</A></H1>
<P>This is an alphabetical list of the Autoconf macros. To make the list easier 
to use, the macros are listed without their preceding <SAMP>`AC_'</SAMP>. </P>
<P>Jump to: <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_a">a</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_b">b</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_c">c</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_d">d</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_e">e</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_f">f</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_g">g</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_h">h</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_i">i</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_l">l</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_m">m</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_o">o</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_p">p</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_r">r</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_s">s</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_t">t</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_u">u</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_v">v</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_w">w</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_x">x</A> 
- <A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#maindex_y">y</A> 

<P>
<H2><A name=maindex_a>a</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX371">AIX</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX506">ALLOCA</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX507">ARG_ARRAY</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX489">ARG_ENABLE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX493">ARG_PROGRAM</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX485">ARG_WITH</A> 
</LI></DIR>
<H2><A name=maindex_b>b</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX458">BEFORE</A> 
</LI></DIR>
<H2><A name=maindex_c>c</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX316">C_BIGENDIAN</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX325">C_CHAR_UNSIGNED</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX319">C_CONST</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX411">C_CROSS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX322">C_INLINE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX328">C_LONG_DOUBLE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX331">C_STRINGIZE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX435">CACHE_CHECK</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX437">CACHE_LOAD</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX439">CACHE_SAVE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX433">CACHE_VAL</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX464">CANONICAL_HOST</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX462">CANONICAL_SYSTEM</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX508">CHAR_UNSIGNED</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX131">CHECK_FILE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX133">CHECK_FILES</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX220">CHECK_FUNC</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX222">CHECK_FUNCS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX264">CHECK_HEADER</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX266">CHECK_HEADERS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX145">CHECK_LIB</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX135">CHECK_PROG</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX137">CHECK_PROGS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX334">CHECK_SIZEOF</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX139">CHECK_TOOL</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX314">CHECK_TYPE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX449">CHECKING</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX407">COMPILE_CHECK</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX8">CONFIG_AUX_DIR</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX64">CONFIG_HEADER</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX68">CONFIG_SUBDIRS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX509">CONST</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX510">CROSS_CHECK</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX345">CYGWIN</A> 
</LI></DIR>
<H2><A name=maindex_d>d</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX228">DECL_SYS_SIGLIST</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX78">DECL_YYTEXT</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX425">DEFINE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX427">DEFINE_UNQUOTED</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX452">DEFUN</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX231">DIR_HEADER</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX374">DYNIX_SEQ</A> 
</LI></DIR>
<H2><A name=maindex_e>e</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX397">EGREP_CPP</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX395">EGREP_HEADER</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX491">ENABLE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX511">ERROR</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX347">EXEEXT</A> 
</LI></DIR>
<H2><A name=maindex_f>f</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX342">F77_LIBRARY_LDFLAGS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX512">FIND_X</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX513">FIND_XTRA</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX153">FUNC_ALLOCA</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX514">FUNC_CHECK</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX158">FUNC_CLOSEDIR_VOID</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX161">FUNC_FNMATCH</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX164">FUNC_GETLOADAVG</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX177">FUNC_GETMNTENT</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX180">FUNC_GETPGRP</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX183">FUNC_MEMCMP</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX186">FUNC_MMAP</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX189">FUNC_SELECT_ARGTYPES</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX194">FUNC_SETPGRP</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX197">FUNC_SETVBUF_REVERSED</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX200">FUNC_STRCOLL</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX203">FUNC_STRFTIME</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX206">FUNC_UTIME_NULL</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX209">FUNC_VFORK</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX213">FUNC_VPRINTF</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX217">FUNC_WAIT3</A> 
</LI></DIR>
<H2><A name=maindex_g>g</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX515">GCC_TRADITIONAL</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX516">GETGROUPS_T</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX517">GETLOADAVG</A> 
</LI></DIR>
<H2><A name=maindex_h>h</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX518">HAVE_FUNCS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX519">HAVE_HEADERS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX147">HAVE_LIBRARY</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX520">HAVE_POUNDBANG</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX521">HEADER_CHECK</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX238">HEADER_DIRENT</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX522">HEADER_EGREP</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX244">HEADER_MAJOR</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX269">HEADER_STAT</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX248">HEADER_STDC</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX251">HEADER_SYS_WAIT</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX272">HEADER_TIME</A> 
</LI></DIR>
<H2><A name=maindex_i>i</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX6">INIT</A> 
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX523">INLINE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX336">INT_16_BITS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX376">IRIX_SUN</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX378">ISC_POSIX</A> 
</LI></DIR>
<H2><A name=maindex_l>l</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX413">LANG_C</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX415">LANG_CPLUSPLUS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX417">LANG_FORTRAN77</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX421">LANG_RESTORE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX419">LANG_SAVE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX483">LINK_FILES</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX524">LN_S</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX339">LONG_64_BITS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX525">LONG_DOUBLE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX526">LONG_FILE_NAMES</A> 
</LI></DIR>
<H2><A name=maindex_m>m</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX527">MAJOR_HEADER</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX254">MEMORY_H</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX353">MINGW32</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX382">MINIX</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX528">MINUS_C_MINUS_O</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX529">MMAP</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX530">MODE_T</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX441">MSG_CHECKING</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX445">MSG_ERROR</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX443">MSG_RESULT</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX447">MSG_WARN</A> 
</LI></DIR>
<H2><A name=maindex_o>o</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX350">OBJEXT</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX460">OBSOLETE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX531">OFF_T</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX10">OUTPUT</A> 
</LI></DIR>
<H2><A name=maindex_p>p</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX141">PATH_PROG</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX143">PATH_PROGS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX355">PATH_X</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX357">PATH_XTRA</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX532">PID_T</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX533">PREFIX</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX72">PREFIX_PROGRAM</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX74">PREREQ</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX82">PROG_AWK</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX85">PROG_CC</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX89">PROG_CC_C_O</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX92">PROG_CPP</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX95">PROG_CXX</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX99">PROG_CXXCPP</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX106">PROG_F77_C_O</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX102">PROG_FORTRAN</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX109">PROG_GCC_TRADITIONAL</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX112">PROG_INSTALL</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX118">PROG_LEX</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX122">PROG_LN_S</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX13">PROG_MAKE_SET</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX125">PROG_RANLIB</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX128">PROG_YACC</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX536">PROGRAM_CHECK</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX537">PROGRAM_EGREP</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX538">PROGRAM_PATH</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX534">PROGRAMS_CHECK</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX535">PROGRAMS_PATH</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX456">PROVIDE</A> 
</LI></DIR>
<H2><A name=maindex_r>r</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX539">REMOTE_TAPE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX225">REPLACE_FUNCS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX454">REQUIRE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX423">REQUIRE_CPP</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX540">RESTARTABLE_SYSCALLS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX541">RETSIGTYPE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX76">REVISION</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX542">RSH</A> 
</LI></DIR>
<H2><A name=maindex_s>s</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX387">SCO_INTL</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX149">SEARCH_LIBS</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX151">SEARCH_LIBS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX544">SET_MAKE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX543">SETVBUF_REVERSED</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX546">SIZE_T</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX545">SIZEOF_TYPE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX550">ST_BLKSIZE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX551">ST_BLOCKS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX552">ST_RDEV</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX270">STAT_MACROS_BROKEN</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX547">STAT_MACROS_BROKEN</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX548">STDC_HEADERS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX549">STRCOLL</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX275">STRUCT_ST_BLKSIZE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX278">STRUCT_ST_BLOCKS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX282">STRUCT_ST_RDEV</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX288">STRUCT_TIMEZONE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX285">STRUCT_TM</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX429">SUBST</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX431">SUBST_FILE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX363">SYS_INTERPRETER</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX365">SYS_LONG_FILE_NAMES</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX368">SYS_RESTARTABLE_SYSCALLS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX553">SYS_SIGLIST_DECLARED</A> 
</LI></DIR>
<H2><A name=maindex_t>t</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX554">TEST_CPP</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX555">TEST_PROGRAM</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX557">TIME_WITH_SYS_TIME</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX556">TIMEZONE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX399">TRY_COMPILE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX393">TRY_CPP</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX401">TRY_LINK</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX403">TRY_LINK_FUNC</A>, 
<A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX405">TRY_LINK_FUNC</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX409">TRY_RUN</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX292">TYPE_GETGROUPS</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX295">TYPE_MODE_T</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX298">TYPE_OFF_T</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX301">TYPE_PID_T</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX304">TYPE_SIGNAL</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX307">TYPE_SIZE_T</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX310">TYPE_UID_T</A> 
</LI></DIR>
<H2><A name=maindex_u>u</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX558">UID_T</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX257">UNISTD_H</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX261">USG</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX559">UTIME_NULL</A> 
</LI></DIR>
<H2><A name=maindex_v>v</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX466">VALIDATE_CACHED_SYSTEM_TUPLE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX451">VERBOSE</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX560">VFORK</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX561">VPRINTF</A> 
</LI></DIR>
<H2><A name=maindex_w>w</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX562">WAIT3</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX563">WARN</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX487">WITH</A> 

<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX564">WORDS_BIGENDIAN</A> 
</LI></DIR>
<H2><A name=maindex_x>x</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX390">XENIX_DIR</A> 
</LI></DIR>
<H2><A name=maindex_y>y</A></H2>
<DIR>
<LI><A 
href="http://www.gnu.org/manual/autoconf/html_mono/autoconf.html#IDX565">YYTEXT_POINTER</A> 
</LI></DIR>
<P></P>
<P>
<HR>

<P>This document was generated on 20 June 1999 using the <A 
href="http://wwwinfo.cern.ch/dis/texi2html/">texi2html</A> translator version 
1.52.</P></BODY></HTML>
