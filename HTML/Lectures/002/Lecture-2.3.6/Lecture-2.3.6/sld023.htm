
<!--  Presentation generated by Internet Assistant for Microsoft PowerPoint 97 -->

<HTML>
<HEAD>

<meta name="GENERATOR" content="Microsoft Internet Assistant for Microsoft PowerPoint 97">
 <TITLE>Linux Design Principle</TITLE> 
</HEAD>

<BODY     >

<CENTER>
<TABLE WIDTH=100%> 
     <TR> <TD WIDTH=100% ALIGN=CENTER>
         <IMG SRC="img023.gif" usemap="#Objmap" WIDTH=768 HEIGHT=576 BORDER=0>
     </TD> </TR>
     <TR> <TD WIDTH=100% ALIGN=CENTER>
         <A HREF="sld001.htm">First</A>&nbsp;&nbsp;
         <A HREF="sld022.htm">Previous</A>&nbsp;&nbsp;
         <A HREF="sld024.htm">Next</A>&nbsp;&nbsp;
         <A HREF="sld024.htm">Last</A>&nbsp;&nbsp;
&nbsp;&nbsp;         <A HREF="index.htm">Index</A>&nbsp;&nbsp;
         <A HREF="http://www.lisoleg.org">Home</A>&nbsp;&nbsp;
         <A HREF="tsld023.htm">Text</A>&nbsp;&nbsp;
     </TD> </TR>
</TABLE>
<P>Slide 23 of 24</P>
</CENTER>
<!-- <UL>
<H2>Linux Design Principle</H2>
</UL></P>
<P><UL>
<LI><H2>Managing the development of Linux and making design decisions about Linux dictate the same approach.
</H2>
<UL>
<LI>Portability
<BR>Compile time constant rather than using a variable
<BR>The generalizations you're looking for when surveying systems are frequently the same as the optimizations you'd like to make to improve the kernel's performance. 
<BR>If you had not been thinking about portability as a design goal, but had just been thinking about optimization of the kernel on a particular architecture, you would frequently reach the same conclusion.
<LI>Modularity
<BR>Virtual FS, MM, Scheduler 
<BR>Module: kernel modules to keep hardware specifics in the modules. This is a good middle ground between putting all the hardware specifics in the core kernel, which makes for a fast but unportable kernel, and putting all the hardware specifics in user space, which results in a system that is either slow, unstable, or both.</UL></UL></P>
<P>  -->
</Body>
</HTML>
