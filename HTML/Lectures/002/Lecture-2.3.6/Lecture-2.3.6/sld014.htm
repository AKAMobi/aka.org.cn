
<!--  Presentation generated by Internet Assistant for Microsoft PowerPoint 97 -->

<HTML>
<HEAD>

<meta name="GENERATOR" content="Microsoft Internet Assistant for Microsoft PowerPoint 97">
 <TITLE>Virtual Linux Kernel Threads</TITLE> 
</HEAD>

<BODY     >

<CENTER>
<TABLE WIDTH=100%> 
     <TR> <TD WIDTH=100% ALIGN=CENTER>
         <IMG SRC="img014.gif" usemap="#Objmap" WIDTH=768 HEIGHT=576 BORDER=0>
     </TD> </TR>
     <TR> <TD WIDTH=100% ALIGN=CENTER>
         <A HREF="sld001.htm">First</A>&nbsp;&nbsp;
         <A HREF="sld013.htm">Previous</A>&nbsp;&nbsp;
         <A HREF="sld015.htm">Next</A>&nbsp;&nbsp;
         <A HREF="sld024.htm">Last</A>&nbsp;&nbsp;
&nbsp;&nbsp;         <A HREF="index.htm">Index</A>&nbsp;&nbsp;
         <A HREF="http://www.lisoleg.org">Home</A>&nbsp;&nbsp;
         <A HREF="tsld014.htm">Text</A>&nbsp;&nbsp;
     </TD> </TR>
</TABLE>
<P>Slide 14 of 24</P>
</CENTER>
<!-- <UL>
<H2>Virtual Linux Kernel Threads</H2>
</UL></P>
<P><UL>
<LI><H2>Bottom Half
</H2>
<UL>
globally serialized; running at 1) schedule(), bad idea, now tq_scheduler, and softirq with kernel lock; 2)ret_from_syscall/interrupt
<BR><BR>problems: 1) 32; 2) only one handler; 3)spin_lock held, no block 
</UL></UL><UL>
<LI><H2>Tasklets
</H2>
<UL>
dynamically-registrable software interrupt
<BR><BR>only run on one CPU at a time,  serialized wrt itself
</UL></UL><UL>
<LI><H2>Softirq
</H2>
<UL>
32 enumerated software interrupts ;No shared variables, all the data are CPU local
<BR><BR>It is multithreaded and does not require any global serialization
</UL></UL><UL>
<LI><H2>Software Interrupt
</H2>
<UL>
running when a hardware interrupt returns, or schedule happens, or return to user space
<BR><BR>Tasklets, softirqs and bottom halves (timer is a slow irq, but not interruptted), not trap
</UL></UL><UL>
<LI><H2>Interrupt Context, User Context
</H2>
<UL>
in_interrupt(), in_irq(), in_softirq(), current()<BR></UL></UL></P>
<P>  -->
</Body>
</HTML>
