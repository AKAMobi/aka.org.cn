
<!--  Presentation generated by Internet Assistant for Microsoft PowerPoint 97 -->

<HTML>
<HEAD>

<meta name="GENERATOR" content="Microsoft Internet Assistant for Microsoft PowerPoint 97">
 <TITLE>LinuxThreads</TITLE> 
</HEAD>

<BODY     >

<CENTER>
<TABLE WIDTH=100%> 
     <TR> <TD WIDTH=100% ALIGN=CENTER>
         <IMG SRC="img020.gif" usemap="#Objmap" WIDTH=768 HEIGHT=576 BORDER=0>
     </TD> </TR>
     <TR> <TD WIDTH=100% ALIGN=CENTER>
         <A HREF="sld001.htm">First</A>&nbsp;&nbsp;
         <A HREF="sld019.htm">Previous</A>&nbsp;&nbsp;
         <A HREF="sld021.htm">Next</A>&nbsp;&nbsp;
         <A HREF="sld024.htm">Last</A>&nbsp;&nbsp;
&nbsp;&nbsp;         <A HREF="index.htm">Index</A>&nbsp;&nbsp;
         <A HREF="http://www.lisoleg.org">Home</A>&nbsp;&nbsp;
         <A HREF="tsld020.htm">Text</A>&nbsp;&nbsp;
     </TD> </TR>
</TABLE>
<P>Slide 20 of 24</P>
</CENTER>
<!-- <UL>
<H2>LinuxThreads</H2>
</UL></P>
<P><UL>
<LI><H2>A true process sharing memory space with others
</H2>
</UL><UL>
<LI><H2>Clone
</H2>
<UL>
n threads, but n+2 process, "Linux needs only one clone" (Plan 9, R-Fork; SGI S-Proc)
<BR></UL></UL><UL>
<LI><H2>synchronization resource unfairness
</H2>
<UL>
one thread may unlock then lock before scheduling, e.g. two printfs
<BR><BR>forcing resource transference
</UL></UL><UL>
<LI><H2>singal dispatching problem
</H2>
<UL>
If the signal is sent via kill() or the tty interface (e.g. by pressing ctrl-C), then the POSIX specs say that the handler is executed by any thread in the process that does not currently block the signal. 
<BR><BR>The latter case is where LinuxThreads departs from the POSIX specs. In LinuxThreads, there is no real notion of ``the process as a whole'': in the kernel, each thread is really a distinct process with a distinct PID, and signals sent to the PID of a thread can only be handled by that thread. 
</UL></UL><UL>
<LI><H2>Expensive for context, switch, synchronization</H2>
</UL></P>
<P>  -->
</Body>
</HTML>
