<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Socket常用的数据结构</title>
<meta name="Microsoft Theme" content="blank 001, default">
<meta name="Microsoft Border" content="tl, default">
</head>

<body background="_themes/blank/blbkgnd.gif" bgcolor="#FFFFFF" text="#000000" link="#999999" vlink="#990000" alink="#666666"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="宋体">

<p align="center"><font size="6"><strong><img src="_derived/new_page_5.htm_cmp_blank000_bnr.gif" width="600" height="60" border="0" alt="数据结构"></strong></font><br>
<a href="index.htm"><img src="_derived/home_cmp_blank000_hbtn.gif" width="140" height="32" border="0" alt="主页" align="middle"></a> <a href="new_page_3.htm"><img src="_derived/up_cmp_blank000_hbtn.gif" width="140" height="32" border="0" alt="上一层" align="middle"></a> <a href="new_page_1.htm"><img src="_derived/new_page_1.htm_cmp_blank000_hbtn.gif" width="140" height="32" border="0" alt="协议模型" align="middle"></a> <a href="new_page_2.htm"><img src="_derived/new_page_2.htm_cmp_blank000_hbtn.gif" width="140" height="32" border="0" alt="基本概念" align="middle"></a> <a href="new_page_4.htm"><img src="_derived/new_page_4.htm_cmp_blank000_hbtn.gif" width="140" height="32" border="0" alt="头文件" align="middle"></a> <img src="_derived/new_page_5.htm_cmp_blank000_hbtn_p.gif" width="140" height="32" border="0" alt="数据结构" align="middle"> <a href="new_page_6.htm"><img src="_derived/new_page_6.htm_cmp_blank000_hbtn.gif" width="140" height="32" border="0" alt="函数列表" align="middle"></a></p>
<p align="center">　</p>

<!--mstheme--></font></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top" width="1%"><!--mstheme--><font face="宋体">



<!--mstheme--></font></td><td valign="top" width="24"></td><!--msnavigation--><td valign="top"><!--mstheme--><font face="宋体">

<font size="+2">
<h1 align="center">Socket常用的数据结构</h1>
<p>struct sockaddr {</p>
<blockquote>
  <p>unsigned short sa_family; /* address family, AF_xxx */</p>
  <p>char sa_data[14]; /* 14 bytes of protocol address */</p>
</blockquote>
<p>};</p>
<p>此数据结构用做bind、connect、recvfrom、sendto等函数的参数，指明地址信息。</p>
<p>　</p>
<p>但一般编程中并不直接针对此数据结构操作，而是使用另一个与sockaddr等价的数据结构sockaddr_in（在netinet/in.h中定义）：</p>
<p>struct sockaddr_in {</p>
<blockquote>
  <p>short int sin_family; /* Address family */</p>
  <p>unsigned short int sin_port; /* Port number */</p>
  <p>struct in_addr sin_addr; /* Internet address */</p>
  <p>unsigned char sin_zero[8]; /* Same size as struct sockaddr */</p>
</blockquote>
<p>};</p>
<p>在编程中大多数是使用sockaddr_in这个结构来设置/获取地址信息。</p>
<p>sin_family指代协议族，在socket编程中只能是AF_INET</p>
<p>sin_port存储端口号（使用网络字节顺序）</p>
<p>sin_addr存储IP地址，使用in_addr这个数据结构</p>
<blockquote>
  <p>struct in_addr {</p>
  <blockquote>
    <p>unsigned long s_addr;</p>
  </blockquote>
  <p>};</p>
  <p>这个数据结构是由于历史原因保留下来的，主要用作与以前的格式兼容。</p>
  <p>s_addr按照网络字节顺序存储IP地址</p>
</blockquote>
<p>sin_zero是为了让sockaddr与sockaddr_in两个数据结构保持大小相同而保留的空字节。</p>
<p>　</p>
</font>
<p><font size="6">设置地址信息的示例：</font></p>
<font size="+2">
<blockquote>
  <p>struct sockaddr_in sa;</p>
  <p>sa.sin_family = AF_INET;<br>
  sa.sin_port = htons(3490); /* short, NBO*/<br>
  sa.sin_addr.s_addr = inet_addr(&quot;132.241.5.10&quot;); <br>
  bzero(&amp;(sa.sin_zero), 8);</p>
  <p><font color="#FF0000">注意：如果sa.sin_addr.s_addr ＝ INADDR_ANY，则不指定IP地址（用于Server程序）</font></p>
  <h1 align="center">　</h1>
</blockquote>
</font>　

<!--mstheme--></font><!--msnavigation--></td></tr><!--msnavigation--></table></body>

</html>
